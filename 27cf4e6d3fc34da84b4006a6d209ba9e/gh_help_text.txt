Set Up Git - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Bootcamp / Set Up Git Set Up Git mac windows linux all At the heart of GitHub is an open source version control system (VCS) called Git. Git is responsible for everything GitHub-related that happens locally on your computer. To use Git on the command line, you'll need to download, install, and configure Git on your computer. If you want to work with Git locally, but don't want to use the command line, you can instead download and install the GitHub Desktop client. For more information, see "Getting Started with GitHub Desktop." If you don't need to work with files locally, GitHub lets you complete many Git-related actions directly in the browser, including: Creating a repository Forking a repository Managing files Being social Setting up Git Download and install the latest version of Git. Set your username in Git. Set your commit email address in Git. Next steps: Authenticating with GitHub from Git When you connect to a GitHub repository from Git, you'll need to authenticate with GitHub using either HTTPS or SSH. Connecting over HTTPS (recommended) If you clone with HTTPS, you can cache your GitHub password in Git using a credential helper. Connecting over SSH If you clone with SSH, you must generate SSH keys on each computer you use to push or pull from GitHub. Celebrate Congratulations, you now have Git and GitHub all set up! What do you want to do next? Set up Git "Create a repository" "Fork a repository" "Be social" Connect with people around the world in the GitHub Community Forum Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Create A Repo - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Bootcamp / Create A Repo Create A Repo mac windows linux all To put your project up on GitHub, you'll need to create a repository for it to live in. You can store a variety of projects in GitHub repositories, including open source projects. With open source projects, you can share code to make better, more reliable software. Note: You can create public repositories for an open source project. When creating your public repository, make sure to include a license file that determines how you want your project to be shared with others. For more information on open source, specifically how to create and grow an open source project, we've created Open Source Guides that will help you foster a healthy open source community by recommending best practices for creating and maintaining repositories for your open source project. In the upper-right corner of any page, click , and then click New repository. Type a short, memorable name for your repository. For example, "hello-world". Optionally, add a description of your repository. For example, "My first repository on GitHub." Choose between creating a public or private repository. Public repositories are a great choice for getting started. They're visible to any user on GitHub, so you can benefit from a collaborative community. Private repositories require a little more setup. They're only available to you, the repository owner, as well as any collaborators you choose to share with. Private repositories are only available for paid accounts. For more information, see "GitHub's billing plans." Select Initialize this repository with a README. Click Create repository. Congratulations! You've successfully created your first repository, and initialized it with a README file. Commit your first change A commit is like a snapshot of all the files in your project at a particular point in time. When you created your new repository, you initialized it with a README file. README files are a great place to describe your project in more detail, or add some documentation such as how to install or use your project. The contents of your README file are automatically shown on the front page of your repository. Let's commit a change to the README file. In your repository's list of files, click README.md. Above the file's content, click . On the Edit file tab , type some information about yourself. Above the new content, click Preview changes. Review the changes you made to the file. You'll see the new content in green. At the bottom of the page, type a short, meaningful commit message that describes the change you made to the file. Below the commit message fields, decide whether to add your commit to the current branch or to a new branch. If your current branch is master, you should choose to create a new branch for your commit and then create a pull request. Click Propose file change. Celebrate Congratulations! You have now created a repository, including a README file, and created your first commit on GitHub. What do you want to do next? "Set up Git" Create a repository "Fork a repository" "Be social" Connect with people around the world in the GitHub Community Forum Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Fork A Repo - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Bootcamp / Fork A Repo Fork A Repo mac windows linux all A fork is a copy of a repository. Forking a repository allows you to freely experiment with changes without affecting the original project. Most commonly, forks are used to either propose changes to someone else's project or to use someone else's project as a starting point for your own idea. Propose changes to someone else's project A great example of using forks to propose changes is for bug fixes. Rather than logging an issue for a bug you've found, you can: Fork the repository. Make the fix. Submit a pull request to the project owner. If the project owner likes your work, they might pull your fix into the original repository! Use someone else's project as a starting point for your own idea. At the heart of open source is the idea that by sharing code, we can make better, more reliable software. When creating your public repository from a fork of someone's project, make sure to include a license file that determines how you want your project to be shared with others. For more information on open source, specifically how to create and grow an open source project, we've created Open Source Guides that will help you foster a healthy open source community by recommending best practices for creating and maintaining repositories for your open source project. Fork an example repository Forking a repository is a simple two-step process. We've created a repository for you to practice with! On GitHub, navigate to the octocat/Spoon-Knife repository. In the top-right corner of the page, click Fork. That's it! Now, you have a fork of the original octocat/Spoon-Knife repository. Keep your fork synced You might fork a project in order to propose changes to the upstream, or original, repository. In this case, it's good practice to regularly sync your fork with the upstream repository. To do this, you'll need to use Git on the command line. You can practice setting the upstream repository using the same octocat/Spoon-Knife repository you just forked! Step 1: Set up Git If you haven't yet, you should first set up Git. Don't forget to set up authentication to GitHub from Git as well. Step 2: Create a local clone of your fork Right now, you have a fork of the Spoon-Knife repository, but you don't have the files in that repository on your computer. Let's create a clone of your fork locally on your computer. On GitHub, navigate to your fork of the Spoon-Knife repository. Under the repository name, click Clone or download. In the Clone with HTTPs section, click to copy the clone URL for the repository. Open TerminalTerminalGit Bash. Type git clone, and then paste the URL you copied in Step 2. It will look like this, with your GitHub username instead of YOUR-USERNAME: git clone https://github.com/YOUR-USERNAME/Spoon-Knife Press Enter. Your local clone will be created. git clone https://github.com/YOUR-USERNAME/Spoon-Knife Cloning into `Spoon-Knife`... remote: Counting objects: 10, done. remote: Compressing objects: 100% (8/8), done. remove: Total 10 (delta 1), reused 10 (delta 1) Unpacking objects: 100% (10/10), done. Now, you have a local copy of your fork of the Spoon-Knife repository! Step 3: Configure Git to sync your fork with the original Spoon-Knife repository When you fork a project in order to propose changes to the original repository, you can configure Git to pull changes from the original, or upstream, repository into the local clone of your fork. On GitHub, navigate to the octocat/Spoon-Knife repository. Under the repository name, click Clone or download. In the Clone with HTTPs section, click to copy the clone URL for the repository. Open TerminalTerminalGit Bash. Change directories to the location of the fork you cloned in Step 2: Create a local clone of your fork. To go to your home directory, type just cd with no other text. To list the files and folders in your current directory, type ls. To go into one of your listed directories, type cd your_listed_directory. To go up one directory, type cd ... Type git remote -v and press Enter. You'll see the current configured remote repository for your fork. git remote -v origin https://github.com/YOUR_USERNAME/YOUR_FORK.git (fetch) origin https://github.com/YOUR_USERNAME/YOUR_FORK.git (push) Type git remote add upstream, and then paste the URL you copied in Step 2 and press Enter. It will look like this: git remote add upstream https://github.com/octocat/Spoon-Knife.git To verify the new upstream repository you've specified for your fork, type git remote -v again. You should see the URL for your fork as origin, and the URL for the original repository as upstream. git remote -v origin https://github.com/YOUR_USERNAME/YOUR_FORK.git (fetch) origin https://github.com/YOUR_USERNAME/YOUR_FORK.git (push) upstream https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git (fetch) upstream https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git (push) Now, you can keep your fork synced with the upstream repository with a few Git commands. For more information, see "Syncing a fork." Next steps The sky's the limit with the changes you can make to a fork, including: Creating branches: Branches allow you to build new features or test out ideas without putting your main project at risk. Opening pull requests: If you are hoping to contribute back to the original repository, you can send a request to the original author to pull your fork into their repository by submitting a pull request. Find another repository to fork Fork a repository to start contributing to a project. You can fork any public repository, or any private repository you can access. For more information, see "About forks." You can browse Explore to find projects and start contributing to open source repositories. For more information, see "Finding open source projects on GitHub." Celebrate You have now forked a repository, practiced cloning your fork, and configured an upstream repository. What do you want to do next? "Set up Git" "Create a repository" Fork a repository "Be social" Connect with people around the world in the GitHub Community Forum Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Be Social - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Bootcamp / Be Social Be Social mac windows linux all One of the great features on GitHub is the ability to see what other people are working on and who they are connecting with. Follow people When you follow someone on GitHub, you'll get notifications on your dashboard about their activity. Once you are on one of their pages, click the "follow" button. Watch a project At some point you may want to stay up-to-date with a specific project. When you're on a project page, you can click the Watch button at the top of the page. When the owner updates the project, you'll see what happened in your dashboard. Join the conversation You can connect with developers around the world in the GitHub Community Forum to ask and answer questions, learn, and interact directly with GitHub staff. More things you can do You've done some of the most basic social interaction GitHub has to offer, but don't stop there! Check out these other social features: Pull requests You may find yourself wanting to contribute to someone else's project, whether to add features or to fix bugs. After making changes, you can let the original author know about them by sending a pull request. Issues When you are collaborating on a project with someone, you sometimes come across problems that need to be fixed. Each repository has an Issues section to help you keep track of these problems. Organizations Have you found yourself wishing you could collaborate with multiple people on one project? You can manage everyone with organizations! With an organization you can establish teams with special permissions, have a public organization profile, and keep track of activity within the organization. Explore Discover interesting projects in the Explore GitHub and Trending page sections. You can then star projects that you find interesting and want to come back to later—just visit your stars page to see all your starred projects. Celebrate Congratulations! You are quite the socialite. Set up Git Create a repository Fork a repository Be social Connect with people around the world in the GitHub Community Forum Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Signing up for a new GitHub account - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setup / Signing up for a new GitHub account Signing up for a new GitHub account mac windows linux all GitHub offers free accounts for users and organizations working on public and open source projects, as well as paid accounts that offer unlimited private repositories and optional user management and security features. If you want more information about account types, you can read about the difference between a user and an organization account and GitHub's billing plans. Tip: You do not need a paid user account to access and collaborate on repositories in an organization. Signing up for service Go to GitHub's Pricing page. Read the information about the different accounts and plans that GitHub offers. To sign up for a paid plan, click the link below the type of plan you'd like to use. To sign up for an account on the free plan, click Sign up for one of our free plans. Follow the prompts to create your personal account and optionally, upgrade your personal account or create and upgrade an organization account. Next steps "Verify your email address" "Set up two-factor authentication" "Add a bio to your profile" "Create an organization" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Verifying your email address - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setup / Verifying your email address Verifying your email address mac windows linux all Verifying your primary email address ensures strengthened security and allows GitHub staff to better assist you if you forget your password. You can verify your email address after signing up for a new account, or when you add a new email address. Warning: If you have not verified your email address, you will not be able to: Create or fork repositories Create issues or pull requests Comment on issues, pull requests, or commits Authorize OAuth App applications Generate personal access tokens In the upper-right corner of any page, click your profile photo, then click Settings. In the left sidebar, click Emails. Next to your email address, click Send verification email. GitHub will send you an email with a link in it. After you click that link, you'll be taken to an email confirmation page. On the Email Settings page, click Confirm. Note: If you click the confirmation link in the email but don't see the Confirm button on the Email Settings page, sign in and try again. Resolving issues when the email confirmation page is missing If you click on the email confirmation link and are directed to an error page, you might be experiencing one of the following issues: Either you're not signed into GitHub; or You're signed into a different GitHub account. To resolve the problem: Sign out of your personal GitHub account. Quit and restart your browser. Sign in to your personal GitHub account. Click on the verification link in the email we sent you. In addition, make sure that you click the verification email within 24 hours of delivery. Otherwise, the link will not work. You can always request another one to be sent. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support About commit email addresses - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setup / About commit email addresses About commit email addresses mac windows linux all GitHub uses your commit email address to associate commits with your GitHub account. You can choose the email address that will be associated with the commits you push from the command line as well as web-based Git operations you make. For web-based Git operations, you can set your commit email address on GitHub. For commits you push from the command line, you can set your commit email address in Git. If you'd like to keep your personal email address private, you can use a GitHub-provided no-reply email address as your commit email address. To use your noreply email address for commits you push from the command line, use that email address when you set your commit email address in Git. To use your noreply address for web-based Git operations, set your commit email address on GitHub and choose to Keep my email address private. You can also choose to block commits you push from the command line that expose your personal email address. To ensure that commits are attributed to you and appear in your contributions graph, use an email address that you've added to your GitHub account, or the GitHub-provided noreply email address provided to you in your email settings. Note: If you created your GitHub account after July 18, 2017, your GitHub-provided no-reply email address is a seven-digit ID number and your username in the form of ID+username@users.noreply.github.com. If you created your GitHub account prior to July 18, 2017, your GitHub-provided no-reply email address is your username in the form of username@users.noreply.github.com. You can get an ID-based GitHub-provided no-reply email address by selecting (or deselecting and reselecting) Keep my email address private in your email settings. If you use your GitHub-provided noreply email address to make commits and then change your username, those commits will not be associated with your GitHub account. This does not apply if you're using the ID-based GitHub-provided noreply address. For more information, see "What happens when I change my username?" Further reading "Setting your commit email address on GitHub" "Setting your commit email address in Git" "Blocking command line pushes that expose your personal email" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Setting your commit email address on GitHub - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setup / Setting your commit email address on GitHub Setting your commit email address on GitHub mac windows linux all You can set a primary email address on GitHub that's associated with web-based Git operations you perform such as edits and merges. Alternatively, you can choose to keep your personal email address private and use a GitHub-provided noreply email address for your web-based Git operations. After changing your commit email address on GitHub, the new address will be visible in all of your future web-based Git operations. Any commits you made prior to changing your commit email address are still associated with your previous email address. If you keep your email address private, you can also set your commit email address in Git to use your GitHub-provided noreply email address, and block command line pushes that expose your personal email address. For more information on commit email addresses, including your GitHub-provided noreply email address, see "About commit email addresses." In the upper-right corner of any page, click your profile photo, then click Settings. In the left sidebar, click Emails. In "Add email address", type your email address and click Add. Verify your email address. In the "Primary email address" list, select the email address you'd like to associate with your web-based Git operations. To keep your email address private when performing web-based Git operations, click Keep my email address private. Further reading "About commit email addresses" "Setting your commit email address in Git" "Blocking command line pushes that expose your personal email" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Setting your commit email address in Git - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setup / Setting your commit email address in Git Setting your commit email address in Git mac windows linux all GitHub uses the email address set in your local Git configuration to associate commits pushed from the command line with your GitHub account. You can use the git config command to change the email address you associate with your Git commits. The new email address you set will be visible in any future commits you push to GitHub from the command line. Any commits you made prior to changing your commit email address are still associated with your previous email address. For more information on commit email addresses, including your GitHub-provided noreply email address, see "About commit email addresses." Setting your email address for every repository on your computer Open TerminalTerminalGit Bash. Set an email address in Git. You can use your GitHub-provided no-reply email address or any email address. $ git config --global user.email "email@example.com" Confirm that you have set the email address correctly in Git: $ git config --global user.email email@example.com Add the email address to your GitHub account by setting your commit email address on GitHub, so that your commits are attributed to you and appear in your contributions graph. Setting your email address for a single repository You can change the email address associated with commits you make in a single repository. This will override your global Git config settings in this one repository, but will not affect any other repositories. Open TerminalTerminalGit Bash. Change the current working directory to the local repository where you want to configure the email address that you associate with your Git commits. Set an email address in Git. You can use your GitHub-provided no-reply email address or any email address. $ git config user.email "email@example.com" Confirm that you have set the email address correctly in Git: $ git config user.email email@example.com Add the email address to your GitHub account by setting your commit email address on GitHub, so that your commits are attributed to you and appear in your contributions graph. Further reading "About commit email addresses" "Setting your commit email address on GitHub" "Git Configuration" from the Pro Git book Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Blocking command line pushes that expose your personal email address - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setup / Blocking command line pushes that expose your personal email address Blocking command line pushes that expose your personal email address mac windows linux all If you've chosen to keep your email address private when performing web-based operations, you can also choose to block command line pushes that may expose your personal email address. When you push commits from the command line, the email address that you've set in Git is associated with your commits. This setting blocks you from pushing commits on the command line that use your personal email address. For more information on commit email addresses, including your GitHub-provided noreply email address, see "About commit email addresses." In the upper-right corner of any page, click your profile photo, then click Settings. In the left sidebar, click Emails. To keep your email address private when performing web-based Git operations, click Keep my email address private. To keep your email address private in commits you push from the command line, select Block command line pushes that expose my email. Further reading "About commit email addresses" "Setting your commit email address on GitHub" "Setting your commit email address in Git" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Setting your username in Git - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setup / Setting your username in Git Setting your username in Git mac windows linux all Git uses a username to associate commits with an identity. The Git username is not the same as your GitHub username. You can change the name that is associated with your Git commits using the git config command. The new name you set will be visible in any future commits you push to GitHub from the command line. If you'd like to keep your real name private, you can use any text as your Git username. Changing the name associated with your Git commits using git config will only affect future commits and will not change the name used for past commits. Setting your Git username for every repository on your computer Open TerminalTerminalGit Bash. Set a Git username: $ git config --global user.name "Mona Lisa" Confirm that you have set the Git username correctly: $ git config --global user.name > Mona Lisa Setting your Git username for a single repository Open TerminalTerminalGit Bash. Change the current working directory to the local repository where you want to configure the name that is associated with your Git commits. Set a Git username: $ git config user.name "Mona Lisa" Confirm that you have set the Git username correctly: $ git config user.name > Mona Lisa Further reading "Setting your commit email address in Git" "Git Configuration" from the Pro Git book Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Dealing with line endings - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setup / Dealing with line endings Dealing with line endings mac windows linux all If you're using Git to collaborate with others on GitHub, ensure that Git is properly configured to handle line endings. Every time you press return on your keyboard you're actually inserting an invisible character called a line ending. Historically, different operating systems have handled line endings differently. When you view changes in a file, Git handles line endings in its own way. Since you're collaborating on projects with Git and GitHub, Git might produce unexpected results if, for example, you're working on a Windows machine, and your collaborator has made a change in OS X. Global settings for line endings The git config core.autocrlf command is used to change how Git handles line endings. It takes a single argument. On OS X, you simply pass input to the configuration. For example: git config --global core.autocrlf input # Configure Git on OS X to properly handle line endings On Windows, you simply pass true to the configuration. For example: git config --global core.autocrlf true # Configure Git on Windows to properly handle line endings On Linux, you simply pass input to the configuration. For example: git config --global core.autocrlf input # Configure Git on Linux to properly handle line endings On OS X and Linux, you usually want to pass input for this setting. On Windows, you usually want to use true. For example: git config --global core.autocrlf input # Configure Git on OS X or Linux to properly handle line endings git config --global core.autocrlf true # Configure Git on Windows to properly handle line endings Per-repository settings Optionally, you can configure the way Git manages line endings on a per-repository basis by configuring a special .gitattributes file. This file is committed into the repository and overrides an individual's core.autocrlf setting, ensuring consistent behavior for all users, regardless of their Git settings. The advantage of a .gitattributes file is that your line configurations are associated with your repository. You don't need to worry about whether or not collaborators have the same line ending settings that you do. The .gitattributes file must be created in the root of the repository and committed like any other file. A .gitattributes file looks like a table with two columns: On the left is the file name for Git to match. On the right is the line ending configuration that Git should use for those files. Example Here's an example .gitattributes file. You can use it as a template for your repositories: # Set the default behavior, in case people don't have core.autocrlf set. * text=auto # Explicitly declare text files you want to always be normalized and converted # to native line endings on checkout. *.c text *.h text # Declare files that will always have CRLF line endings on checkout. *.sln text eol=crlf # Denote all files that are truly binary and should not be modified. *.png binary *.jpg binary You'll notice that files are matched--*.c, *.sln, *.png--, separated by a space, then given a setting--text, text eol=crlf, binary. We'll go over some possible settings below. text=auto Git will handle the files in whatever way it thinks is best. This is a good default option. text eol=crlf Git will always convert line endings to CRLF on checkout. You should use this for files that must keep CRLF endings, even on OSX or Linux. text eol=lf Git will always convert line endings to LF on checkout. You should use this for files that must keep LF endings, even on Windows. binary Git will understand that the files specified are not text, and it should not try to change them. The binary setting is also an alias for -text -diff. Refreshing a repository after changing line endings After you've set the core.autocrlf option and committed a .gitattributes file, you may find that Git wants to commit files that you have not modified. At this point, Git is eager to change the line endings of every file for you. The best way to automatically configure your repository's line endings is to first backup your files with Git, delete every file in your repository (except the .git directory), and then restore the files all at once. Save your current files in Git, so that none of your work is lost. git add . -u git commit -m "Saving files before refreshing line endings" Remove the index and force Git to rescan the working directory. rm .git/index Rewrite the Git index to pick up all the new line endings. git reset Show the rewritten, normalized files. git status Add all your changed files back, and prepare them for a commit. This is your chance to inspect which files, if any, were unchanged. git add -u # It is perfectly safe to see a lot of messages here that read # "warning: CRLF will be replaced by LF in file." Rewrite the .gitattributes file. git add .gitattributes Commit the changes to your repository. git commit -m "Normalize all the line endings" Further reading "Customizing Git - Git Attributes" from the Pro Git book "git-config(1) Manual Page" "Getting Started - First-Time Git Setup" from the Pro Git book "Mind the End of Your Line" - The full story of line endings in Git by Tim Clem Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Supported browsers - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setup / Supported browsers Supported browsers mac windows linux all We design GitHub to support the latest web browsers. We support the current versions of Chrome, Firefox, Safari, Microsoft Edge and Internet Explorer 11. Firefox Extended Support Release We do our best to support Firefox's latest Extended Support Release (ESR). Older versions of Firefox may disable some features on GitHub and require the latest version of Firefox. Internet Explorer on Windows XP Because Windows XP is not supported, you see an error message when you try to load GitHub in Internet Explorer. For more information, see "Improving GitHub's SSL setup." Internet Explorer Outdated Browser Error We only support IE running in "Standards Mode." If you see an error message about your outdated browser, turn off "Compatibility View." Beta and developer builds You may encounter unexpected bugs in beta and developer builds of our supported browsers. If you encounter a bug on GitHub in one of these unreleased builds, please verify that it also exists in the stable version of the same browser. If the bug only exists in the unstable version, consider reporting the bug to the browser developer. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support GitHub Glossary - User Documentation <meta name="Description" content=" Below are a list of some Git and GitHub specific terms we use across our sites and documentation. Blame The \"blame\" feature in Git describes the last modification to each line of a file, which gen…"> GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub About GitHub / GitHub Glossary GitHub Glossary mac windows linux all Below are a list of some Git and GitHub specific terms we use across our sites and documentation. Blame The "blame" feature in Git describes the last modification to each line of a file, which generally displays the revision, author and time. This is helpful, for example, in tracking down when a feature was added, or which commit led to a particular bug. Branch A branch is a parallel version of a repository. It is contained within the repository, but does not affect the primary or master branch allowing you to work freely without disrupting the "live" version. When you've made the changes you want to make, you can merge your branch back into the master branch to publish your changes. Clone A clone is a copy of a repository that lives on your computer instead of on a website's server somewhere, or the act of making that copy. With your clone you can edit the files in your preferred editor and use Git to keep track of your changes without having to be online. It is, however, connected to the remote version so that changes can be synced between the two. You can push your local changes to the remote to keep them synced when you're online. Collaborator A collaborator is a person with read and write access to a repository who has been invited to contribute by the repository owner. Commit A commit, or "revision", is an individual change to a file (or set of files). It's like when you save a file, except with Git, every time you save it creates a unique ID (a.k.a. the "SHA" or "hash") that allows you to keep record of what changes were made when and by who. Commits usually contain a commit message which is a brief description of what changes were made. Contributor A contributor is someone who has contributed to a project by having a pull request merged but does not have collaborator access. Diff A diff is the difference in changes between two commits, or saved changes. The diff will visually describe what was added or removed from a file since its last commit. Fetch Fetching refers to getting the latest changes from an online repository without merging them in. Once these changes are fetched you can compare them to your local branches (the code residing on your local machine). Fork A fork is a personal copy of another user's repository that lives on your account. Forks allow you to freely make changes to a project without affecting the original. Forks remain attached to the original, allowing you to submit a pull request to the original's author to update with your changes. You can also keep your fork up to date by pulling in updates from the original. Git Git is an open source program for tracking changes in text files. It was written by the author of the Linux operating system, and is the core technology that GitHub, the social and user interface, is built on top of. Issue Issues are suggested improvements, tasks or questions related to the repository. Issues can be created by anyone (for public repositories), and are moderated by repository collaborators. Each issue contains its own discussion forum, can be labeled and assigned to a user. Markdown Markdown is a simple semantic file format, not too dissimilar from .doc, .rtf and .txt. Markdown makes it easy for even those without a web-publishing background to write prose (including with links, lists, bullets, etc.) and have it displayed like a website. GitHub supports Markdown, and you can learn about the semantics. Merge Merging takes the changes from one branch (in the same repository or from a fork), and applies them into another. This often happens as a pull request (which can be thought of as a request to merge), or via the command line. A merge can be done automatically via a pull request via the GitHub web interface if there are no conflicting changes, or can always be done via the command line. For more information, see "Merging a pull request." Open source Open source software is software that can be freely used, modified, and shared (in both modified and unmodified form) by anyone. Today the concept of "open source" is often extended beyond software, to represent a philosophy of collaboration in which working materials are made available online for anyone to fork, modify, discuss, and contribute to. For more information on open source, specifically how to create and grow an open source project, we've created Open Source Guides that will help you foster a healthy open source community. Organizations Organizations are shared accounts where businesses and open-source projects can collaborate across many projects at once. Owners and administrators can manage member access to the organization's data and projects with sophisticated security and administrative features. Private repository Private repositories are repositories that can only be viewed or contributed to by their creator and collaborators the creator specified. Pull Pull refers to when you are fetching in changes and merging them. For instance, if someone has edited the remote file you're both working on, you'll want to pull in those changes to your local copy so that it's up to date. Pull request Pull requests are proposed changes to a repository submitted by a user and accepted or rejected by a repository's collaborators. Like issues, pull requests each have their own discussion forum. For more information, see "About pull requests." Push Pushing refers to sending your committed changes to a remote repository, such as a repository hosted on GitHub. For instance, if you change something locally, you'd want to then push those changes so that others may access them. Remote This is the version of something that is hosted on a server, most likely GitHub. It can be connected to local clones so that changes can be synced. Repository A repository is the most basic element of GitHub. They're easiest to imagine as a project's folder. A repository contains all of the project files (including documentation), and stores each file's revision history. Repositories can have multiple collaborators and can be either public or private. SSH key SSH keys are a way to identify yourself to an online server, using an encrypted message. It's as if your computer has its own unique password to another service. GitHub uses SSH keys to securely transfer information to your computer. Team Teams are groups of organization members that reflect your company or group's structure with cascading access permissions and mentions. Upstream When talking about a branch or a fork, the primary branch on the original repository is often referred to as the "upstream", since that is the main place that other changes will come in from. The branch/fork you are working on is then called the "downstream". User Users are personal GitHub accounts. Each user has a personal profile, and can own multiple repositories, public or private. They can create or be invited to join organizations or collaborate on another user's repository. Further reading The Official Git Glossary Git Reference Git SCM Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Git and GitHub learning resources - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub About GitHub / Git and GitHub learning resources Git and GitHub learning resources mac windows linux all There are a lot of helpful Git and GitHub resources on the web. This is a short list of our favorites! Using Git Familiarize yourself with Git by visiting the official Git project site and reading the ProGit ebook. You can review the Git command list or Git command lookup reference while using the Try Git simulator. Using GitHub Become better acquainted with GitHub through our bootcamp articles. See our GitHub flow for a process introduction. Refer to our overview guides to walk through basic concepts. You can connect with developers around the world in the GitHub Community Forum to ask and answer questions, learn, and interact directly with GitHub staff. Branches, forks, and pull requests Learn about Git branching using an interactive tool. Read about forks and pull requests as well as how we use pull requests at GitHub. Access quick references about the command line as well as GitHub checklists, cheat sheets, and more. Tune in Our GitHub YouTube Training and Guides channel offers tutorials about pull requests, forking, rebase, and reset functions. Each topic is covered in 5 minutes or less. Windows users can view a special 10-minute GitHub for Windows tutorial presented by GitHub and Microsoft. Training Free classes GitHub offers a series of interactive, on-demand training courses including GitHub 101: Introduction, GitHub 102: GitHub Desktop, and GitHub 103: Command Line. GitHub's web-based educational programs GitHub offers live trainings with a hands-on, project-based approach for those who love the command line and those who don't. Training for your company GitHub offers in-person classes taught by our highly-experienced educators. Contact us to ask your training-related questions. Extras An interactive online Git course from Code School has seven levels with dozens of exercises in a fun game format. Feel free to adapt our .gitignore templates to meet your needs. Extend your GitHub reach through integrations, or by installing GitHub Desktop and the robust Atom text editor. Learn how to launch and grow your open source project with the Open Source Guides. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Differences between user and organization accounts - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub About GitHub / Differences between user and organization accounts Differences between user and organization accounts mac windows linux all Your user account is your identity on GitHub. Your user account can be a member of any number of organizations, regardless of whether the account is on a free or paid plan. Personal user accounts Every person who uses GitHub has their own user account. These accounts include: Unlimited public repositories and collaborators for free Paid plan with unlimited private repositories Ability to invite unlimited repository collaborators Tips: It may be tempting to have more than one user account, such as for personal use and business use, but you only need one account. For more information, see "Merging multiple user accounts." User accounts are intended for humans, but you can give one to a robot, such as a continuous integration bot, if necessary. Organizations Organizations are shared accounts where groups of people can collaborate across many projects at once. Owners and administrators can manage member access to the organization's data and projects with sophisticated security and administrative features. Organizations include: A free plan with unlimited collaborators on unlimited public repositories The option to upgrade to paid plans with unlimited private repositories, sophisticated user authentication and management, 24/5 support, and a service level agreement for uptime availability Unlimited membership with a variety of roles that grant different levels of access to the organization and its data The ability to give members a range of access permissions to your organization's repositories Nested teams that reflect your company or group's structure with cascading access permissions and mentions The ability for organization owners to view members' two-factor authentication (2FA) status The option to require all organization members to use two-factor authentication Further reading "Signing up for a new GitHub account" "GitHub's billing plans" "Creating a new organization account" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Access permissions on GitHub - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub About GitHub / Access permissions on GitHub Access permissions on GitHub mac windows linux all While you can grant read/write access to collaborators on a personal repository, members of an organization can have more granular access permissions for the organization's repositories. User accounts A repository owned by a user account has two permission levels: the repository owner and collaborators. For more information, see "Permission levels for a user account repository." Organization accounts Organization members can have owner, billing manager, or member roles. Owners have complete administrative access to your organization, while billing managers can manage billing settings. Member is the default role for everyone else. You can manage access permissions for multiple members at a time with teams. For more information, see: "Permission levels for an organization" "Repository permission levels for an organization" "About teams" Further reading "Differences between user and organization accounts" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support GitHub's billing plans - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub About GitHub / GitHub's billing plans GitHub's billing plans mac windows linux all GitHub provides free plans for open-source projects and paid plans offering unlimited private repositories. Organizations also can choose a paid plan with sophisticated security and administrative features. In addition to paid plans for your GitHub account, you can purchase other features products with your existing GitHub payment information. Plans for your GitHub account and organization Every user account and organization on GitHub can have unlimited collaborators on any number of public repositories. User and organization accounts with paid billing plans can also use unlimited private repositories. Anyone can view public repositories, while private repositories have their visibility limited to just you and your collaborators. Organizations can also choose to upgrade to the Business plan for sophisticated user and identity management features and a service level agreement for uptime availability. For more information, see "Organization billing plans." You can see all of our plans and pricing for users and organization accounts at https://github.com/pricing. You can upgrade or downgrade your billing plan at any time. Tip: Unlimited private repositories are free for verified students, teachers, and academic researchers. For more information, see our education page. If you're interested in running a GitHub instance inside your private network, we also provide GitHub Enterprise as an on-premises solution. Other paid features and products You can use your existing payment information to pay for other features and products available on GitHub. Git Large File Storage All personal and organization accounts using Git LFS receive 1 GB of free storage and 1 GB a month of free bandwidth. If the bandwidth and storage quotas are not enough, you can choose to purchase an additional quota for Git LFS. For more information, see "About storage and bandwidth usage." GitHub Marketplace GitHub Marketplace includes apps with free and paid pricing plans. For more information, see "About billing for GitHub Marketplace." Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support How does upgrading or downgrading affect the billing process? - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub About GitHub / How does upgrading or downgrading affect the billing process? How does upgrading or downgrading affect the billing process? mac windows linux all When you upgrade the billing plan for your personal account or organization, changes are applied immediately. When you downgrade your billing plan, changes are applied at the end of your current billing cycle. Changes to the billing plan for your personal account or organization do not affect billing plans or payments for other paid features such as large file storage or paid apps purchased in GitHub Marketplace. For more information, see "GitHub's billing plans." Example of canceling a paid plan for a personal account or organization Kumiko pays for the monthly paid plan on the 5th of every month. If Kumiko downgrades from the paid plan to the free plan on October 10th, she'll remain on the paid plan until the end of her current billing cycle on November 4th. On November 5th, her account will move to the free plan. Example of changing from a yearly plan to a monthly plan for a personal account or organization Ravi pays for the yearly paid plan on October 5th every year. If Ravi switches from a yearly plan to a monthly plan on December 10th, his account remains on the yearly plan until the end of its current billing cycle on October 4th the next year. On October 5th of the next year, Ravi will be charged for a month of service. His next billing date will be November 5th. Example of adding paid seats to your organization Mada's organization pays for 25 seats on the 15th of every month. If Mada adds ten paid seats on June 4th, her organization is immediately charged a prorated amount for ten additional seats for the time between June 4th and June 14th, and the seats are available to use immediately. On June 15th, Mada's organization will pay for 35 seats. Example of removing paid seats from your organization Stefan's organization pays for 50 seats every year on May 20th. If Stefan removes 20 seats and downgrades to a new total of 30 paid seats on September 30, his organization can still access its 50 paid seats until the end of its current billing cycle on May 19th. On May 20th, the downgrade will take effect - Stefan's organization will pay for 30 seats and will have access to 30 paid seats. Further reading "Upgrading your personal account's billing plan" "Downgrading your personal account's billing plan" "Managing your personal account's apps" "Managing large file storage and bandwidth for your personal account" "Upgrading your organization's billing plan" "Managing your organization's paid seats" "Downgrading your organization's billing plan" "Managing your organization's apps" "Managing large file storage and bandwidth for your organization" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Finding open source projects on GitHub - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Exploring projects on GitHub / Finding open source projects on GitHub Finding open source projects on GitHub mac windows linux all You can find new and interesting open source projects to work on by browsing Explore, looking through recommended projects, connecting with the GitHub community, and searching repositories by topics or labels. Discovering the GitHub community Use Explore to browse collections of curated content related to a particular field, find curated topic pages, and stay up-to-date with currently trending repositories. You can also sign up for the Explore newsletter to receive emails about recently trending repositories. You can connect with developers around the world in the GitHub Community Forum to ask and answer questions, learn, and interact directly with GitHub staff. Discovering relevant projects You can find projects to contribute to by connecting with people on GitHub. Keep up with recent activity on repositories you watch and recent activity of people you follow in the activity view of your news feed. Use the discovery view of your news feed to find repositories similar to the repositories you or people you follow have starred. You can click Star to keep track of repositories you find interesting. You can also click Dismiss if you no longer want to see a recommendation. Searching repositories using topics If you find a repository that's classified with a topic you're interested in, you can click the topic to see related topics and find more repositories with that topic. For more information, see "About topics." You can also search for a popular topic. For more information, see "Searching repositories." Searching using labels You can search for labels on issues and pull requests to find projects that are actively seeking contributors. For example, if you are a first time contributor, search for issues with the good first issue label to find projects to start on. You can also search issues and pull requests with the help wanted label to find projects that are actively seeking contributions. For more information on GitHub-provided labels, see "About labels." For more information on how to search for labels, see "Searching issues and pull requests." Further reading "About topics" "Classifying your repository with topics" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support About topics - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Exploring projects on GitHub / About topics About topics mac windows linux all With topics, you can explore repositories in a particular subject area, find projects to contribute to, and discover new solutions to a specific problem. Topics appear on the main page of a repository. You can click a topic name to see related topics and a list of other repositories classified with that topic. You can contribute to GitHub's set of featured topics in the github/explore repository. Repository admins can add any topics they'd like to a repository. Helpful topics to classify a repository include the repository's intended purpose, subject area, community, or language. Additionally, GitHub analyzes public repository content and generates suggested topics that repository admins can accept or reject. Private repository content is not analyzed and does not receive topic suggestions. Public and private repositories can have topics, although you will only see private repositories that you have access to in topic search results. You can search for repositories that are associated with a particular topic. For more information, see "Searching repositories." Further reading "Classifying your repository with topics" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Classifying your repository with topics - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Exploring projects on GitHub / Classifying your repository with topics Classifying your repository with topics mac windows linux all To help other people find and contribute to your project, you can add topics to your repository related to your project's intended purpose, subject area, affinity groups, or other important qualities. On GitHub, navigate to the main page of the repository. Under your repository description, click Add topics. Type the topic you want to add to your repository, then type a space. After you've finished adding topics, click Done. Further reading "About topics" "Searching repositories" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support About stars - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Exploring projects on GitHub / About stars About stars mac windows linux all You can star repositories to keep track of projects you find interesting and discover similar projects in your news feed. Starring a repository makes it easy to find again later. You can see all the repositories you have starred by going to your stars page. For more information on interacting with your starred repositories, see "Managing your stars." You can star repositories to discover similar projects on GitHub. When you star repositories, GitHub may recommend similar projects in the discovery view of your news feed. For more information, see "Finding open source projects on GitHub." Starring a repository also shows appreciation to the repository maintainer for their work. Many of GitHub's repository rankings depend on the number of stars a repository has. For example, repositories can be sorted and searched based on their star count. For more information, see "Searching repositories." In addition, Explore shows popular repositories based on the number of stars they have. Further reading "Managing your stars" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Managing your stars - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Exploring projects on GitHub / Managing your stars Managing your stars mac windows linux all You can manage your starred repositories to find what you're looking for. Your stars page provides a multitude of actions you can take to sort, manage, and list your stars. Note: You can access your stars page from your profile page. Searching starred repositories You can use the search bar to quickly find repositories you've starred. The search bar only searches based on the name of a repository, and not on any other qualifiers (such as the size of the repository or when it was last updated). Sorting starred repositories In the upper-right corner of your stars page, you can sort your stars in three different ways: Recently starred This orders by your most recently starred repositories. Recently active This orders by your starred repositories by when they were last updated. Most stars This orders the repositories you follow with the most overall stars. Filtering starred repositories On the right side of the page, you can filter your list of starred repositories based on their language. Browsing your friends' stars In the lower-right corner of the page, you can also browse your friends' starred repositories. You can use this to check out what your peers are following and find some cool new repositories to star. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Following people - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Exploring projects on GitHub / Following people Following people mac windows linux all You can follow people on GitHub to receive notifications about their activity and discover projects in their communities. When you follow people, you'll see their public activity in the activity view of your news feed. If someone you follow stars a public repository, GitHub may recommend the repository to you in the discovery view of your news feed. To follow someone, visit their profile page and click Follow under their profile image. To stop following someone, visit their profile page and click Unfollow under their profile image. Further reading "About stars" "Finding open source projects on GitHub" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support About GitHub mirrors - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Exploring projects on GitHub / About GitHub mirrors About GitHub mirrors mac windows linux all Some open-source projects provide mirrors on GitHub.com in addition to their official repositories, which are hosted elsewhere. Here are a few prominent repositories that are mirrored on GitHub.com: android The Apache Software Foundation The Chromium Project The Eclipse Foundation The FreeBSD Project The Glasgow Haskell Compiler GNOME The Linux kernel source tree Qt To set up your own mirror, you can configure a post-receive hook on your official project repository to automatically push commits to a mirror repository on GitHub.com (or GitHub Enterprise). You can search repositories based on whether they're a mirror. To learn more, see "Searching repositories." Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Git cheatsheet - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Using Git / Git cheatsheet Git cheatsheet mac windows linux all Learning all available Git commands at once can be a daunting task. Keep one of our Git Cheat Sheets nearby for reference. The Using Git Cheat Sheet is available in several languages. For more information, see the resources page on the GitHub Services website. In addition, take a look at our Git and GitHub learning resources page that links to guides, videos and more. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Ignoring files - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Using Git / Ignoring files Ignoring files mac windows linux all From time to time, there are files you don't want Git to check in to GitHub. There are a few ways to tell Git which files to ignore. Create a local .gitignore If you create a file in your repository named .gitignore, Git uses it to determine which files and directories to ignore, before you make a commit. A .gitignore file should be committed into your repository, in order to share the ignore rules with any other users that clone the repository. GitHub maintains an official list of recommended .gitignore files for many popular operating systems, environments, and languages in the github/gitignore public repository. In Terminal, navigate to the location of your Git repository. Enter touch .gitignore to create a .gitignore file. The Octocat has a Gist containing some good rules to add to this file. If you already have a file checked in, and you want to ignore it, Git will not ignore the file if you add a rule later. In those cases, you must untrack the file first, by running the following command in your terminal: git rm --cached FILENAME Create a global .gitignore You can also create a global .gitignore file, which is a list of rules for ignoring files in every Git repository on your computer. For example, you might create the file at ~/.gitignore_global and add some rules to it. Open Terminal. Run the following command in your terminal: git config --global core.excludesfile ~/.gitignore_global The Octocat has a Gist containing some good rules to add to this file. Explicit repository excludes If you don't want to create a .gitignore file to share with others, you can create rules that are not committed with the repository. You can use this technique for locally-generated files that you don't expect other users to generate, such as files created by your editor. Use your favorite text editor to open the file called .git/info/exclude within the root of your Git repository. Any rule you add here will not be checked in, and will only ignore files for your local repository. In Terminal, navigate to the location of your Git repository. Using your favorite text editor, open the file .git/info/exclude. Further Reading .gitignore manual Pro Git Example .gitignore files Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Associating text editors with Git - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Using Git / Associating text editors with Git Associating text editors with Git mac windows linux all Use a text editor to open and edit your files with Git. Using Atom as your editor You can set your default editor in Git to use Atom if you have installed the editor. Install Atom. Open TerminalTerminalGit Bash. Type this command: git config --global core.editor "atom --wait" Using Sublime Text as your editor You can set your default editor in Git to use Sublime Text 3. Install Sublime Text 3. Open TerminalTerminalGit Bash. Type this command: git config --global core.editor "subl -n -w" Using TextMate as your editor You can set your default editor in Git to use Textmate if you have installed the mate command. Install mate Open TerminalTerminalGit Bash. Type this command: git config --global core.editor "mate -w" Using Atom as your editor You can set your default editor in Git to use Atom if you have installed the editor. Install Atom. Open TerminalTerminalGit Bash. Type this command: git config --global core.editor "C:/Users/USERNAME/AppData/Local/atom/bin/atom.cmd" Using Sublime Text as your editor You can set your default editor in Git to use Sublime Text 3. Install Sublime Text 3. Open TerminalTerminalGit Bash. Type this command: git config --global core.editor "'c:/program files/sublime text 3/subl.exe' -w" Using Notepad++ as your editor You can set your default editor in Git to use Notepad++ if you have installed the editor. Install Notepad++. Open TerminalTerminalGit Bash. Type this command: git config --global core.editor "'C:/Program Files (x86)/Notepad++/notepad++.exe' -multiInst -notabbar -nosession -noPlugin" Using Atom as your editor You can set your default editor in Git to use Atom if you have installed the editor. Install Atom. Open TerminalTerminalGit Bash. Type this command: git config --global core.editor "atom --wait" Using Sublime Text as your editor You can set your default editor in Git to use Sublime Text 3. 1. Install Sublime Text 3. Open TerminalTerminalGit Bash. Type this command: git config --global core.editor "subl -n -w" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support What is a good Git workflow? - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Using Git / What is a good Git workflow? What is a good Git workflow? mac windows linux all We have a visual tutorial on the GitHub Workflow. It's a great way to learn about and understand our concept of good Git workflows. If you're the reading type, you can also read Scott Chacon's great article on the GitHub flow. Finally, if you're the sort of person who likes the web interface, we have a fantastic article on the GitHub flow in the browser. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Managing user account settings - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing your GitHub user account / Managing user account settings Managing user account settings mac windows linux all You can change several settings for your personal account, including changing your username and deleting your account. Changing your GitHub username You can change your GitHub username at any time. Merging multiple user accounts If you have separate accounts for work and personal use, you can merge the accounts. Deleting your user account You can delete your GitHub user account at any time. Before you do so, you should hand over the reins of any organizations you might own. Permission levels for a user account repository A repository owned by a user account has two permission levels: the repository owner and collaborators. What happens when I change my username? When you change your GitHub username, most references to your repositories under the old username automatically change to the new username. However, some links to your profile won't automatically redirect. Commits made with your username@users.noreply.github.com email address will no longer be associated with your account. Commits made using your ID+username@users.noreply.github.com email address will continue to be associated with your account. Best practices for leaving your company Changing jobs is a fact of life. If you use your GitHub user account for both personal and work purposes, there are a few things to keep in mind when you leave your company or organization. What does the 'Available for hire' checkbox do? Use the Available for hire checkbox to view GitHub Jobs posts within GitHub. Converting a user into an organization You can convert your user account into an organization. This allows more granular permissions for repositories that belong to the organization. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Changing your GitHub username - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing your GitHub user account / Changing your GitHub username Changing your GitHub username mac windows linux all You can change your GitHub username at any time. After you've renamed your user account, update the remote repository URL in any local clones of your repositories. For more information, see "What happens when I change my username?" In the upper-right corner of any page, click your profile photo, then click Settings. In the left sidebar, click Account settings. In the "Change username" section, click Change username. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Merging multiple user accounts - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing your GitHub user account / Merging multiple user accounts Merging multiple user accounts mac windows linux all If you have separate accounts for work and personal use, you can merge the accounts. Tip: We recommend using only one user account to manage both personal and professional repositories. Transfer any repositories from the account you want to delete to the account you want to keep. Issues, pull requests, and wikis are transferred as well. Verify the repositories exist on the account you want to keep. Update the remote URLs in any local clones of the repositories that were moved. Delete the account you no longer want to use. Further reading "Differences between user and organization accounts" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Deleting your user account - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing your GitHub user account / Deleting your user account Deleting your user account mac windows linux all You can delete your GitHub user account at any time. Before you do so, you should hand over the reins of any organizations you might own. Deleting your user account removes all repositories, forks of private repositories, wikis, issues, pull requests, and pages owned by your account. Issues and pull requests you've created and comments you've made in repositories owned by other users will not be deleted - instead, they'll be associated with our Ghost user. The account name also becomes available to anyone else to use on a new account, and we stop billing you. The email address associated with the account becomes available for use with a different GitHub account. If you’re an organization owner and you want to delete your user account, you must transfer ownership to another person or delete your organizations before you can delete your user account. Tip: If you no longer want to pay for private repositories, you can downgrade to free instead of deleting your user account and its content. Back up your account data Before you delete your user account, make a copy of all repositories, private forks, wikis, issues, and pull requests owned by your account. Warning: Once your user account has been deleted, GitHub cannot restore your content. Delete your user account In the upper-right corner of any page, click your profile photo, then click Settings. In the left sidebar, click Account settings. At the bottom of the Account Settings page, under "Delete account", click Delete your account. In the "Make sure you want to do this" dialog box, complete the steps to confirm you understand what happens when your account is deleted: Recall that all repositories, forks of private repositories, wikis, issues, pull requests and pages owned by your account will be deleted, your billing will end, and your username will be available to anyone for use on GitHub. In the first field, type your GitHub username or email. In the second field, type the phrase from the prompt. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Permission levels for a user account repository - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing your GitHub user account / Permission levels for a user account repository Permission levels for a user account repository mac windows linux all A repository owned by a user account has two permission levels: the repository owner and collaborators. Tip: If you require more granular read/write access to a repository owned by your user account, consider transferring the repository to an organization. For more information, see "About repository transfers." Owner access on a repository owned by a user account The repository owner has full control of the repository. In addition to all the permissions allowed by repository collaborators, the repository owner can: Invite collaborators Change the visibility of the repository (from public to private, or from private to public) Limit interactions with a repository Merge a pull request on a protected branch, even if there are no approved reviews Delete the repository Manage a repository's topics Enable the dependency graph for a private repository Receive security alerts for vulnerable dependencies in a repository Opt into data use for a private repository Define code owners for the repository Archive repositories There is only one owner of a repository owned by a user account; this permission cannot be shared with another user account. To transfer ownership of a repository to another user, see "How to transfer a repository." Collaborator access on a repository owned by a user account Note: In a private repository, repository owners can only grant write access to collaborators. Collaborators can't have read-only access to repositories owned by a user account. Collaborators on a personal repository can: Push to (write), pull from (read), and fork (copy) the repository Create, apply, and delete labels and milestones Open, close, re-open, and assign issues Edit and delete comments on commits, pull requests, and issues Mark an issue or pull request as a duplicate. For more information, see "About duplicate issues and pull requests." Merge and close pull requests Send pull requests from forks of the repository Create and edit Wikis Create and edit Releases Remove themselves as collaborators on the repository Submit a review on a pull request that will affect its mergeability Act as a designated code owner for the repository. For more information, see "About CODEOWNERS." Lock a conversation. For more information, see "Locking conversations." Further reading "Inviting collaborators to a personal repository" "Repository permission levels for an organization" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support What happens when I change my username? - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing your GitHub user account / What happens when I change my username? What happens when I change my username? mac windows linux all When you change your GitHub username, most references to your repositories under the old username automatically change to the new username. However, some links to your profile won't automatically redirect. Commits made with your username@users.noreply.github.com email address will no longer be associated with your account. Commits made using your ID+username@users.noreply.github.com email address will continue to be associated with your account. Repository references After you change your username, GitHub will automatically redirect references to your repositories. Web links to your existing repositories will continue to work. This can take a few minutes to complete after you make the change. Command line pushes from your local repository clones to the old remote tracking URLs will continue to work. After changing your username, your old username becomes available for anyone else to claim. If the new owner of your old username creates a repository with the same name as your repository, that will override the redirect entry and your redirect will stop working. Because of this possibility, we recommend you update all existing remote repository URLs after changing your username. GitHub cannot set up redirects for: @mentions using your old username Links to Gists with your old username Links to your previous profile page After changing your username, links to your previous profile page, such as https://github.com/previoususername, will return a 404 error. We recommend updating any links to your GitHub account from elsewhere, such as your LinkedIn or Twitter profile. Your Git commits Git commits that were associated with your GitHub-provided noreply email address won't be attributed to your new username and won't appear in your contributions graph. If your Git commits are associated with another email address you've added to your GitHub account, including the ID-based GitHub-provided noreply email address, they'll continue to be attributed to you and appear in your contributions graph after you've changed your username. For more information on setting your email address, see "Setting your commit email address on GitHub." Further reading "Changing a remote's URL" "Why are my commits linked to the wrong user?" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Best practices for leaving your company - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing your GitHub user account / Best practices for leaving your company Best practices for leaving your company mac windows linux all Changing jobs is a fact of life. If you use your GitHub user account for both personal and work purposes, there are a few things to keep in mind when you leave your company or organization. Before you leave your company, make sure you update the following information in your user account: Unverify your company email address by deleting it in your Email settings. You can then re-add it without verifying to keep any associated commits linked to your account. Change your primary email address from your company email to your personal email. Verify your new primary email address. Change your GitHub username to remove any references to your company or organization, if necessary. Leaving organizations If you've been working with repositories that belong to an organization, you'll want to remove yourself as a member of the organization. Note that if you are the organization owner, you should first transfer ownership of the organization to another person. Removing professional associations with personal repositories If you've been collaborating professionally with another person on repositories that belong to their personal user account, you'll want to remove yourself as a collaborator from those repositories. Stop watching repositories related to your work. You won't want those notifications anymore! Transfer repositories you own that others may need to continue working on after you leave. Delete forks that belong to you that are related to the work you were doing. Don't worry, deleting a fork doesn't delete the upstream repository. Delete local copies of your forks that may exist on your computer: rm -rf work_directory Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support What does the 'Available for hire' checkbox do? - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing your GitHub user account / What does the 'Available for hire' checkbox do? What does the 'Available for hire' checkbox do? mac windows linux all Use the Available for hire checkbox to view GitHub Jobs posts within GitHub. The GitHub Jobs board is a great way to find employment in tech. You can opt to see jobs posted there on your GitHub dashboard. In the upper-right corner of any page, click your profile photo, then click Settings. Under Jobs Profile, select Available for hire, then click Save jobs profile. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Converting a user into an organization - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing your GitHub user account / Converting a user into an organization Converting a user into an organization mac windows linux all You can convert your user account into an organization. This allows more granular permissions for repositories that belong to the organization. Warning: Before converting a user into an organization, keep these points in mind: You will no longer be able to sign into the converted user account. You will no longer be able to create or modify gists owned by the converted user account. An organization cannot be converted back to a user. The SSH keys, OAuth tokens, job profile, and associated user information, will not be transferred to the organization. This is only true for the user account that's being converted, not any of the user account's collaborators. Any commits made with the converted user account will no longer be linked to that account. The commits themselves will remain intact. Keep your personal user account and create a new organization manually If you want your organization to have the same name that you are currently using for your personal account, or if you want to keep your personal user account's information intact, then you must create a new organization and transfer your repositories to it instead of converting your user account into an organization. To retain your current user account name for your personal use, change the name of your personal user account to something new and wonderful. Create a new organization with the original name of your personal user account. Transfer your repositories to your new organization account. Convert your personal account into an organization automatically You can also convert your personal user account directly into an organization. Converting your account: Preserves the repositories as they are without the need to transfer them to another account manually Automatically invites collaborators to teams with permissions equivalent to what they had before For user accounts on the paid Developer plan, automatically transitions billing to the paid Team plan without the need to re-enter payment information, adjust your billing cycle, or double pay at any time Create a new personal account, which you'll use to sign into GitHub and access the organization and your repositories after you convert. Leave any organizations the user account you're converting has joined. In the upper-right corner of any page, click your profile photo, then click Settings. In your user settings sidebar, click Organizations. Under "Transform account", click Turn into an organization . In the Account Transformation Warning dialog box, review and confirm the conversion. Note that the information in this box is the same as the warning at the top of this article. On the "Transform your user into an organization" page, under "Choose an organization owner", choose either the secondary personal account you created in the previous section or another user you trust to manage the organization. Choose your new organization's pricing plan and enter your billing info if prompted. Click Create Organization. Sign in to the new user account you created in step one, then use the context switcher to access your new organization. Tip: When you convert a user account into an organization, we'll add collaborators on repositories that belong to the account to the new organization as outside collaborators. You can then invite outside collaborators to become members of your new organization if you wish. For more information, see "Repository permission levels for an organization." Further reading "Setting up teams" "Inviting users to join your organization" "Accessing an organization" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Integrating JIRA with your personal projects - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing your GitHub user account / Integrating JIRA with your personal projects Integrating JIRA with your personal projects mac windows linux all You can connect the JIRA DVCS plugin to your user account to scan commits and pull requests, creating relevant metadata and hyperlinks in any mentioned JIRA Issues. In the upper-right corner of any page, click your profile photo, then click Settings. In the left sidebar, click Developer settings. In the left sidebar, click OAuth Apps. Click Register a new application. Under Application name, type "JIRA". Under Homepage URL, type the full URL to your JIRA instance. Under Authorization callback URL, type the full URL to your JIRA instance. Click Register application. Under Developer applications, note the "Client ID" and "Client Secret" values. Link your GitHub account with JIRA. For more information, see Atlassian's help documentation. Further reading "Integrating JIRA with your organization's projects" GitHub Integrations • JIRA (YouTube) Connect JIRA Cloud to GitHub (Atlassian documentation) Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Managing email preferences - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing your GitHub user account / Managing email preferences Managing email preferences mac windows linux all You can add or change the email addresses associated with your GitHub account. You can also manage emails you receive from GitHub. Types of emails GitHub sends There are several types of emails you can receive from GitHub, including notifications, account information, and marketing communications. Adding an email address to your GitHub account GitHub allows you to add as many email addresses to your account as you like. If you set an email address in your local Git configuration, you will need to add it to your account settings in order to connect your commits to your account. For more information about your email address and commits, see "Setting your commit email address on GitHub." Changing your primary email address You can change the email address associated with your user account at any time. Managing marketing emails from GitHub In addition to notifications and account emails, GitHub occasionally sends marketing emails with news and information about our products. If you unsubscribe from existing marketing emails, you won't be included in future campaigns unless you change your GitHub email settings. Remembering your GitHub username or email Are you signing in to GitHub for the first time in a while? If so, welcome back! If you can't remember your GitHub user account name, you can try these methods for remembering it. Setting a backup email address Use a backup email address to securely reset your password if you can no longer access your primary email address. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Types of emails GitHub sends - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing your GitHub user account / Types of emails GitHub sends Types of emails GitHub sends mac windows linux all There are several types of emails you can receive from GitHub, including notifications, account information, and marketing communications. Notification emails You can choose to receive some or all of your activity notifications via email. Notification emails can include: Security-related activity on repositories you have admin access to Activity on repositories you're watching Conversations you're participating in Conversations where you've been @mentioned Pushes to pull requests you're participating in Your own activity, such as opening, commenting on, or closing issues and pull requests You can also choose which type of email updates you'd like to receive on conversations you're participating in or watching. For more information, see "Choosing the delivery method for your notifications." For more information, see "Choosing the delivery method for your notifications." Account emails If you're paying for a user account or organization account with private repositories, then you'll receive billing receipts at the account's primary email address. For more information, see: "Setting your personal account's billing email" "Setting your organization's billing email" Marketing emails GitHub occasionally sends these types of marketing emails: Tips and tricks for getting started with your account Customized information about engaging projects or new features Newsletters that you've subscribed to, such as Explore GitHub For more information, see "Managing marketing emails from GitHub." Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Adding an email address to your GitHub account - User Documentation <meta name="Description" content="GitHub allows you to add as many email addresses to your account as you like. If you set an email address in your local Git configuration, you will need to add it to your account settings in order to connect your commits to your account. For more information about your email address and commits, see "[Setting your commit email address on GitHub](/articles/setting-your-commit-email-address-on-github/)." …"> GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing your GitHub user account / Adding an email address to your GitHub account Adding an email address to your GitHub account mac windows linux all GitHub allows you to add as many email addresses to your account as you like. If you set an email address in your local Git configuration, you will need to add it to your account settings in order to connect your commits to your account. For more information about your email address and commits, see "Setting your commit email address on GitHub." In the upper-right corner of any page, click your profile photo, then click Settings. In the left sidebar, click Emails. In "Add email address", type your email address and click Add. Verify your email address. In the "Primary email address" list, select the email address you'd like to associate with your web-based Git operations. Further reading "Managing email preferences" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Changing your primary email address - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing your GitHub user account / Changing your primary email address Changing your primary email address mac windows linux all You can change the email address associated with your user account at any time. Warning: After you set your primary email, verify your email address so you can: Create or fork repositories Create issues or pull requests Comment on issues, pull requests, or commits Authorize OAuth App applications Generate personal access tokens In the upper-right corner of any page, click your profile photo, then click Settings. In the left sidebar, click Emails. If desired, under "Add another address", type a new email address and click Add. Next to the new email address, click Set as Primary. To remove the old email address from your account, next to the old email, click Delete. Verify your new primary email address. Further reading "Managing email preferences" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Setting a backup email address - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing your GitHub user account / Setting a backup email address Setting a backup email address mac windows linux all Use a backup email address to securely reset your password if you can no longer access your primary email address. In the upper-right corner of any page, click your profile photo, then click Settings. In the left sidebar, click Emails. Under "Backup email address," select the address you want to set as your backup email address using the drop-down menu. Click Save. Further reading "Managing email preferences" "Updating your GitHub access credentials" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Managing marketing emails from GitHub - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing your GitHub user account / Managing marketing emails from GitHub Managing marketing emails from GitHub mac windows linux all In addition to notifications and account emails, GitHub occasionally sends marketing emails with news and information about our products. If you unsubscribe from existing marketing emails, you won't be included in future campaigns unless you change your GitHub email settings. Unsubscribing from GitHub marketing emails Tip: If you unsubscribe from all marketing emails and then subscribe to the Explore newsletter, you'll only receive the Explore newsletter, and won't receive other marketing email. In the upper-right corner of any page, click your profile photo, then click Settings. In the left sidebar, click Emails. Under Email preferences, select Only receive account related emails, and those I subscribe to. Click Save email preferences. Further reading "Types of emails GitHub sends" "Choosing the delivery method for your notifications" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Remembering your GitHub username or email - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing your GitHub user account / Remembering your GitHub username or email Remembering your GitHub username or email mac windows linux all Are you signing in to GitHub for the first time in a while? If so, welcome back! If you can't remember your GitHub user account name, you can try these methods for remembering it. GitHub Desktop users In the GitHub Desktop menu, click Preferences. In the Preferences window, verify the following: To view your GitHub username, click Accounts. To view your Git email, click Git. Note that this email is not guaranteed to be your primary GitHub email. GitHub Desktop users In the File menu, click Options. In the Options window, verify the following: To view your GitHub username, click Accounts. To view your Git email, click Git. Note that this email is not guaranteed to be your primary GitHub email. Finding your username in your user.name configuration During set up, you may have set your username in Git. If so, you can review the value of this configuration setting: git config user.name # View the setting YOUR_USERNAME Finding your username in the URL of remote repositories If you have any local copies of personal repositories you have created or forked, you can check the URL of the remote repository. Tip: This method only works if you have an original repository or your own fork of someone else's repository. If you clone someone else's repository, their username will show instead of yours. Similarly, organization repositories will show the name of the organization instead of a particular user in the remote URL. cd YOUR_REPOSITORY # Change directories to the initialized Git repository git remote -v origin https://github.com/YOUR_USERNAME/YOUR_REPOSITORY.git (fetch) origin https://github.com/YOUR_USERNAME/YOUR_REPOSITORY.git (push) Your user name is what immediately follows the https://github.com/. Further reading "Verifying your email address" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Managing your membership in organizations - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing your GitHub user account / Managing your membership in organizations Managing your membership in organizations mac windows linux all If you're a member of an organization, you can publicize or hide your membership, view other people's roles, and remove yourself from the organization. Accessing an organization To access an organization that you're a member of, you must sign in to your personal user account. Viewing people's roles in an organization You can view a list of the people in your organization and filter by their role. For more information on organization roles, see "Permission levels for an organization." Requesting organization approval for OAuth Apps Organization members can request that an owner approve access to organization resources for OAuth App. Publicizing or hiding organization membership If you'd like to tell the world which organizations you belong to, you can display the avatars of the organizations on your profile. Removing yourself from an organization If you're an outside collaborator or a member of an organization, you can leave the organization at any time. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Accessing an organization - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing your GitHub user account / Accessing an organization Accessing an organization mac windows linux all To access an organization that you're a member of, you must sign in to your personal user account. Tip: Only organization owners can see and change the account settings for an organization. In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Viewing people's roles in an organization - User Documentation <meta name="Description" content="You can view a list of the people in your organization and filter by their role. For more information on organization roles, see "[Permission levels for an organization](/articles/permission-levels-for-an-organization)." …"> GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing your GitHub user account / Viewing people's roles in an organization Viewing people's roles in an organization mac windows linux all You can view a list of the people in your organization and filter by their role. For more information on organization roles, see "Permission levels for an organization." Note: You must be an organization member to see people's roles in your organization. In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click People. You will see a list of the people in your organization. To filter the list by role, click Role and select the role you're searching for. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Requesting organization approval for OAuth Apps - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing your GitHub user account / Requesting organization approval for OAuth Apps Requesting organization approval for OAuth Apps mac windows linux all Organization members can request that an owner approve access to organization resources for OAuth App. Requesting organization approval for an OAuth App you've already authorized for your personal account In the upper-right corner of any page, click your profile photo, then click Settings. In the left sidebar, click Applications. Click the Authorized OAuth Apps tab. In the list of applications, click the name of the OAuth App you'd like to request access for. Next to the organization you'd like the OAuth App to access, click Request access. After you review the information about requesting OAuth App access, click Request approval from owners. Further reading "About OAuth App access restrictions" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Publicizing or hiding organization membership - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing your GitHub user account / Publicizing or hiding organization membership Publicizing or hiding organization membership mac windows linux all If you'd like to tell the world which organizations you belong to, you can display the avatars of the organizations on your profile. Changing the visibility of your organization membership In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click People. Locate your username in the list of members. If the list is large, you can search for your username in the search box. In the menu to the right of your username, choose a new visibility option: To publicize your membership, choose Public. To hide your membership, choose Private. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Removing yourself from an organization - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing your GitHub user account / Removing yourself from an organization Removing yourself from an organization mac windows linux all If you're an outside collaborator or a member of an organization, you can leave the organization at any time. Warning: If you're currently responsible for paying for GitHub in your organization, removing yourself from the organization does not update the billing information on file for the organization. If you are currently responsible for billing, you must have another owner or billing manager for the organization update the organization's payment method. For more information, see "Transferring organization ownership." In the upper-right corner of any page, click your profile photo, then click Settings. In your user settings sidebar, click Organizations. Under "Organizations", find the organization you'd like to remove yourself from, then click Leave. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Upgrading your personal account's billing plan - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing your GitHub user account / Upgrading your personal account's billing plan Upgrading your personal account's billing plan mac windows linux all Personal accounts can be on the free plan, or you can upgrade to a paid plan with unlimited private repositories. User account billing plans Personal accounts are available on the free plan and on the paid Developer plan. Upgrading your personal account You can upgrade your personal account to a paid plan with unlimited private repositories. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support User account billing plans - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing your GitHub user account / User account billing plans User account billing plans mac windows linux all Personal accounts are available on the free plan and on the paid Developer plan. GitHub does not offer custom plans for user accounts. You can upgrade or downgrade your billing plan at any time. Free plan With the free plan, you can collaborate on unlimited public repositories with unlimited collaborators. Developer plan The Developer plan gives you unlimited public and private repositories. Other paid features and products In addition to paid plans for your GitHub account, you can purchase other features products with your existing GitHub payment information. For more information, see "GitHub's billing plans." Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Upgrading your personal account - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing your GitHub user account / Upgrading your personal account Upgrading your personal account mac windows linux all You can upgrade your personal account to a paid plan with unlimited private repositories. If you receive a 500 error when trying to upgrade your account: Try clearing your browser's cache, then resubmit your information Check to make sure you have entered your payment data correctly If that doesn't resolve the error, please contact GitHub Support. Upgrading your personal account with a credit card In the upper-right corner of any page, click your profile photo, then click Settings. In your user settings sidebar, click Billing. Under "Billing overview", click Get private repositories. Under "Plan duration", choose whether you want to be billed monthly or yearly. Under "Pay with," type your credit card information. Review the information about the charge and your billing date, then click Upgrade your plan to finish upgrading your account. Upgrading your personal account with PayPal In the upper-right corner of any page, click your profile photo, then click Settings. In your user settings sidebar, click Billing. Under "Billing overview", click Get private repositories. Under "Plan duration", choose whether you want to be billed monthly or yearly. Under "Pay with", select PayPal account. Click PayPal. Log in to PayPal with your account information. Agree to the terms of service for paying with PayPal. Select your country of residency, as well as your state or province (if you're asked). Type your postal code. If you're a European business, enter your VAT or GST ID. Review the information about the charge and your billing date, then click Upgrade your plan to finish upgrading your account. Further reading "User account billing plans" "How does upgrading or downgrading affect the billing process?" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Paying for user accounts - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing your GitHub user account / Paying for user accounts Paying for user accounts mac windows linux all You can manage your personal account's payment information and plan duration. Updating your personal account's payment method You can update the credit card or PayPal account that we use to bill your account at any time. Switching payment methods for your personal account You can change how you're paying for GitHub at any time. Removing a payment method associated with your user account If you're already paying for your GitHub subscription with a coupon, and you aren't using your payment method for any other paid features or products on GitHub, you can remove your credit card or PayPal information. Switching between monthly and yearly billing for your personal account Choose to pay for your personal account on a monthly or yearly billing cycle, depending on your needs. Redeeming a coupon for your personal account With a coupon code, you can apply a discount for a paid plan to your personal account. Troubleshooting a declined credit card charge If the credit card you use to pay for GitHub is declined, you can take several steps to ensure that your payments go through and that you are not locked out of your account. Unlocking a locked personal account Your private repositories are locked when you downgrade your paid account to a free one, or if your paid plan is seriously past due because of billing problems. Discounted personal accounts GitHub provides free and discounted personal accounts with unlimited private repositories to students, teachers, researchers, and employees of educational institutions that grant credentials. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Updating your personal account's payment method - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing your GitHub user account / Updating your personal account's payment method Updating your personal account's payment method mac windows linux all You can update the credit card or PayPal account that we use to bill your account at any time. When you update your payment method for your personal account or organization's GitHub subscription, your new payment method is automatically added to your other subscriptions for paid products. For more information, see "GitHub's billing plans." Updating your personal account's credit card In the upper-right corner of any page, click your profile photo, then click Settings. In your user settings sidebar, click Billing. Click Update payment method. Type your new credit card information in the secure form. Click Update credit card or Save credit card. Updating your personal account's PayPal information In the upper-right corner of any page, click your profile photo, then click Settings. In your user settings sidebar, click Billing. Click Update payment method. Under "Pay with", select PayPal account. Click PayPal. Log in to PayPal with your account information. Agree to the terms of service for paying with PayPal. Select your country of residency, as well as your state or province (if you're asked). Type your postal code. If you're a European business, enter your VAT or GST ID. Click Process payment. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Switching payment methods for your personal account - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing your GitHub user account / Switching payment methods for your personal account Switching payment methods for your personal account mac windows linux all You can change how you're paying for GitHub at any time. You can pay for GitHub with a credit card or with a PayPal account. When you update your payment method for your personal account or organization's GitHub subscription, your new payment method is automatically added to your other subscriptions for paid products. For more information, see "GitHub's billing plans." We don't provide invoicing or support purchase orders for personal accounts. We email receipts monthly or yearly on your account's billing date. If your company, country, or accountant requires your receipts to provide more detail, you can also add extra information to your receipts. Switching payment methods for your personal account In the upper-right corner of any page, click your profile photo, then click Settings. In your user settings sidebar, click Billing. Click Update payment method. At the top, choose to either pay with a credit card or PayPal. Further reading "Updating your personal account's payment method" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Removing a payment method associated with your user account - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing your GitHub user account / Removing a payment method associated with your user account Removing a payment method associated with your user account mac windows linux all If you're already paying for your GitHub subscription with a coupon, and you aren't using your payment method for any other paid features or products on GitHub, you can remove your credit card or PayPal information. Tip: If you downgrade your account to free and you don't have subscriptions for any other paid features or products, we'll automatically remove your payment information. In the upper-right corner of any page, click your profile photo, then click Settings. In your user settings sidebar, click Billing. In the "Payment" section, click . Confirm the change by clicking Remove credit card or Remove PayPal account. Further reading "How does downgrading affect the billing process?" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Switching between monthly and yearly billing for your personal account - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing your GitHub user account / Switching between monthly and yearly billing for your personal account Switching between monthly and yearly billing for your personal account mac windows linux all Choose to pay for your personal account on a monthly or yearly billing cycle, depending on your needs. If you decide to switch to yearly billing from a monthly billing plan, or vice versa, your account, along with any other paid features and products, will be moved to your new billing cycle on your next billing date. Changing your personal account billing plan In the upper-right corner of any page, click your profile photo, then click Settings. In your user settings sidebar, click Billing. Under "Billing overview", next to your payment information, click Change to yearly billing or Change to monthly billing. Review your new payment details, then click Change plan duration. Further reading "Switching between monthly and yearly billing for your organization" "How does upgrading or downgrading affect the billing process?" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Redeeming a coupon for your personal account - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing your GitHub user account / Redeeming a coupon for your personal account Redeeming a coupon for your personal account mac windows linux all With a coupon code, you can apply a discount for a paid plan to your personal account. You cannot apply coupons to paid plans for GitHub Marketplace apps. Warning: GitHub can't issue a refund if you pay for an account before applying a coupon. We also can't transfer a redeemed coupon or give you a new coupon if you apply it to the wrong account. Confirm that you're applying the coupon to the correct account before you redeem a coupon. Visit the Redeem coupon page. In the Enter coupon code box, type your coupon code and click Redeem. If you're not already signed in, you can sign in on this page, or create a new account to apply your coupon to. Under "Redeem your coupon", click Choose next to your personal account's username. Under "Your new plan", review the information about your plan and discount, then click Redeem. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Troubleshooting a declined credit card charge - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing your GitHub user account / Troubleshooting a declined credit card charge Troubleshooting a declined credit card charge mac windows linux all If the credit card you use to pay for GitHub is declined, you can take several steps to ensure that your payments go through and that you are not locked out of your account. If your card is declined, we'll send you an email about why the payment was declined. You'll have a few days to resolve the problem before we try charging you again. Check your card's expiration date If your card has expired, you'll need to update your account's payment information. You can update credit cards for personal accounts and organizations at any time. Verify your bank's policy on card restrictions Some international banks place restrictions on international, e-commerce, and automatically recurring transactions. If you're having trouble making a payment with your international credit card, call your bank to see if there are any restrictions on your card. We also support payments through PayPal for personal accounts and organizations. Contact your bank for details about the transaction Your bank can provide additional information about declined payments if you specifically ask about the attempted transaction. If there are restrictions on your card and you need to call your bank, provide this information to your bank: The amount you're being charged. The amount for your plan appears on the receipts for personal accounts and organizations. The date when GitHub bills you. Your account's billing date appears on your receipts. The transaction ID number. Your account's transaction ID appears on your receipts. The merchant name. The merchant name is GitHub. The error message your bank sent with the declined charge. You can find your bank's error message on the email we send you when a charge is declined. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Unlocking a locked personal account - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing your GitHub user account / Unlocking a locked personal account Unlocking a locked personal account mac windows linux all Your private repositories are locked when you downgrade your paid account to a free one, or if your paid plan is seriously past due because of billing problems. You can unlock and access your private repositories by updating your account's payment method and resuming paid status. We do not ask you to pay for the time elapsed in locked mode. We won't delete your locked private repositories or make them public. After a period of nonpayment, GitHub reserves the right to delete content from locked repositories. If you need short-term access to the repositories to move them off of the account, contact GitHub Support. Unlocking a personal account locked due to a declined payment If your personal account was locked due to a declined payment, you'll need to update your billing information to trigger a newly authorized charge. For more information, see "Updating your personal account's payment method." If the new billing information is approved, we will immediately charge your account, and the personal account will automatically unlock when a successful payment has been made. Unlocking a personal account locked due to a plan downgrade If your private repositories were locked because your plan was downgraded to free, you can: Upgrade your account to the paid plan Make your private repositories public. Further reading "Unlocking a locked organization account" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Discounted personal accounts - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing your GitHub user account / Discounted personal accounts Discounted personal accounts mac windows linux all GitHub provides free and discounted personal accounts with unlimited private repositories to students, teachers, researchers, and employees of educational institutions that grant credentials. An academic discount for your personal account lasts two years, but you can renew your discount if you're affiliated with an educational institution when your coupon expires. You can request a discount for your personal account on our education page. Tip: Discounts do not apply to subscriptions for other paid products and features. Further reading "Discounted organization accounts" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Viewing and managing your personal account's billing information - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing your GitHub user account / Viewing and managing your personal account's billing information Viewing and managing your personal account's billing information mac windows linux all You can set your account's billing email, find your billing date, and customize your receipts. Setting your personal account's billing email Your personal account's primary email is where GitHub sends receipts, credit card or PayPal charges, and other billing-related communication. Finding your personal account's next billing date You can find out when you're next going to be billed for your GitHub plan in your personal account settings. Downloading receipts for personal accounts You can download past receipts at any time from your account settings page. Adding information to your personal account's receipts If there's specific information required by your company or country, you can add that information to your GitHub receipts. Viewing and managing pending changes to your personal account's billing plan You can view and cancel pending changes to your billing plan and subscriptions before they take effect on your next billing date. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Setting your personal account's billing email - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing your GitHub user account / Setting your personal account's billing email Setting your personal account's billing email mac windows linux all Your personal account's primary email is where GitHub sends receipts, credit card or PayPal charges, and other billing-related communication. Your primary email address is the first email listed in your account email settings. We also use your primary email address as our billing email address. If you'd like to change your billing email, see "Changing your primary email address." Further reading "Setting your organization's billing email" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Finding your personal account's next billing date - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing your GitHub user account / Finding your personal account's next billing date Finding your personal account's next billing date mac windows linux all You can find out when you're next going to be billed for your GitHub plan in your personal account settings. In the upper-right corner of any page, click your profile photo, then click Settings. In your user settings sidebar, click Billing. You can see your next billing date in the "Payment" section. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Downloading receipts for personal accounts - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing your GitHub user account / Downloading receipts for personal accounts Downloading receipts for personal accounts mac windows linux all You can download past receipts at any time from your account settings page. In the upper-right corner of any page, click your profile photo, then click Settings. In your user settings sidebar, click Billing. Under "Payment history", click . Further reading "Downloading receipts for organizations" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Adding information to your personal account's receipts - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing your GitHub user account / Adding information to your personal account's receipts Adding information to your personal account's receipts mac windows linux all If there's specific information required by your company or country, you can add that information to your GitHub receipts. Your receipts include your GitHub subscription as well as any subscriptions for other paid features and products. Warning: For security reasons, we strongly recommend against including any confidential or financial information (such as credit card numbers) on your receipts. In the upper-right corner of any page, click your profile photo, then click Settings. In your user settings sidebar, click Billing. Under "Billing overview", next to "Extra info", click Add information. Type the extra information you'd like on your receipt, then click Save contact information. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Viewing and managing pending changes to your personal account's billing plan - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing your GitHub user account / Viewing and managing pending changes to your personal account's billing plan Viewing and managing pending changes to your personal account's billing plan mac windows linux all You can view and cancel pending changes to your billing plan and subscriptions before they take effect on your next billing date. You can cancel pending changes to your GitHub billing plan as well as pending changes to your subscriptions to other paid features and products. When you cancel a pending change, your plan or subscription will not change on your next billing date (unless you make a subsequent change to your plan or subscription before your next billing date). In the upper-right corner of any page, click your profile photo, then click Settings. In your user settings sidebar, click Billing. Under "Pending changes," review your pending changes. Next to the pending change you'd like to cancel, click Cancel. To confirm that you'd like to cancel your pending plan changes, in the dialog box, click OK. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Downgrading your personal account's billing plan - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing your GitHub user account / Downgrading your personal account's billing plan Downgrading your personal account's billing plan mac windows linux all You can downgrade your personal account to the free plan at any time. Downgrading a user account to free If you wish to stop your recurring payments and downgrade to free, you can do so at any time. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Downgrading a user account to free - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing your GitHub user account / Downgrading a user account to free Downgrading a user account to free mac windows linux all If you wish to stop your recurring payments and downgrade to free, you can do so at any time. Downgrading to free does not affect your subscriptions for other paid features and products. If you want to cease all of your paid subscriptions on GitHub, you must downgrade each paid subscription separately. Warning: When you downgrade your billing plan, your new plan takes effect on your next billing date. Make sure to back up your private repositories before your next billing date, or you won't be able to access them without upgrading to a paid plan again. In the upper-right corner of any page, click your profile photo, then click Settings. In your user settings sidebar, click Billing. Under "Downgrade your plan", click Downgrade to free. Read the information about what happens when you cancel a paid plan, then click I understand, downgrade my plan. Further reading "How does upgrading or downgrading affect the billing process?" "Removing a payment method associated with your user account" "Downgrading your organization's billing plan" "Deleting your user account" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Managing your personal account's apps - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing your GitHub user account / Managing your personal account's apps Managing your personal account's apps mac windows linux all You can upgrade, downgrade, or cancel GitHub Marketplace apps at any time. Upgrading an app for your personal account You can upgrade your GitHub Marketplace app to a different plan at any time. Downgrading an app for your personal account If you'd like to use a different billing plan, you can downgrade your GitHub Marketplace app at any time. Canceling an app for your personal account You can cancel and remove a GitHub Marketplace app from your account at any time. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Upgrading an app for your personal account - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing your GitHub user account / Upgrading an app for your personal account Upgrading an app for your personal account mac windows linux all You can upgrade your GitHub Marketplace app to a different plan at any time. When you upgrade an app, your payment method is charged a prorated amount based on the time remaining until your next billing date. For more information, see "About billing for GitHub Marketplace." In the upper-right corner of any page, click your profile photo, then click Settings. In your user settings sidebar, click Billing. In the "Marketplace Purchases" section, next to the app you'd like to upgrade, click Edit. Under "Edit your plan," use the drop-down menu, and click on a new plan. If you chose a unit plan, type a new quantity. Review the information about your new plan and billing information, then click Issue plan changes. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Downgrading an app for your personal account - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing your GitHub user account / Downgrading an app for your personal account Downgrading an app for your personal account mac windows linux all If you'd like to use a different billing plan, you can downgrade your GitHub Marketplace app at any time. When you downgrade an app, your subscription remains active until the end of your current billing cycle. The downgrade takes effect on your next billing date. For more information, see "About billing for GitHub Marketplace." Canceling an app or downgrading an app to free does not affect your other paid subcriptions on GitHub. If you want to cease all of your paid subscriptions on GitHub, you must downgrade each paid subscription separately. In the upper-right corner of any page, click your profile photo, then click Settings. In your user settings sidebar, click Billing. In the "Marketplace Purchases" section, next to the app you'd like to downgrade, click Edit. Under "Edit your plan," use the drop-down menu, and click on a new plan. If you chose a unit plan, type a new quantity. Review the information about your new plan and billing information, then click Issue plan changes. Further reading "Canceling an app for your personal account" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Canceling an app for your personal account - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing your GitHub user account / Canceling an app for your personal account Canceling an app for your personal account mac windows linux all You can cancel and remove a GitHub Marketplace app from your account at any time. When you cancel an app, your subscription remains active until the end of your current billing cycle. The cancellation takes effect on your next billing date. For more information, see "About billing for GitHub Marketplace." When you cancel a free trial on a paid plan, your subscription is immediately canceled and you will lose access to the app. If you don't cancel your free trial within the trial period, the payment method on file for your account will be charged for the plan you chose at the end of the trial period. For more information, see "About billing for GitHub Marketplace." Canceling an app or downgrading an app to free does not affect your other paid subcriptions on GitHub. If you want to cease all of your paid subscriptions on GitHub, you must downgrade each paid subscription separately. Canceling an app for your personal account In the upper-right corner of any page, click your profile photo, then click Settings. In your user settings sidebar, click Billing. In the "Marketplace Purchases" section, next to the app you'd like to cancel, click Cancel. In the dialog box, click OK. Canceling a free trial for an app for your personal account In the upper-right corner of any page, click your profile photo, then click Settings. In your user settings sidebar, click Billing. In the "Marketplace Purchases" section, next to the free trial you'd like to cancel, click Cancel. In the dialog box, click OK. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Managing large file storage and bandwidth for your personal account - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing your GitHub user account / Managing large file storage and bandwidth for your personal account Managing large file storage and bandwidth for your personal account mac windows linux all You can upgrade and downgrade Git Large File Storage for your personal account. Purchasing additional storage and bandwidth for a personal account Purchasing additional data packs increases your monthly bandwidth quota and total storage capacity for your personal account. For more information on Git LFS, see "Versioning large files." Downgrading storage and bandwidth for a personal account You can downgrade your personal account's storage and bandwidth for Git LFS by increments of 50 GB per month in bandwidth and storage. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Purchasing additional storage and bandwidth for a personal account - User Documentation <meta name="Description" content="Purchasing additional data packs increases your monthly bandwidth quota and total storage capacity for your personal account. For more information on Git LFS, see "[Versioning large files](/articles/versioning-large-files)." …"> GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing your GitHub user account / Purchasing additional storage and bandwidth for a personal account Purchasing additional storage and bandwidth for a personal account mac windows linux all Purchasing additional data packs increases your monthly bandwidth quota and total storage capacity for your personal account. For more information on Git LFS, see "Versioning large files." In the upper-right corner of any page, click your profile photo, then click Settings. In your user settings sidebar, click Billing. In the "Git LFS Data" section, click Purchase more. Enter the number of data packs you want to add to your account. Each pack costs $5 per month, and provides 50 GB of bandwidth and 50 GB for storage. To confirm your new monthly data pack quantity, click Purchase. Further reading "About storage and bandwidth usage" "Viewing storage and bandwidth usage for an organization" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Downgrading storage and bandwidth for a personal account - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing your GitHub user account / Downgrading storage and bandwidth for a personal account Downgrading storage and bandwidth for a personal account mac windows linux all You can downgrade your personal account's storage and bandwidth for Git LFS by increments of 50 GB per month in bandwidth and storage. When you downgrade your number of data packs, your change takes effect on your next billing date. For more information, see "About storage and bandwidth usage." In the upper-right corner of any page, click your profile photo, then click Settings. In your user settings sidebar, click Billing. Next to "Git LFS Data", click Downgrade. Under "Downgrade data pack", select the number of data packs you'd like to downgrade to. To finish downgrading, click Downgrade data plan. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Keeping your account and data secure - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Authenticating to GitHub / Keeping your account and data secure Keeping your account and data secure mac windows linux all To protect your personal information, you should keep both your GitHub account and any associated data secure. Creating a strong password Your security on GitHub, as well as every other account you have on the Web, is best served with a strong password that isn't shared with any other person, service, or site. Updating your GitHub access credentials GitHub credentials include not only your password, but also the access tokens, SSH keys, and application API tokens you use to communicate with GitHub. Should you have the need, you can reset all of these access credentials yourself. Creating a personal access token for the command line You can create a personal access token and use it in place of a password when performing Git operations over HTTPS with Git on the command line or the API. Reviewing your SSH keys To keep your credentials secure, you should regularly audit your SSH keys, deploy keys, and review authorized applications that access your GitHub account. Reviewing your deploy keys You should review deploy keys to ensure that there aren't any unauthorized (or possibly compromised) keys. You can also approve existing deploy keys that are valid. Authorizing OAuth Apps You can connect your GitHub identity to third-party applications using OAuth. When authorizing an OAuth App, you should ensure you trust the application, review who it's developed by, and review the kinds of information the application wants to access. Reviewing your authorized integrations You can review your authorized integrations to audit the access that each integration has to your account and data. Reviewing your security log You can review your account's security log to better understand the actions you've performed in the last 90 days. Removing sensitive data from a repository If you commit sensitive data, such as a password or SSH key into a Git repository, you can remove it from the history. To entirely remove unwanted files from a repository's history you can use either the git filter-branch command or the BFG Repo-Cleaner. About anonymized image URLs If you upload an image to GitHub, the URL of the image will be modified so your information is not trackable. About GitHub's IP addresses GitHub serves applications from multiple IP address ranges, which are available using the API. GitHub's SSH key fingerprints Public key fingerprints can be used to validate a connection to a remote server. Sudo mode GitHub asks you for your password before you can modify your email address, authorize third-party applications, or add new public keys, or initiate other sudo-protected actions. Preventing unauthorized access You may be alerted to a security incident in the media, such as the discovery of the Heartbleed bug, or your computer could be stolen while you're signed in to GitHub. In such cases, changing your password prevents any unintended future access to your account and projects. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Creating a strong password - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Authenticating to GitHub / Creating a strong password Creating a strong password mac windows linux all Your security on GitHub, as well as every other account you have on the Web, is best served with a strong password that isn't shared with any other person, service, or site. When you create a password for your GitHub user account, we automatically disallow some things that can make your password insecure, such as: Passwords without unique characters Letter or number combinations that have proven to be easily guessable by nefarious types (or bots) However, there are additional things you should consider that we can't control. You have the power to protect yourself! Make your password as strong as possible You probably already know that a good password is a word or sequence of at least 12 characters with a combination of lower- and upper-case letters, numbers, and special characters. However, a much better password is a passphrase with at least 16 characters. For example, "canaries baseball clock dreams" (with a hat tip to XKCD) is very strong and difficult to guess, but also easy for you to remember. Don't share your password with anyone, ever (no, never) "Sharing" your password can be intentional or unintentional. Intentionally sharing your password Telling anyone your password--even a potential collaborator on a repository--makes you vulnerable to security breaches. GitHub has a few different ways to let you collaborate with others and keep your account private. Invite collaborators to your repository Create an organization and then add members to a team. Unintentionally sharing your password If your password is tricky to remember, writing it down somewhere, such as on a piece of paper near your computer, is like not having a password at all. If anyone were to see that piece of paper, you'd be in big trouble. Instead, use a personal password manager such as LastPass, 1Password, or Keeper. Keep your GitHub password different from those used for other accounts or services Your GitHub password should not only be unique to you, it should be unique to GitHub. Attackers know that people tend to reuse the same password for multiple accounts because they're easier to remember that way. If your password is guessed on another service, it could be guessed here on GitHub. Warning: Security incidents at other companies have provided criminals with vast lists of valid user names, email addresses, and passwords that are used in attempts to access your encrypted data all over the internet. Unless you have an award-winning memory, it can be very difficult to remember unique passwords for all accounts and services you use. To keep track of your passwords, use a personal password manager such as LastPass, 1Password, or Keeper. Enable two-factor authentication Think of two-factor authentication as a second metal door an intruder has to work hard to bust through after they've successfully picked the lock on the first one. For more information, see "About two-factor authentication." Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Updating your GitHub access credentials - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Authenticating to GitHub / Updating your GitHub access credentials Updating your GitHub access credentials mac windows linux all GitHub credentials include not only your password, but also the access tokens, SSH keys, and application API tokens you use to communicate with GitHub. Should you have the need, you can reset all of these access credentials yourself. Requesting a new password To request a new password, visit https://www.github.com/password_reset. Enter the email address associated with your personal GitHub account, then click Send password reset email. The email will be sent to the backup email address if you have one configured. We'll email you a link that will allow you to reset your password. You must click on this link within 3 hours of receiving the email. If you didn't receive an email from us, make sure to check your spam folder. After clicking on the link in your email, you'll be asked to enter a new password. To avoid losing your password in the future, we suggest using a secure password manager, like LastPass, 1Password, or Keeper. Changing an existing password Sign in to GitHub. In the upper-right corner of any page, click your profile photo, then click Settings. In the left sidebar, click Account settings. Under "Change password", type your old password, a strong new password, and confirm your new password. For help creating a strong password, see "Creating a strong password" Click Update password. For greater security, enable two-factor authentication in addition to changing your password. See About two-factor authentication for more details. Updating your access tokens See "Reviewing your authorized integrations" for instructions on reviewing and deleting access tokens. To generate new access tokens, see "Creating a personal access token for the command line." Updating your SSH keys See "Reviewing your SSH keys" for instructions on reviewing and deleting SSH keys. To generate and add new SSH keys, see "Generating an SSH key." Resetting API tokens If you have any applications registered with GitHub, you'll want to reset their OAuth tokens. See the GitHub Developer documentation for instructions on how to do this. Preventing unauthorized access For more tips on securing your account and preventing unauthorized access, see "Preventing unauthorized access." Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Creating a personal access token for the command line - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Authenticating to GitHub / Creating a personal access token for the command line Creating a personal access token for the command line mac windows linux all You can create a personal access token and use it in place of a password when performing Git operations over HTTPS with Git on the command line or the API. A personal access token is required to authenticate to GitHub in the following situations: When you're using two-factor authentication To access protected content in an organization that uses SAML single sign-on (SSO). Tokens used with organizations that use SAML SSO must be authorized. Creating a token Verify your email address, if it hasn't been verified yet. In the upper-right corner of any page, click your profile photo, then click Settings. In the left sidebar, click Developer settings. In the left sidebar, click Personal access tokens. Click Generate new token. Give your token a descriptive name. Select the scopes, or permissions, you'd like to grant this token. To use your token to access repositories from the command line, select repo. Click Generate token. Click to copy the token to your clipboard. For security reasons, after you navigate off the page, you will not be able to see the token again. Warning: Treat your tokens like passwords and keep them secret. When working with the API, use tokens as environment variables instead of hardcoding them into your programs. To use your token to authenticate to an organization that uses SAML SSO, authorize the token for use with a SAML single-sign-on organization. Using a token on the command line Once you have a token, you can enter it instead of your password when performing Git operations over HTTPS. For example, on the command line you would enter the following: git clone https://github.com/username/repo.git Username: your_username Password: your_token Personal access tokens can only be used for HTTPS Git operations. If your repository uses an SSH remote URL, you will need to switch the remote from SSH to HTTPS. If you are not prompted for your username and password, your credentials may be cached on your computer. You can update your credentials in the Keychain to replace your old password with the token. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Reviewing your SSH keys - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Authenticating to GitHub / Reviewing your SSH keys Reviewing your SSH keys mac windows linux all To keep your credentials secure, you should regularly audit your SSH keys, deploy keys, and review authorized applications that access your GitHub account. You can delete unauthorized (or possibly compromised) SSH keys to ensure that an attacker no longer has access to your repositories. You can also approve existing SSH keys that are valid. In the upper-right corner of any page, click your profile photo, then click Settings. In the user settings sidebar, click SSH and GPG keys. On the SSH Settings page, take note of the SSH keys associated with your account. For those that you don't recognize, or that are out-of-date, click Delete. If there are valid SSH keys you'd like to keep, click Approve. Note: If you're auditing your SSH keys due to an unsuccessful Git operation, the unverified key that caused the SSH key audit error will be highlighted in the list of SSH keys. Open Terminal. Start the ssh-agent in the background. eval "$(ssh-agent -s)" Agent pid 59566 Find and take a note of your public key fingerprint. If you're using OpenSSH 6.7 or older: ssh-add -l 2048 a0:dd:42:3c:5a:9d:e4:2a:21:52:4e:78:07:6e:c8:4d /Users/USERNAME/.ssh/id_rsa (RSA) If you're using OpenSSH 6.8 or newer: ssh-add -l -E md5 2048 MD5:a0:dd:42:3c:5a:9d:e4:2a:21:52:4e:78:07:6e:c8:4d /Users/USERNAME/.ssh/id_rsa (RSA) The SSH keys on GitHub should match the same keys on your computer. In the upper-right corner of any page, click your profile photo, then click Settings. In the user settings sidebar, click SSH and GPG keys. On the SSH Settings page, take note of the SSH keys associated with your account. For those that you don't recognize, or that are out-of-date, click Delete. If there are valid SSH keys you'd like to keep, click Approve. Note: If you're auditing your SSH keys due to an unsuccessful Git operation, the unverified key that caused the SSH key audit error will be highlighted in the list of SSH keys. Open Git Bash. If you're using Git Shell, which is included in GitHub Desktop, open Git Shell and skip to step 6. If you are using Git Bash, turn on ssh-agent: # start the ssh-agent in the background eval "$(ssh-agent -s)" Agent pid 59566 If you are using another terminal prompt, such as Git for Windows, turn on ssh-agent: # start the ssh-agent in the background eval $(ssh-agent -s) Agent pid 59566 Find and take a note of your public key fingerprint. If you're using OpenSSH 6.7 or older: ssh-add -l 2048 a0:dd:42:3c:5a:9d:e4:2a:21:52:4e:78:07:6e:c8:4d /Users/USERNAME/.ssh/id_rsa (RSA) If you're using OpenSSH 6.8 or newer: ssh-add -l -E md5 2048 MD5:a0:dd:42:3c:5a:9d:e4:2a:21:52:4e:78:07:6e:c8:4d /Users/USERNAME/.ssh/id_rsa (RSA) The SSH keys on GitHub should match the same keys on your computer. In the upper-right corner of any page, click your profile photo, then click Settings. In the user settings sidebar, click SSH and GPG keys. On the SSH Settings page, take note of the SSH keys associated with your account. For those that you don't recognize, or that are out-of-date, click Delete. If there are valid SSH keys you'd like to keep, click Approve. Note: If you're auditing your SSH keys due to an unsuccessful Git operation, the unverified key that caused the SSH key audit error will be highlighted in the list of SSH keys. Open Terminal. Start the ssh-agent in the background. eval "$(ssh-agent -s)" Agent pid 59566 Find and take a note of your public key fingerprint. If you're using OpenSSH 6.7 or older: ssh-add -l 2048 a0:dd:42:3c:5a:9d:e4:2a:21:52:4e:78:07:6e:c8:4d /Users/USERNAME/.ssh/id_rsa (RSA) If you're using OpenSSH 6.8 or newer: ssh-add -l -E md5 2048 MD5:a0:dd:42:3c:5a:9d:e4:2a:21:52:4e:78:07:6e:c8:4d /Users/USERNAME/.ssh/id_rsa (RSA) The SSH keys on GitHub should match the same keys on your computer. Warning: If you see an SSH key you're not familiar with on GitHub, delete it immediately and contact GitHub Support for further help. An unidentified public key may indicate a possible security concern. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Reviewing your deploy keys - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Authenticating to GitHub / Reviewing your deploy keys Reviewing your deploy keys mac windows linux all You should review deploy keys to ensure that there aren't any unauthorized (or possibly compromised) keys. You can also approve existing deploy keys that are valid. On GitHub, navigate to the main page of the repository. Under your repository name, click Settings. In the left sidebar, click Deploy keys. On the Deploy keys page, take note of the deploy keys associated with your account. For those that you don't recognize, or that are out-of-date, click Delete. If there are valid deploy keys you'd like to keep, click Approve. For more information, see "Managing deploy keys" in the GitHub Developer documentation. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Authorizing OAuth Apps - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Authenticating to GitHub / Authorizing OAuth Apps Authorizing OAuth Apps mac windows linux all You can connect your GitHub identity to third-party applications using OAuth. When authorizing an OAuth App, you should ensure you trust the application, review who it's developed by, and review the kinds of information the application wants to access. When an OAuth App wants to identify you by your GitHub account, you'll see a page with the app's developer contact information and a list of the specific data that's being requested. Tip: You must verify your email address before you can authorize an OAuth App. OAuth App access OAuth Apps can have read or write access to your GitHub data. Read access only allows an app to look at your data. Write access allows an app to change your data. Tip: We recommend that you regularly review your authorized integrations. Remove any applications and tokens that haven't been used in a while. About OAuth scopes Scopes are named groups of permissions that an OAuth App can request to access both public and non-public data. When you want to use an OAuth App that integrates with GitHub, that app lets you know what type of access to your data will be required. If you grant access to the app, then the app will be able to perform actions on your behalf, such as reading or modifying data. For example, if you want to use an app that requests user:email scope, the app will have read-only access to your private email addresses. For more information, see "About scopes for OAuth Apps" in the GitHub Developer documentation. Note: Currently, you can't scope source code access to read-only. Types of requested data OAuth Apps can request several types of data. Type of data Description Commit status You can grant access for an app to report your commit status. Commit status access allows apps to determine if a build is a successful against a specific commit. Apps won't have access to your code, but they can read and write status information against a specific commit. Deployments Deployment status access allows apps to determine if a deployment is successful against a specific commit for public and private repositories. Apps won't have access to your code. Gists Gist access allows apps to read or write to both your public and secret Gists. Hooks Webhooks access allows apps to read or write hook configurations on repositories you manage. Notifications Notification access allows apps to read your GitHub notifications, such as comments on issues and pull requests. However, apps remain unable to access anything in your repositories. Organizations and teams Organization and teams access allows apps to access and manage organization and team membership. Personal user data User data includes information found in your user profile, like your name, e-mail address, and location. Repositories Repository information includes the names of contributors, the branches you've created, and the actual files within your repository. Apps can request access for either public or private repositories on a user-wide level. Repository delete Apps can request to delete repositories that you administer, but they won't have access to your code. Requesting updated permissions When OAuth Apps request new access permissions, they will notify you of the differences between their current permissions and the new permissions. OAuth Apps and organizations When you authorize an OAuth App for your personal user account, you'll also see how the authorization will affect each organization you're a member of. For organizations with OAuth App access restrictions, you can request that organization admins approve the application for use in that organization. If the organization does not approve the application, then the application will only be able to access the organization's public resources. If you're an organization admin, you can approve the application yourself. For organizations without OAuth App access restrictions, the application will automatically be authorized for access to that organization's resources. For this reason, you should be careful about which OAuth Apps you approve for access to your personal account resources as well as any organization resources. Further reading "About OAuth App access restrictions" "GitHub Marketplace support" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Reviewing your authorized integrations - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Authenticating to GitHub / Reviewing your authorized integrations Reviewing your authorized integrations mac windows linux all You can review your authorized integrations to audit the access that each integration has to your account and data. Reviewing your authorized OAuth Apps In the upper-right corner of any page, click your profile photo, then click Settings. In the left sidebar, click Applications. Click the Authorized OAuth Apps tab. Review the OAuth Apps that have access to your account. For those that you don't recognize or that are out-of-date, click Revoke. To revoke all OAuth Apps, click Revoke all. Reviewing your authorized GitHub Apps In the upper-right corner of any page, click your profile photo, then click Settings. In the left sidebar, click Applications. Click the Authorized GitHub Apps tab. Review the GitHub Apps that have access to your account. For those that you don't recognize or that are out of date, click Revoke. To revoke all GitHub Apps, click Revoke all. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Reviewing your security log - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Authenticating to GitHub / Reviewing your security log Reviewing your security log mac windows linux all You can review your account's security log to better understand the actions you've performed in the last 90 days. Accessing your security log The security log lists the last 50 actions or those performed within the last 90 days. In the upper-right corner of any page, click your profile photo, then click Settings. In the user settings sidebar, click Security. Under "Security history," your log is displayed. Click on an entry to see more information about the event. Understanding events in the security log Actions listed in the audit log are grouped within the following categories: Category Name Description account_recovery_token Contains all activities related to adding a recovery token billing Contains all activities related to your billing information. marketplace_agreement_signature Contains all activities related to signing the GitHub Marketplace Developer Agreement. marketplace_listing Contains all activities related to listing apps in GitHub Marketplace. oauth_access Contains all activities related to OAuth Apps you've connected with. payment_method Contains all activities related to paying for your GitHub plan. profile_picture Contains all activities related to your profile picture. project Contains all activities related to project boards. public_key Contains all activities related to your public SSH keys. repo Contains all activities related to the repositories you own. repository_content_analysis Contains all activities related to enabling or disabling data use for a private repository. repository_dependency_graph Contains all activities related to enabling or disabling the dependency graph for a private repository. repository_vulnerability_alert Contains all activities related to security alerts for vulnerable dependencies. two_factor_authentication Contains all activities related to two-factor authentication. user Contains all activities related to your account. A description of the events within these categories is listed below. The account_recovery_token category Action Description confirm Triggered when you successfully store a new token with a recovery provider. recover Triggered when you successfully redeem an account recovery token. recover_error Triggered when a token is used but GitHub is not able to validate it. The billing category Action Description change_billing_type Triggered when you change how you pay for GitHub. change_email Triggered when you change your email address. The marketplace_agreement_signature category Action Description create Triggered when you sign the GitHub Marketplace Developer Agreement. The marketplace_listing category Action Description approve Triggered when your listing is approved for inclusion in GitHub Marketplace. create Triggered when you create a listing for your app in GitHub Marketplace. delist Triggered when your listing is removed from GitHub Marketplace. redraft Triggered when your listing is sent back to draft state. reject Triggered when your listing is not accepted for inclusion in GitHub Marketplace. The oauth_access category Action Description create Triggered when you grant access to an OAuth App. destroy Triggered when you revoke an OAuth App's access to your account. The payment_method category Action Description clear Triggered when a payment method on file is removed. create Triggered when a new payment method is added, such as a new credit card or PayPal account. update Triggered when an existing payment method is updated. The profile_picture category Action Description update Triggered when you set or update your profile picture. The project category Action Description create Triggered when a project board is created. rename Triggered when a project board is renamed. delete Triggered when a project board is deleted. The public_key category Action Description create Triggered when you add a new public SSH key to your GitHub account. delete Triggered when you remove a public SSH key to your GitHub account. The repo category Action Description access Triggered when you a repository you own is switched from "private" to "public" (or vice versa). add_member Triggered when a GitHub user is invited to have collaboration access to a repository. add_topic Triggered when a repository owner adds a topic to a repository. archived Triggered when a repository owner archives a repository. create Triggered when a new repository is created. destroy Triggered when a repository is deleted. disable Triggered when a repository is disabled (e.g., for insufficient funds). enable Triggered when a repository is re-enabled. remove_member Triggered when a GitHub user is removed from a repository as a collaborator. remove_topic Triggered when a repository owner removes a topic from a repository. rename Triggered when a repository is renamed. transfer Triggered when a repository is transferred. transfer_start Triggered when a repository transfer is about to occur. unarchived Triggered when a repository owner unarchives a repository. The repository_content_analysis category Action Description enable Triggered when a repository owner opts in to data use for a private repository. disable Triggered when a repository owner opts out of data use for a private repository. The repository_dependency_graph category Action Description enable Triggered when a repository owner enables the dependency graph for a private repository. disable Triggered when a repository owner disables the dependency graph for a private repository. The repository_vulnerability_alert category Action Description create Triggered when GitHub creates a security alert for a vulnerable dependency in a particular repository. resolve Triggered when someone with write access to a repository pushes changes to update and resolve a vulnerability in a project dependency. dismiss Triggered when a repository owner dismisses a security alert about a vulnerable dependency in a repository. The two_factor_authentication category Action Description enabled Triggered when two-factor authentication is enabled. disabled Triggered when two-factor authentication is disabled. The user category Action Description add_email Triggered when you add a new email address. create Triggered when you create a new user account. remove_email Triggered when you remove an email address. rename Triggered when you rename your account. change_password Triggered when you change your password. forgot_password Triggered when you ask for a password reset. login Triggered when you log in to GitHub. failed_login Triggered when you failed to log in successfully. two_factor_requested Triggered when GitHub asks you for your two-factor authentication code. show_private_contributions_count Triggered when you publicize private contributions on your profile. hide_private_contributions_count Triggered when you hide private contributions on your profile. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Removing sensitive data from a repository - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Authenticating to GitHub / Removing sensitive data from a repository Removing sensitive data from a repository mac windows linux all If you commit sensitive data, such as a password or SSH key into a Git repository, you can remove it from the history. To entirely remove unwanted files from a repository's history you can use either the git filter-branch command or the BFG Repo-Cleaner. The git filter-branch command and the BFG Repo-Cleaner rewrite your repository's history, which changes the SHAs for existing commits that you alter and any dependent commits. Changed commit SHAs may affect open pull requests in your repository. We recommend merging or closing all open pull requests before removing files from your repository. You can remove the file from the latest commit with git rm. For information on removing a file that was added with the latest commit, see "Removing files from a repository's history." Warning: Once you have pushed a commit to GitHub, you should consider any data it contains to be compromised. If you committed a password, change it! If you committed a key, generate a new one. This article tells you how to make commits with sensitive data unreachable from any branches or tags in your GitHub repository. However, it's important to note that those commits may still be accessible in any clones or forks of your repository, directly via their SHA-1 hashes in cached views on GitHub, and through any pull requests that reference them. You can't do anything about existing clones or forks of your repository, but you can permanently remove all of your repository's cached views and pull requests on GitHub by contacting GitHub Support. Purging a file from your repository's history Using the BFG The BFG Repo-Cleaner is a faster, simpler alternative to git filter-branch for removing unwanted data. For example, to remove your file with sensitive data and leave your latest commit untouched), run: bfg --delete-files YOUR-FILE-WITH-SENSITIVE-DATA To replace all text listed in passwords.txt wherever it can be found in your repository's history, run: bfg --replace-text passwords.txt See the BFG Repo-Cleaner's documentation for full usage and download instructions. Using filter-branch Warning: If you run git filter-branch after stashing changes, you won't be able to retrieve your changes with other stash commands. Before running git filter-branch, we recommend unstashing any changes you've made. To unstash the last set of changes you've stashed, run git stash show -p | git apply -R. For more information, see Git Tools Stashing. To illustrate how git filter-branch works, we'll show you how to remove your file with sensitive data from the history of your repository and add it to .gitignore to ensure that it is not accidentally re-committed. If you don't already have a local copy of your repository with sensitive data in its history, clone the repository to your local computer. git clone https://github.com/YOUR-USERNAME/YOUR-REPOSITORY Initialized empty Git repository in /Users/YOUR-FILE-PATH/YOUR-REPOSITORY/.git/ remote: Counting objects: 1301, done. remote: Compressing objects: 100% (769/769), done. remote: Total 1301 (delta 724), reused 910 (delta 522) Receiving objects: 100% (1301/1301), 164.39 KiB, done. Resolving deltas: 100% (724/724), done. Navigate into the repository's working directory. cd YOUR-REPOSITORY Run the following command, replacing PATH-TO-YOUR-FILE-WITH-SENSITIVE-DATA with the path to the file you want to remove, not just its filename. These arguments will: Force Git to process, but not check out, the entire history of every branch and tag Remove the specified file, as well as any empty commits generated as a result Overwrite your existing tags $ git filter-branch --force --index-filter \ 'git rm --cached --ignore-unmatch PATH-TO-YOUR-FILE-WITH-SENSITIVE-DATA' \ --prune-empty --tag-name-filter cat -- --all > Rewrite 48dc599c80e20527ed902928085e7861e6b3cbe6 (266/266) > Ref 'refs/heads/master' was rewritten Note: If the file with sensitive data used to exist at any other paths (because it was moved or renamed), you must run this command on those paths, as well. Add your file with sensitive data to .gitignore to ensure that you don't accidentally commit it again. $ echo "YOUR-FILE-WITH-SENSITIVE-DATA" >> .gitignore $ git add .gitignore $ git commit -m "Add YOUR-FILE-WITH-SENSITIVE-DATA to .gitignore" > [master 051452f] Add YOUR-FILE-WITH-SENSITIVE-DATA to .gitignore > 1 files changed, 1 insertions(+), 0 deletions(-) Double-check that you've removed everything you wanted to from your repository's history, and that all of your branches are checked out. Once you're happy with the state of your repository, force-push your local changes to overwrite your GitHub repository, as well as all the branches you've pushed up: git push origin --force --all Counting objects: 1074, done. Delta compression using 2 threads. Compressing objects: 100% (677/677), done. Writing objects: 100% (1058/1058), 148.85 KiB, done. Total 1058 (delta 590), reused 602 (delta 378) To https://github.com/YOUR-USERNAME/YOUR-REPOSITORY.git + 48dc599...051452f master -> master (forced update) In order to remove the sensitive file from your tagged releases, you'll also need to force-push against your Git tags: git push origin --force --tags Counting objects: 321, done. Delta compression using up to 8 threads. Compressing objects: 100% (166/166), done. Writing objects: 100% (321/321), 331.74 KiB | 0 bytes/s, done. Total 321 (delta 124), reused 269 (delta 108) To https://github.com/YOUR-USERNAME/YOUR-REPOSITORY.git + 48dc599...051452f master -> master (forced update) Tell your collaborators to rebase, not merge, any branches they created off of your old (tainted) repository history. One merge commit could reintroduce some or all of the tainted history that you just went to the trouble of purging. After some time has passed and you're confident that git filter-branch had no unintended side effects, you can force all objects in your local repository to be dereferenced and garbage collected with the following commands (using Git 1.8.5 or newer): git for-each-ref --format='delete %(refname)' refs/original | git update-ref --stdin git reflog expire --expire=now --all git gc --prune=now Counting objects: 2437, done. Delta compression using up to 4 threads. Compressing objects: 100% (1378/1378), done. Writing objects: 100% (2437/2437), done. Total 2437 (delta 1461), reused 1802 (delta 1048) Note: You can also achieve this by pushing your filtered history to a new or empty repository and then making a fresh clone from GitHub. Avoiding accidental commits in the future There are a few simple tricks to avoid committing things you don't want committed: Use a visual program like GitHub Desktop or gitk to commit changes. Visual programs generally make it easier to see exactly which files will be added, deleted, and modified with each commit. Avoid the catch-all commands git add . and git commit -a on the command line—use git add filename and git rm filename to individually stage files, instead. Use git add --interactive to individually review and stage changes within each file. Use git diff --cached to review the changes that you have staged for commit. This is the exact diff that git commit will produce as long as you don't use the -a flag. Further reading git filter-branch main page Pro Git: Git Tools - Rewriting History Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support About anonymized image URLs - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Authenticating to GitHub / About anonymized image URLs About anonymized image URLs mac windows linux all If you upload an image to GitHub, the URL of the image will be modified so your information is not trackable. To host your images, GitHub uses the open-source project Camo. Camo generates an anonymous URL proxy for each image that starts with https://camo.githubusercontent.com/ and hides your browser details and related information from other users. Anyone who receives your anonymized image URL, directly or indirectly, may view your image. To keep sensitive images private, restrict them to a private network or a server that requires authentication instead of using Camo. Troubleshooting issues with Camo In rare circumstances, images that are processed through Camo might not appear on GitHub. Here are some steps you can take to determine where the problem lies. Windows users will either need to use the Git Powershell (which is installed alongside GitHub Desktop) or download curl for Windows. An image is not showing up If an image is showing up in your browser but not on GitHub, you can try requesting the image locally. Open TerminalTerminalGit Bash. Request the image using curl. curl -i https://www.my-server.com/images/some-image.png -o /dev/null HTTP/1.1 200 OK Date: Fri, 06 Jun 2014 07:27:43 GMT Expires: Sun, 06 Jul 2014 07:27:43 GMT Content-Type: image/x-png Server: Google Frontend Content-Length: 6507 Check the value of Content-Type. In this case, it's image/x-png. Check that content type against the list of types supported by Camo. If your content type is not supported by Camo, you can try several actions: If you own the server that's hosting the image, modify it so that it returns a correct content type for images. If you're using an external service for hosting images, contact support for that service. Make a pull request to Camo to add your content type to the list. An image that changed recently is not updating If you changed an image recently and it's showing up in your browser but not GitHub, you can try resetting the cache of the image. Open TerminalTerminalGit Bash. Request the image using curl. curl -i https://www.my-server.com/images/some-image.png -o /dev/null HTTP/1.1 200 OK Expires: Fri, 01 Jan 1984 00:00:00 GMT Content-Type: image/png Content-Length: 2339 Server: Jetty(8.y.z-SNAPSHOT) Check the value of Cache-Control. In this example, there's no Cache-Control. In that case: If you own the server that's hosting the image, modify it so that it returns a Cache-Control of no-cache for images. If you're using an external service for hosting images, contact support for that service. If Cache-Control is set to no-cache, please contact GitHub Support to resolve the problem. Removing an image from Camo's cache Purging the cache forces every GitHub user to re-request the image, so you should use it very sparingly and only in the event that the above steps did not work. Open TerminalTerminalGit Bash. Purge the image using curl -X PURGE on the Camo URL. curl -X PURGE https://camo.githubusercontent.com/4d04abe0044d94fefcf9af2133223.... {"status": "ok", "id": "216-8675309-1008701"} Viewing images on private networks If an image is being served from a private network or from a server that requires authentication, it can't be viewed by GitHub. In fact, it can't be viewed by any user without asking them to log into the server. To fix this, please move the image to a service that is publicly available. Further reading "Proxying user images" on The GitHub Blog Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support About GitHub's IP addresses - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Authenticating to GitHub / About GitHub's IP addresses About GitHub's IP addresses mac windows linux all GitHub serves applications from multiple IP address ranges, which are available using the API. You can retrieve a list of GitHub's IP addresses from the meta API endpoint. For more information, see "Meta" in the GitHub Developer documentation. These ranges are in CIDR notation. You can use an online conversion tool such as this CIDR / VLSM Supernet Calculator to convert from CIDR notation to IP address ranges. We make changes to our IP addresses from time to time, and will keep this API up to date. We do not recommend whitelisting by IP address, however if you use these IP ranges we strongly encourage regular monitoring of our API. For applications to function, you must allow TCP ports 22, 80, 443, and 9418 via our IP ranges for github.com. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support GitHub's SSH key fingerprints - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Authenticating to GitHub / GitHub's SSH key fingerprints GitHub's SSH key fingerprints mac windows linux all Public key fingerprints can be used to validate a connection to a remote server. These are GitHub's public key fingerprints (in hexadecimal format): 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48 (RSA) ad:1c:08:a4:40:e3:6f:9c:f5:66:26:5d:4b:33:5d:8c (DSA) These are the SHA256 hashes shown in OpenSSH 6.8 and newer (in base64 format): SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8 (RSA) SHA256:br9IjFspm1vxR3iA35FWE+4VTyz1hYVLIE2t1/CeyWQ (DSA) Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Sudo mode - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Authenticating to GitHub / Sudo mode Sudo mode mac windows linux all GitHub asks you for your password before you can modify your email address, authorize third-party applications, or add new public keys, or initiate other sudo-protected actions. After you've performed a sudo-protected action, you'll only be asked to re-authenticate again after a few hours of inactivity. Every sudo-protected action resets this timer. Further reading Unix sudo command Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Preventing unauthorized access - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Authenticating to GitHub / Preventing unauthorized access Preventing unauthorized access mac windows linux all You may be alerted to a security incident in the media, such as the discovery of the Heartbleed bug, or your computer could be stolen while you're signed in to GitHub. In such cases, changing your password prevents any unintended future access to your account and projects. GitHub requires a password to perform sensitive actions, such as adding new SSH keys, authorizing applications, or modifying team members. After changing your password, you should perform these actions to make sure that your account is secure: Enable two-factor authentication on your account so that access requires more than just a password. Review your SSH keys, deploy keys, and authorized integrations and revoke unauthorized or unfamiliar access in your SSH and Applications settings. Verify all your email addresses. If an attacker added their email address to your account, it could allow them to force an unintended password reset. Review your account's security history. This provides an overview on various configurations made to your repositories. For example, you can ensure that no private repositories were turned public, or that no repositories were transferred. Review the service hooks on your repositories. Service hooks could allow an attacker to intercept pushes made to your repository. Make sure that no new deploy keys were created. This could enable outside servers access to your projects. Review recent commits made to your repositories. Review the list of collaborators for each repository. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Securing your account with two-factor authentication (2FA) - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Authenticating to GitHub / Securing your account with two-factor authentication (2FA) Securing your account with two-factor authentication (2FA) mac windows linux all You can set up your GitHub account to require an authentication code in addition to your password when you sign in. About Two-Factor Authentication Two-factor authentication, or 2FA, is a way of logging into websites that requires more than just a password. Using a password to log into a website is susceptible to security threats, because it represents a single piece of information a malicious person needs to acquire. The added security that 2FA provides is requiring additional information to sign in. Configuring two-factor authentication via a TOTP mobile app A Time-based One-Time Password (TOTP) application automatically generates an authentication code that changes after a certain period of time. Configuring two-factor authentication via FIDO U2F After you configure 2FA via a TOTP mobile app or via SMS, you can add a security key that supports the FIDO U2F standard to use for two-factor authentication on GitHub. Configuring two-factor authentication via text message If you're unable to authenticate using a TOTP mobile app, you can authenticate using SMS messages. You can also provide a second number for a fallback device. If you lose access to both your primary device and your recovery codes, a backup SMS number can get you back in to your account. Downloading your two-factor authentication recovery codes After successfully setting up two-factor authentication via a TOTP mobile application or text message, the Two-factor recovery codes page lists your valid recovery codes. Setting a fallback authentication number You can provide a second number for a fallback device. If you lose access to both your primary device and your recovery codes, a backup SMS number can get you back in to your account. Providing your 2FA authentication code With 2FA enabled, you'll be asked to provide your 2FA authentication code, as well as your password, when you access GitHub. Authenticating to GitHub using FIDO U2F via NFC On your Android phone, you can use a FIDO U2F compatible security key and Google Authenticator to securely sign into your GitHub account with Near Field Communication (NFC). Changing two-factor authentication delivery methods for your mobile device You can always switch between receiving authentication codes through a text message or a mobile application. Recovering your account if you lost your 2FA credentials If you've lost access to your account after enabling two-factor authentication, GitHub can't help you gain access again. Having access to your recovery codes in a secure place, or establishing a secondary mobile phone number for recovery, will get you back into your account. Countries where SMS authentication is supported Because of delivery success rates, GitHub only supports two-factor authentication via SMS for certain countries. Disabling two-factor authentication for your personal account If you disable two-factor authentication for your personal account, you may lose access to organizations you belong to. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support About Two-Factor Authentication - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Authenticating to GitHub / About Two-Factor Authentication About Two-Factor Authentication mac windows linux all Two-factor authentication, or 2FA, is a way of logging into websites that requires more than just a password. Using a password to log into a website is susceptible to security threats, because it represents a single piece of information a malicious person needs to acquire. The added security that 2FA provides is requiring additional information to sign in. In GitHub's case, this additional information is an authentication code that's generated by an application on your smartphone or sent as a text message (SMS). After 2FA is enabled, GitHub generates an authentication code any time someone attempts to sign into your GitHub account. The only way someone can sign into your account is if they know both your password and have access to the authentication code on your phone. We strongly urge you to turn on 2FA for the safety of your account, not only on GitHub, but on other websites that support it. You can use 2FA to access GitHub via: The GitHub website The GitHub API GitHub Desktop Organization owners can require that organization members, outside collaborators, and billing managers use two-factor authentication to secure their personal accounts. For more information, see "Requiring two-factor authentication in your organization." Warning: For security reasons, GitHub Support may not be able to restore access to accounts with two-factor authentication enabled if you lose your phone, don't have access to your recovery codes, or don't have an account recovery token stored. For more information, see "Adding a fallback authentication method with Recover Accounts Elsewhere." Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Configuring two-factor authentication via a TOTP mobile app - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Authenticating to GitHub / Configuring two-factor authentication via a TOTP mobile app Configuring two-factor authentication via a TOTP mobile app mac windows linux all A Time-based One-Time Password (TOTP) application automatically generates an authentication code that changes after a certain period of time. We strongly recommend using a TOTP application to configure 2FA. TOTP applications are more reliable than SMS, especially for locations outside the US. Tip: To configure authentication via TOTP on multiple devices, during setup, scan the QR code using each device at the same time. If 2FA is already enabled and you want to add another device, you must re-configure 2FA from your security settings. Warning for users in organizations that require two-factor authentication: If you're a member, billing manager, or outside collaborator to a private repository of an organization that requires two-factor authentication, you must leave the organization before you can disable 2FA on GitHub. If you disable 2FA you will automatically lose access to the organization and any private forks you have of the organization's private repositories. To regain access to the organization and your forks, re-enable two-factor authentication and contact an organization owner. Download one of these apps. For Android, iOS, and Blackberry: Google Authenticator For Android and iOS: Duo Mobile For Windows Phone: Authenticator In the upper-right corner of any page, click your profile photo, then click Settings. In the user settings sidebar, click Security. Under Two-factor authentication, click Set up two-factor authentication. On the Two-factor authentication page, click Set up using an app. On the Enable two-factor authentication page, do one of the following: Scan the QR code with your mobile device's app. After scanning, the app will display a six-digit code that you can enter on GitHub. If you can't use a barcode, click enter this code to see a code you can copy and manually enter on GitHub instead. If you're using Microsoft Authenticator, you'll need to use this method. The TOTP mobile application will save your GitHub account and generate a new authentication code every few seconds. On GitHub, on the 2FA page, type the code and click Continue. To enable two-factor authentication you must save your two-factor recovery codes in a safe place, such as a password manager, by clicking Download, Print, or Copy. Your recovery codes will help get you back into your account if you've lost access. After saving your two-factor recovery codes in a safe place, click Enable two-factor authentication. After 2FA has been enabled and you've saved your recovery codes, we recommend you sign out and back in to your account. In case of problems, such as a forgotten password or typo in your email address, you can use recovery codes to access your account and correct the problem. Further reading "About two-factor authentication" "Creating a personal access token for command line use" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Configuring two-factor authentication via FIDO U2F - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Authenticating to GitHub / Configuring two-factor authentication via FIDO U2F Configuring two-factor authentication via FIDO U2F mac windows linux all After you configure 2FA via a TOTP mobile app or via SMS, you can add a security key that supports the FIDO U2F standard to use for two-factor authentication on GitHub. Note: FIDO U2F authentication is currently only available for the Chrome browser. Warning for users in organizations that require two-factor authentication: If you're a member, billing manager, or outside collaborator to a private repository of an organization that requires two-factor authentication, you must leave the organization before you can disable 2FA on GitHub. If you disable 2FA you will automatically lose access to the organization and any private forks you have of the organization's private repositories. To regain access to the organization and your forks, re-enable two-factor authentication and contact an organization owner. You must have already configured 2FA via a TOTP mobile app or via SMS. Ensure that you have a FIDO U2F compatible security key inserted into your computer. In the upper-right corner of any page, click your profile photo, then click Settings. In the user settings sidebar, click Security. Under two-factor authentication, click Edit. Under Security keys, click Register new device. Type a nickname for the security key, then click Add. When prompted, touch your security key to have it authenticate against GitHub. If you're authenticating to GitHub on an Android phone, you can use your FIDO U2F compatible security key and Google Authenticator to sign into your account with Near Field Communication (NFC). Download your recovery codes and save them in a safe place, such as a password manager. Your recovery codes are to be used in the event you lose access to your account. After 2FA has been enabled and you've saved your recovery codes, we recommend you sign out and back in to your account. In case of problems, such as a forgotten password or typo in your email address, you can use recovery codes to access your account and correct the problem. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Configuring two-factor authentication via text message - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Authenticating to GitHub / Configuring two-factor authentication via text message Configuring two-factor authentication via text message mac windows linux all If you're unable to authenticate using a TOTP mobile app, you can authenticate using SMS messages. You can also provide a second number for a fallback device. If you lose access to both your primary device and your recovery codes, a backup SMS number can get you back in to your account. Before using this method, be sure that you can receive text messages. Carrier rates may apply. Warning for non-US Numbers: GitHub doesn't support sending SMS messages to every country. Before configuring authentication via text message, review our list of countries where GitHub supports authentication via SMS. We strongly recommend using a TOTP application for two-factor authentication instead of SMS. Warning for users in organizations that require two-factor authentication: If you're a member, billing manager, or outside collaborator to a private repository of an organization that requires two-factor authentication, you must leave the organization before you can disable 2FA on GitHub. If you disable 2FA you will automatically lose access to the organization and any private forks you have of the organization's private repositories. To regain access to the organization and your forks, re-enable two-factor authentication and contact an organization owner. In the upper-right corner of any page, click your profile photo, then click Settings. In the user settings sidebar, click Security. Under Two-factor authentication, click Set up two-factor authentication. On the Two-factor authentication page, click Set up using SMS. Select your country code and type your mobile phone number, including area code. When your information is correct, click Send authentication code. You'll receive a text message with a security code. Type the code on the Two-factor authentication page, and click Continue. To enable two-factor authentication you must save your two-factor recovery codes in a safe place, such as a password manager, by clicking Download, Print, or Copy. Your recovery codes will help get you back into your account if you've lost access. After saving your two-factor recovery codes in a safe place, click Enable two-factor authentication. After 2FA has been enabled and you've saved your recovery codes, we recommend you sign out and back in to your account. In case of problems, such as a forgotten password or typo in your email address, you can use recovery codes to access your account and correct the problem. Further reading "About two-factor authentication" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Downloading your two-factor authentication recovery codes - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Authenticating to GitHub / Downloading your two-factor authentication recovery codes Downloading your two-factor authentication recovery codes mac windows linux all After successfully setting up two-factor authentication via a TOTP mobile application or text message, the Two-factor recovery codes page lists your valid recovery codes. Treat your recovery codes with the same level of attention as you would your password! They should not be shared or distributed. We recommend saving them with a password manager such as LastPass, 1Password, or Keeper. In the upper-right corner of any page, click your profile photo, then click Settings. In the user settings sidebar, click Security. Under Two-Factor Authentication, click Save your recovery codes. Save your recovery codes by clicking Download, Print, or Copy. Your recovery codes will help get you back into your account if you've lost access. If you generate new recovery codes or disable and re-enable 2FA, the recovery codes displayed on the "Save your two-factor recovery codes" page are automatically updated. Once you use a recovery code to regain access to your account, it cannot be reused. If you've used all 16 recovery codes, click Generate new recovery codes to recreate another batch of recovery codes. Further reading "Recovering your account if you lose your two-factor authentication credentials" "About two-factor authentication" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Setting a fallback authentication number - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Authenticating to GitHub / Setting a fallback authentication number Setting a fallback authentication number mac windows linux all You can provide a second number for a fallback device. If you lose access to both your primary device and your recovery codes, a backup SMS number can get you back in to your account. This option is available to you regardless of whether you've configured authentication via text message or TOTP mobile application. Warning: This method is a last resort. SMS messages are only supported for certain countries outside the US; for the list, see "Countries where SMS authentication is supported". For this reason, you should download and safely store your recovery codes. In the upper-right corner of any page, click your profile photo, then click Settings. In the user settings sidebar, click Security. Under two-factor authentication, click Edit. In the Fallback SMS number section, select your country code and type your mobile phone number, including area code. When your information is correct, click Set fallback. After setup, the backup device will receive a confirmation SMS. Further reading "About two-factor authentication" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Providing your 2FA authentication code - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Authenticating to GitHub / Providing your 2FA authentication code Providing your 2FA authentication code mac windows linux all With 2FA enabled, you'll be asked to provide your 2FA authentication code, as well as your password, when you access GitHub. "Depending on how you configured two-factor authentication, your authentication code will either be generated by an application or delivered to your phone via text message. You can choose to switch between delivery methods at any time." GitHub will only ask you to provide your 2FA authentication code again if you've logged out, are using a new device, or your session expires. If your authentication fails several times, you may wish to synchronize your phone's clock with your mobile provider. Often, this involves checking the "Set automatically" option on your phone's clock, rather than providing your own time zone. Generating a code through a TOTP application If you chose to set up two-factor authentication using a TOTP application on your smartphone, you can generate an authentication code for GitHub at any time. After entering your username and password, you'll be asked for your "Two-factor authentication code". In most cases, just launching the application will generate a new code. You should refer to your application's documentation for specific instructions. You can then enter this code to gain access to your account. If you delete the mobile application after configuring two-factor authentication, you'll need to provide your recovery code to get access to your account. Using a FIDO U2F compatible security key Note: FIDO U2F authentication is currently only available for the Chrome browser. If you set up two-factor authentication via a security key, you can authenticate to GitHub on your computer or compatible Android phone with Near Field Communication (NFC) support instead of using codes generated by a TOTP application or text message. For specific instructions for authenticating with a security key, see the documentation for your device. Authentication with a security key is secondary to authentication with a TOTP application or a text message. You'll still need to set up 2FA using a TOTP application or a text message before being able to enable a security key. If you lose your hardware key, you'll still be able to use your phone's code to sign in. Receiving a text message If you set up two-factor authentication via text messages, GitHub will send you a text message with your authentication code. After entering your username and password, you'll be asked for your "Two-factor authentication code." This will automatically be delivered to your phone via text message. You can then enter this code to gain access to your account. When you'll be asked for a 2FA code After 2FA is enabled there are several scenarios where you'll be asked to provide your 2FA code: Through the web If you sign into GitHub through the website, you'll be provided with the following prompt asking for your 2FA code: If you're providing a recovery code you previously downloaded from GitHub, you will need to click the Enter a two-factor recovery code link and follow the instructions for entering your recovery code instead of entering it in the Authentication Code box. Through the API With 2FA enabled, you'll need to pass along a special header containing your 2FA authentication code. More information can be found in the GitHub Developer documentation. Through GitHub Desktop After setting up 2FA and reauthenticating to GitHub, you'll be provided with the following prompt asking for your 2FA code: Depending on how you set up your account, you'll be presented with a dialog asking you to enter your 2FA code. If you set up 2FA through SMS, we'll text it to you. Otherwise, you can generate one from your TOTP application. Through GitHub Desktop After setting up 2FA and reauthenticating to GitHub, you'll be provided with the following prompt asking for your 2FA code: Depending on how you set up your account, you'll be presented with a dialog asking you to enter your 2FA code. If you set up 2FA through SMS, we'll text it to you. Otherwise, you can generate one from your TOTP application. When you'll be asked for a personal access token as a password After 2FA is enabled there are a couple of scenarios where you need to enter a personal access token instead of a 2FA code and your GitHub password. Through the command line You must create a personal access token to use as a password when authenticating to GitHub on the command line using HTTPS URLs. For example, when you access a repository using Git on the command line using commands like git clone, git fetch, git pull or git push with HTTPS URLs, you must provide your GitHub username and your personal access token when prompted for a username and password. The command line prompt won't specify that you should enter your personal access token when it asks for your password. 2FA and Subversion (svn command line, tortoise svn, etc) When you access a repository via Subversion, you must provide a personal access token instead of entering your password. When you'll be asked for your SSH key passphrase as a password If you have authenticated to GitHub on the command line using SSH URLs you must enter an SSH key passphrase instead of a 2FA code and your GitHub password after 2FA is enabled. For example, when you access a repository using Git on the command line using commands like git clone, git fetch, git pull or git push with SSH URLs, you must provide your SSH key passphrase when prompted for a password. The command line prompt won't specify that you should enter your SSH key passphrase when it asks for your password. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Authenticating to GitHub using FIDO U2F via NFC - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Authenticating to GitHub / Authenticating to GitHub using FIDO U2F via NFC Authenticating to GitHub using FIDO U2F via NFC mac windows linux all On your Android phone, you can use a FIDO U2F compatible security key and Google Authenticator to securely sign into your GitHub account with Near Field Communication (NFC). In a browser on your Android phone, navigate to www.github.com. Tap > Sign in. Enter your username and password, then click Sign in. When you see the Google Authenticator page, touch your U2F device to the back of the phone. It will authenticate and sign you into your account. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Changing two-factor authentication delivery methods for your mobile device - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Authenticating to GitHub / Changing two-factor authentication delivery methods for your mobile device Changing two-factor authentication delivery methods for your mobile device mac windows linux all You can always switch between receiving authentication codes through a text message or a mobile application. Note: Changing your two-factor authentication method invalidates your current two-factor method setup. However, this doesn't affect your recovery codes or fallback SMS configuration. You can update your recovery codes or fallback SMS configuration on the two-factor authentication settings page if desired. In the upper-right corner of any page, click your profile photo, then click Settings. In the user settings sidebar, click Security. Under two-factor authentication, click Edit. Under "Delivery options," click Reconfigure two-factor authentication. Decide whether to set up two-factor authentication using a TOTP mobile app or text message. To set up two-factor authentication using a TOTP mobile app, click Set up using an app. To set up two-factor authentication using text message (SMS), click Set up using SMS. Further reading "About two-factor authentication" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Recovering your account if you lost your 2FA credentials - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Authenticating to GitHub / Recovering your account if you lost your 2FA credentials Recovering your account if you lost your 2FA credentials mac windows linux all If you've lost access to your account after enabling two-factor authentication, GitHub can't help you gain access again. Having access to your recovery codes in a secure place, or establishing a secondary mobile phone number for recovery, will get you back into your account. Use one of your recovery codes to regain entry into your account. You may have saved these to a password manager, such as LastPass, 1Password, or Keeper. At the bottom of the 2FA dialog, click Enter a two-factor recovery code to proceed using your code. If you don't have access to your two-factor authentication methods or recovery codes and you've stored an account recovery token with Facebook using Recover Accounts Elsewhere, you may be able to use your token to regain access to your account. For more information, see "Authenticating with an account recovery token." Further reading "About Two-Factor Authentication" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Countries where SMS authentication is supported - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Authenticating to GitHub / Countries where SMS authentication is supported Countries where SMS authentication is supported mac windows linux all Because of delivery success rates, GitHub only supports two-factor authentication via SMS for certain countries. If we don't support two-factor authentication via text message for your country of residence, you can set up authentication via a TOTP mobile application. Supported Countries for SMS Authentication If your country is not on this list, then we aren't currently able to reliably deliver text messages to your country. We update this list periodically. Aland Islands Algeria Angola Anguilla Australia Austria Bahamas Bahrain Bangladesh Belarus Belgium Benin Bolivia Bosnia and Herzegovina Brunei Bulgaria Burundi Cambodia Canada Cape Verde Cayman Islands Christmas Island Cocos Congo, Dem Rep Croatia Cyprus Czech Republic Denmark Dominica Dominican Republic Ecuador Equatorial Guinea Estonia Finland/Aland Islands France Gambia Georgia Germany Ghana Gibraltar Greece Guatemala Guyana Hungary Iceland Indonesia Iran Ireland Israel Italy Ivory Coast Jamaica Japan Jordan Kazakhstan Kuwait Latvia Libya Liechtenstein Lithuania Luxembourg Madagascar Malawi Malaysia Maldives Mali Malta Mauritius Mexico Monaco Montenegro Montserrat Mozambique Namibia Netherlands Netherlands Antilles New Zealand Nigeria Norway Philippines Poland Portugal Qatar Romania Russia Rwanda Senegal Serbia Seychelles Singapore Slovakia Slovenia South Africa South Korea Spain Sri Lanka St Lucia Sudan Sweden Switzerland Taiwan Tanzania Togo Trinidad and Tobago Turks and Caicos Islands Uganda Ukraine United Arab Emirates United Kingdom United States Uzbekistan Venezuela Further reading "About two-factor authentication" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Disabling two-factor authentication for your personal account - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Authenticating to GitHub / Disabling two-factor authentication for your personal account Disabling two-factor authentication for your personal account mac windows linux all If you disable two-factor authentication for your personal account, you may lose access to organizations you belong to. We strongly recommend using two-factor authentication to secure your account. If you need to disable 2FA, we recommend re-enabling it as soon as possible. Warning: If you're a member, billing manager, or outside collaborator to a public repository of an organization that requires two-factor authentication and you disable 2FA, you'll be automatically removed from the organization, and you'll lose your access to their repositories. To regain access to the organization, re-enable two-factor authentication and contact an organization owner. If your organization requires two-factor authentication and you're a member, owner, or an outside collaborator on a private repository of your organization, you must first leave your organization before you can disable two-factor authentication. To remove yourself from your organization: as an organization member or owner (but not the sole owner of the organization), see "Removing yourself from an organization." as an outside collaborator, ask an organization owner or repository administrator to remove you from the organization's repositories. In the upper-right corner of any page, click your profile photo, then click Settings. In the user settings sidebar, click Security. Under two-factor authentication, click Edit. Click Disable two-factor authentication. Further reading "Securing your account with two-factor authentication (2FA)" "Removing yourself from an organization" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Adding a fallback authentication method with Recover Accounts Elsewhere - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Authenticating to GitHub / Adding a fallback authentication method with Recover Accounts Elsewhere Adding a fallback authentication method with Recover Accounts Elsewhere mac windows linux all You can generate an extra authentication credential for your account and store it with a partner recovery provider. About Recover Accounts Elsewhere With Recover Accounts Elsewhere, you can add an extra security factor to your GitHub account in case you lose access to your two-factor authentication method or recovery codes. Generating and storing an account recovery token You can generate an account recovery token and store it with a partner recovery provider. Authenticating with an account recovery token If you lose access to the two-factor authentication methods for your GitHub account, you can retrieve your account recovery token from a partner recovery provider and ask GitHub Support to review it. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support About Recover Accounts Elsewhere - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Authenticating to GitHub / About Recover Accounts Elsewhere About Recover Accounts Elsewhere mac windows linux all With Recover Accounts Elsewhere, you can add an extra security factor to your GitHub account in case you lose access to your two-factor authentication method or recovery codes. Recover Accounts Elsewhere lets you associate your GitHub with your Facebook account. You can store an authentication credential in the form of an account recovery token for your GitHub account with Facebook. If you lose access to your GitHub account because you no longer have access to your two-factor authentication method or recovery codes, you can retrieve your account recovery token from the recovery provider to help prove that you're the owner of your GitHub account. After you retrieve your token, GitHub Support may be able to disable two-factor authentication for your account. Then, you can provide or reset your password to regain access to your account. Your account recovery token is valid for a year or until you use it. If you retrieve your token or your token expires, you should generate and store a new token. When you generate or retrieve an account recovery token, an event is added to your account's audit log. For more information, see "Reviewing your security log." Further reading "Generating and storing an account recovery token" "Authenticating with an account recovery token" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Generating and storing an account recovery token - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Authenticating to GitHub / Generating and storing an account recovery token Generating and storing an account recovery token mac windows linux all You can generate an account recovery token and store it with a partner recovery provider. Sign in to your Facebook account, then return to GitHub. In the upper-right corner of any page, click your profile photo, then click Settings. In the user settings sidebar, click Security. To generate a new token, under "Recovery tokens," click Store new token. Read the information about account recovery tokens, then click Connect with https://www.facebook.com. After you're redirected to Facebook, read the information about turning on account recovery with Facebook before you click Save as [YOUR NAME]. (If you save multiple tokens within a short period of time, Facebook may skip this confirmation step after you save your first token.) Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Authenticating with an account recovery token - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Authenticating to GitHub / Authenticating with an account recovery token Authenticating with an account recovery token mac windows linux all If you lose access to the two-factor authentication methods for your GitHub account, you can retrieve your account recovery token from a partner recovery provider and ask GitHub Support to review it. Warnings: Before you retrieve an account recovery token, you should try using your two-factor authentication codes or your two-factor authentication recovery codes to regain access to your account. For more information, see "Recovering your account if you lost your 2FA credentials." If you're unable to regain access to your account, you should contact GitHub Support before retrieving your account recovery token. On Facebook, navigate to your Security Settings, then click Recover Accounts Elsewhere. Click the recovery token associated with your GitHub account. To redeem your account recovery token, click Recover This Account. A new window will open, returning you to GitHub. Contact GitHub Support to let them know that your account recovery token is ready for review. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Authenticating to a GitHub organization with SAML single sign-on - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Authenticating to GitHub / Authenticating to a GitHub organization with SAML single sign-on Authenticating to a GitHub organization with SAML single sign-on mac windows linux all You can authenticate to a GitHub organization with SAML single sign-on and view your active sessions. About authentication with SAML single sign-on You can access an organization that uses SAML single sign-on (SSO) by authenticating through an identity provider (IdP). To use the API or Git on the command line with an organization that enforces SAML SSO, you will need to use an authorized SSH key or an authorized personal access token over HTTPS. Authorizing an SSH key for use with a SAML single sign-on organization To use an SSH key with an organization that uses SAML single sign-on, you must first authorize the key. Authorizing a personal access token for use with a SAML single sign-on organization To use a personal access token with an organization that uses SAML single sign-on, you must first authorize the token. Viewing and managing your active SAML sessions You can view and revoke your active SAML sessions in your security settings. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support About authentication with SAML single sign-on - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Authenticating to GitHub / About authentication with SAML single sign-on About authentication with SAML single sign-on mac windows linux all You can access an organization that uses SAML single sign-on (SSO) by authenticating through an identity provider (IdP). To use the API or Git on the command line with an organization that enforces SAML SSO, you will need to use an authorized SSH key or an authorized personal access token over HTTPS. SAML SSO helps you maintain control of your identity and  contributions, while giving organizations a centralized and secure way of  controlling access to their resources on GitHub. When you join an organization that uses SAML SSO, you sign in through the organization's IdP and your existing GitHub account is linked to an external identity that belongs to the organization. This external identity is separate from, but related to, your GitHub account and is used to control access to the organization's resources like  repositories, issues, and pull requests. If you have an active SAML session in your browser, you are automatically authorized when you access a GitHub organization that uses SAML SSO. If you don't have an active SAML session in your browser, you must enter the credentials for your SAML identity provider before you can access the organization. We offer limited support for all identity providers that implement the SAML 2.0 standard. We officially support these identity providers that have been internally tested: Azure Active Directory (Azure AD) Okta OneLogin PingOne Shibboleth Note: Outside collaborators aren't required to have an external (SAML) identity to access an organization that uses SAML SSO. You must periodically log in to your SAML provider to authenticate and gain access to the organization's resources on GitHub. The duration of this login period is specified by your IdP and is generally 24 hours. This periodic login requirement limits the length of access and requires you to re-identify yourself to continue. You can view and manage your active SAML sessions in your security settings. For more information, see "Viewing and managing your active SAML sessions." To use the API or Git on the command line to access protected content in an organization that uses SAML SSO, you will need to use an authorized personal access token over HTTPS or an authorized SSH key. OAuth App access tokens are authorized by default. If you don't have a personal access token or an SSH key, you can create a personal access token for the command line or generate a new SSH key. For more information, see: "Creating a personal access token for the command line" "Generating a new SSH key and adding it to the ssh-agent" To use a new or existing personal access token or SSH key with an organization that enforces SAML SSO, you will need to authorize the token or authorize the SSH key for use with a SAML SSO organization. For more information, see: "Authorizing a personal access token for use with a SAML single sign-on organization" "Authorizing an SSH key for use with a SAML single sign-on organization" Further reading "Creating a personal access token for the command line" "Authorizing a personal access token for use with a SAML single sign-on organization" "Authorizing an SSH key for use with a SAML single sign-on organization" "Viewing and managing your active SAML sessions" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Authorizing an SSH key for use with a SAML single sign-on organization - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Authenticating to GitHub / Authorizing an SSH key for use with a SAML single sign-on organization Authorizing an SSH key for use with a SAML single sign-on organization mac windows linux all To use an SSH key with an organization that uses SAML single sign-on, you must first authorize the key. You can authorize an existing SSH key, or create a new SSH key and then authorize it. For more information about creating a new SSH key, see "Generating a new SSH key and adding it to the ssh-agent." Note: If your SSH key authorization is revoked by an organization, you will not be able to reauthorize the same key. You will need to create a new SSH key and authorize it. For more information about creating a new SSH key, see "Generating a new SSH key and adding it to the ssh-agent." In the upper-right corner of any page, click your profile photo, then click Settings. In the user settings sidebar, click SSH and GPG keys. Next to the SSH key you'd like to authorize, click SSO. Find the organization you'd like to authorize the SSH key for. Click Authorize. Further reading "Checking for existing SSH keys" "About authentication with SAML single sign-on" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Authorizing a personal access token for use with a SAML single sign-on organization - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Authenticating to GitHub / Authorizing a personal access token for use with a SAML single sign-on organization Authorizing a personal access token for use with a SAML single sign-on organization mac windows linux all To use a personal access token with an organization that uses SAML single sign-on, you must first authorize the token. You can authorize an existing personal access token, or create a new personal access token and then authorize it. In the upper-right corner of any page, click your profile photo, then click Settings. In the left sidebar, click Developer settings. In the left sidebar, click Personal access tokens. Next to the token you'd like to authorize, click SSO. Find the organization you'd like to authorize the access token for. Click Authorize. Further reading "Creating a personal access token for the command line" "About authentication with SAML single sign-on" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Viewing and managing your active SAML sessions - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Authenticating to GitHub / Viewing and managing your active SAML sessions Viewing and managing your active SAML sessions mac windows linux all You can view and revoke your active SAML sessions in your security settings. In the upper-right corner of any page, click your profile photo, then click Settings. In the user settings sidebar, click Security. Under "Sessions," your active SAML sessions are displayed below the information about your current browser session. To expand the session details, click .... To revoke a session, click Revoke. Note: When you revoke a session, you remove your SAML authentication to that organization. To access the organization again, you will need to single sign-on through your identity provider. For more information, see "About authentication with SAML SSO." Further reading "About authentication with SAML SSO" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Connecting to GitHub with SSH - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Authenticating to GitHub / Connecting to GitHub with SSH Connecting to GitHub with SSH mac windows linux all You can connect to GitHub using SSH. About SSH Using the SSH protocol, you can connect and authenticate to remote servers and services. With SSH keys, you can connect to GitHub without supplying your username or password at each visit. Checking for existing SSH keys Before you generate an SSH key, you can check to see if you have any existing SSH keys. Generating a new SSH key and adding it to the ssh-agent After you've checked for existing SSH keys, you can generate a new SSH key to use for authentication, then add it to the ssh-agent. Adding a new SSH key to your GitHub account To configure your GitHub account to use your new (or existing) SSH key, you'll also need to add it to your GitHub account. Testing your SSH connection After you've set up your SSH key and added it to your GitHub account, you can test your connection. Working with SSH key passphrases You can secure your SSH keys and configure an authentication agent so that you won't have to reenter your passphrase every time you use your SSH keys. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support About SSH - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Authenticating to GitHub / About SSH About SSH mac windows linux all Using the SSH protocol, you can connect and authenticate to remote servers and services. With SSH keys, you can connect to GitHub without supplying your username or password at each visit. When you set up SSH, you'll generate an SSH key and add it to the ssh-agent and then add the key to your GitHub account. Adding the SSH key to the ssh-agent ensures that your SSH key has an extra layer of security through the use of a passphrase. For more information, see "Working with SSH key passphrases." To use your SSH key with a repository owned by an organization that uses SAML single sign-on, you'll need to authorize it first. For more information, see "Authorizing an SSH key for use with a SAML single sign-on organization." We recommend that you regularly review your SSH keys list and revoke any that are invalid or have been compromised. Further reading "Checking for existing SSH keys" "Testing your SSH connection" "Working with SSH key passphrases" "Troubleshooting SSH" "Authorizing an SSH key for use with a SAML single sign-on organization" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Checking for existing SSH keys - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Authenticating to GitHub / Checking for existing SSH keys Checking for existing SSH keys mac windows linux all Before you generate an SSH key, you can check to see if you have any existing SSH keys. Note: DSA keys were deprecated in OpenSSH 7.0. If your operating system uses OpenSSH, you'll need to use an alternate type of key when setting up SSH, such as an RSA key. For instance, if your operating system is MacOS Sierra, you can set up SSH using an RSA key. Open TerminalTerminalGit Bash. Enter ls -al ~/.ssh to see if existing SSH keys are present: ls -al ~/.ssh # Lists the files in your .ssh directory, if they exist Check the directory listing to see if you already have a public SSH key. By default, the filenames of the public keys are one of the following: id_dsa.pub id_ecdsa.pub id_ed25519.pub id_rsa.pub If you don't have an existing public and private key pair, or don't wish to use any that are available to connect to GitHub, then generate a new SSH key. If you see an existing public and private key pair listed (for example id_rsa.pub and id_rsa) that you would like to use to connect to GitHub, you can add your SSH key to the ssh-agent. Tip: If you receive an error that ~/.ssh doesn't exist, don't worry! We'll create it when we generate a new SSH key. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Generating a new SSH key and adding it to the ssh-agent - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Authenticating to GitHub / Generating a new SSH key and adding it to the ssh-agent Generating a new SSH key and adding it to the ssh-agent mac windows linux all After you've checked for existing SSH keys, you can generate a new SSH key to use for authentication, then add it to the ssh-agent. If you don't already have an SSH key, you must generate a new SSH key. If you're unsure whether you already have an SSH key, check for existing keys. If you don't want to reenter your passphrase every time you use your SSH key, you can add your key to the SSH agent, which manages your SSH keys and remembers your passphrase. Generating a new SSH key Open TerminalTerminalGit Bash. Paste the text below, substituting in your GitHub email address. ssh-keygen -t rsa -b 4096 -C "your_email@example.com" This creates a new ssh key, using the provided email as a label. Generating public/private rsa key pair. When you're prompted to "Enter a file in which to save the key," press Enter. This accepts the default file location. Enter a file in which to save the key (/Users/you/.ssh/id_rsa): [Press enter] Enter a file in which to save the key (/c/Users/you/.ssh/id_rsa):[Press enter] Enter a file in which to save the key (/home/you/.ssh/id_rsa): [Press enter] At the prompt, type a secure passphrase. For more information, see "Working with SSH key passphrases". Enter passphrase (empty for no passphrase): [Type a passphrase] Enter same passphrase again: [Type passphrase again] Adding your SSH key to the ssh-agent Before adding a new SSH key to the ssh-agent to manage your keys, you should have checked for existing SSH keys and generated a new SSH key. When adding your SSH key to the agent, use the default macOS ssh-add command, and not an application installed by macports, homebrew, or some other external source. Start the ssh-agent in the background. eval "$(ssh-agent -s)" Agent pid 59566 If you're using macOS Sierra 10.12.2 or later, you will need to modify your ~/.ssh/config file to automatically load keys into the ssh-agent and store passphrases in your keychain. Host * AddKeysToAgent yes UseKeychain yes IdentityFile ~/.ssh/id_rsa Add your SSH private key to the ssh-agent and store your passphrase in the keychain. If you created your key with a different name, or if you are adding an existing key that has a different name, replace id_rsa in the command with the name of your private key file. $ ssh-add -K ~/.ssh/id_rsa Add the SSH key to your GitHub account. If you have GitHub Desktop installed, you can use it to clone repositories and not deal with SSH keys. It also comes with the Git Bash tool, which is the preferred way of running git commands on Windows. Ensure the ssh-agent is running: If you are using the Git Shell that's installed with GitHub Desktop, the ssh-agent should be running. If you are using another terminal prompt, such as Git for Windows, you can use the "Auto-launching the ssh-agent" instructions in "Working with SSH key passphrases", or start it manually: # start the ssh-agent in the background eval $(ssh-agent -s) Agent pid 59566 Add your SSH private key to the ssh-agent. If you created your key with a different name, or if you are adding an existing key that has a different name, replace id_rsa in the command with the name of your private key file. ssh-add ~/.ssh/id_rsa Add the SSH key to your GitHub account. Start the ssh-agent in the background. eval "$(ssh-agent -s)" Agent pid 59566 Add your SSH private key to the ssh-agent. If you created your key with a different name, or if you are adding an existing key that has a different name, replace id_rsa in the command with the name of your private key file. ssh-add ~/.ssh/id_rsa Add the SSH key to your GitHub account. Further reading "About SSH" "Working with SSH key passphrases" "Authorizing an SSH key for use with a SAML single sign-on organization" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Adding a new SSH key to your GitHub account - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Authenticating to GitHub / Adding a new SSH key to your GitHub account Adding a new SSH key to your GitHub account mac windows linux all To configure your GitHub account to use your new (or existing) SSH key, you'll also need to add it to your GitHub account. Before adding a new SSH key to your GitHub account, you should have: Checked for existing SSH keys Generated a new SSH key and added it to the ssh-agent Note: DSA keys were deprecated in OpenSSH 7.0. If your operating system uses OpenSSH, you'll need to use an alternate type of key when setting up SSH, such as an RSA key. For instance, if your operating system is MacOS Sierra, you can set up SSH using an RSA key. Copy the SSH key to your clipboard. If your SSH key file has a different name than the example code, modify the filename to match your current setup. When copying your key, don't add any newlines or whitespace. $ pbcopy < ~/.ssh/id_rsa.pub # Copies the contents of the id_rsa.pub file to your clipboard Tip: If pbcopy isn't working, you can locate the hidden .ssh folder, open the file in your favorite text editor, and copy it to your clipboard. In the upper-right corner of any page, click your profile photo, then click Settings. In the user settings sidebar, click SSH and GPG keys. Click New SSH key or Add SSH key. In the "Title" field, add a descriptive label for the new key. For example, if you're using a personal Mac, you might call this key "Personal MacBook Air". Paste your key into the "Key" field. Click Add SSH key. If prompted, confirm your GitHub password. Copy the SSH key to your clipboard. If your SSH key file has a different name than the example code, modify the filename to match your current setup. When copying your key, don't add any newlines or whitespace. $ clip < ~/.ssh/id_rsa.pub # Copies the contents of the id_rsa.pub file to your clipboard Tip: If clip isn't working, you can locate the hidden .ssh folder, open the file in your favorite text editor, and copy it to your clipboard. In the upper-right corner of any page, click your profile photo, then click Settings. In the user settings sidebar, click SSH and GPG keys. Click New SSH key or Add SSH key. In the "Title" field, add a descriptive label for the new key. For example, if you're using a personal Mac, you might call this key "Personal MacBook Air". Paste your key into the "Key" field. Click Add SSH key. If prompted, confirm your GitHub password. Copy the SSH key to your clipboard. If your SSH key file has a different name than the example code, modify the filename to match your current setup. When copying your key, don't add any newlines or whitespace. $ sudo apt-get install xclip # Downloads and installs xclip. If you don't have `apt-get`, you might need to use another installer (like `yum`) $ xclip -sel clip < ~/.ssh/id_rsa.pub # Copies the contents of the id_rsa.pub file to your clipboard Tip: If xclip isn't working, you can locate the hidden .ssh folder, open the file in your favorite text editor, and copy it to your clipboard. In the upper-right corner of any page, click your profile photo, then click Settings. In the user settings sidebar, click SSH and GPG keys. Click New SSH key or Add SSH key. In the "Title" field, add a descriptive label for the new key. For example, if you're using a personal Mac, you might call this key "Personal MacBook Air". Paste your key into the "Key" field. Click Add SSH key. If prompted, confirm your GitHub password. Further reading "Authorizing an SSH key for use with a SAML single sign-on organization" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Testing your SSH connection - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Authenticating to GitHub / Testing your SSH connection Testing your SSH connection mac windows linux all After you've set up your SSH key and added it to your GitHub account, you can test your connection. Before testing your SSH connection, you should have: Checked for existing SSH keys Generated a new SSH key Added a new SSH key to your GitHub account When you test your connection, you'll need to authenticate this action using your password, which is the SSH key passphrase you created earlier. For more information on working with SSH key passphrases, see "Working with SSH key passphrases". Open TerminalTerminalGit Bash. Enter the following: ssh -T git@github.com # Attempts to ssh to GitHub You may see one of these warnings: The authenticity of host 'github.com (IP ADDRESS)' can't be established. RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48. Are you sure you want to continue connecting (yes/no)? The authenticity of host 'github.com (IP ADDRESS)' can't be established. RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8. Are you sure you want to continue connecting (yes/no)? Verify that the fingerprint in the message you see matches one of the messages in step 2, then type yes: Hi username! You've successfully authenticated, but GitHub does not provide shell access. You may see this error message: ... Agent admitted failure to sign using the key. debug1: No more authentication methods to try. Permission denied (publickey). This is a known problem with certain Linux distributions. For more information, see "Error: Agent admitted failure to sign". Verify that the resulting message contains your username. If you receive a "permission denied" message, see "Error: Permission denied (publickey)". Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Working with SSH key passphrases - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Authenticating to GitHub / Working with SSH key passphrases Working with SSH key passphrases mac windows linux all You can secure your SSH keys and configure an authentication agent so that you won't have to reenter your passphrase every time you use your SSH keys. With SSH keys, if someone gains access to your computer, they also gain access to every system that uses that key. To add an extra layer of security, you can add a passphrase to your SSH key. You can use ssh-agent to securely save your passphrase so you don't have to reenter it. Adding or changing a passphrase You can change the passphrase for an existing private key without regenerating the keypair by typing the following command: ssh-keygen -p # Start the SSH key creation process Enter file in which the key is (/Users/you/.ssh/id_rsa): [Hit enter] Key has comment '/Users/you/.ssh/id_rsa' Enter new passphrase (empty for no passphrase): [Type new passphrase] Enter same passphrase again: [One more time for luck] Your identification has been saved with the new passphrase. If your key already has a passphrase, you will be prompted to enter it before you can change to a new passphrase. Auto-launching ssh-agent on Git for Windows If you're using Git Shell that's installed with GitHub Desktop, you don't need to follow these steps. GitHub Desktop automatically launches ssh-agent for you. Otherwise, follow these steps to run ssh-agent automatically when you open bash or Git shell. Copy the following lines and paste them into your ~/.profile or ~/.bashrc file in Git shell: env=~/.ssh/agent.env agent_load_env () { test -f "$env" && . "$env" >| /dev/null ; } agent_start () { (umask 077; ssh-agent >| "$env") . "$env" >| /dev/null ; } agent_load_env # agent_run_state: 0=agent running w/ key; 1=agent w/o key; 2= agent not running agent_run_state=$(ssh-add -l >| /dev/null 2>&1; echo $?) if [ ! "$SSH_AUTH_SOCK" ] || [ $agent_run_state = 2 ]; then agent_start ssh-add elif [ "$SSH_AUTH_SOCK" ] && [ $agent_run_state = 1 ]; then ssh-add fi unset env If your private key is not stored in one of the default locations (~/.ssh/id_rsa or ~/.ssh/id_dsa), you'll need to tell your SSH authentication agent where to find it. To add your key to ssh-agent, type ssh-add ~/path/to/my_key. For more information, see "Generating a new SSH key and adding it to the ssh-agent" Tip: If you want ssh-agent to forget your key after some time, you can configure it to do so by running ssh-add -t <seconds>. Now, when you first run Git Bash, you are prompted for your passphrase: Initializing new SSH agent... succeeded Enter passphrase for /c/Users/you/.ssh/id_rsa: Identity added: /c/Users/you/.ssh/id_rsa (/c/Users/you/.ssh/id_rsa) Welcome to Git (version 1.6.0.2-preview20080923) > Run 'git help git' to display the help index. Run 'git help ' to display help for specific commands. The ssh-agent process will continue to run until you log out, shut down your computer, or kill the process. Saving your passphrase in the keychain On OS X Leopard through OS X El Capitan, these default private key files are handled automatically: .ssh/id_rsa .ssh/id_dsa .ssh/identity The first time you use your key, you will be prompted to enter your passphrase. If you choose to save the passphrase with your keychain, you won't have to enter it again. Otherwise, you can store your passphrase in the keychain when you add your key to the ssh-agent. For more information, see "Adding your SSH key to the ssh-agent." Further reading "About SSH" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Troubleshooting SSH - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Authenticating to GitHub / Troubleshooting SSH Troubleshooting SSH mac windows linux all When using SSH to connect and authenticate to GitHub, you may need to troubleshoot unexpected issues that may arise. Using SSH over the HTTPS port Sometimes, firewalls refuse to allow SSH connections entirely. If using HTTPS cloning with credential caching is not an option, you can attempt to clone using an SSH connection made over the HTTPS port. Most firewall rules should allow this, but proxy servers may interfere. Recovering your SSH key passphrase If you've lost your SSH key passphrase, depending on the operating system you use, you may either recover it or you may need to generate a new SSH key passphrase. Error: Permission denied (publickey) A "Permission denied" error means that the server rejected your connection. There could be several reasons why, and the most common examples are explained below. Error: Bad file number This error usually means you were unable to connect to the server. Often this is caused by firewalls and proxy servers. Error: Key already in use This error occurs when you try to add a key that's already been added to another account or repository. Error: Permission to user/repo denied to other/user This error usually means you were unable to connect to the server. Often this is caused by firewalls and proxy servers. Error: Agent admitted failure to sign In rare circumstances, connecting to GitHub via SSH on Linux produces the error "Agent admitted failure to sign using the key". Follow these steps to resolve the problem. Error: SSL certificate problem, verify that the CA cert is OK This error means your CA root certificate is out of date. If your CA root certificate, you won't be able to push or pull from GitHub repositories. Error: We're doing an SSH key audit This error means the SSH key you're using to perform a Git operation is unverified. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Using SSH over the HTTPS port - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Authenticating to GitHub / Using SSH over the HTTPS port Using SSH over the HTTPS port mac windows linux all Sometimes, firewalls refuse to allow SSH connections entirely. If using HTTPS cloning with credential caching is not an option, you can attempt to clone using an SSH connection made over the HTTPS port. Most firewall rules should allow this, but proxy servers may interfere. GitHub Enterprise users: Accessing GitHub Enterprise via SSH over the HTTPS port is currently not supported. To test if SSH over the HTTPS port is possible, run this SSH command: ssh -T -p 443 git@ssh.github.com Hi username! You've successfully authenticated, but GitHub does not provide shell access. If that worked, great! If not, you may need to follow our troubleshooting guide. Enabling SSH connections over HTTPS If you are able to SSH into git@ssh.github.com over port 443, you can override your SSH settings to force any connection to GitHub to run though that server and port. To set this in your ssh config, edit the file at ~/.ssh/config, and add this section: Host github.com Hostname ssh.github.com Port 443 You can test that this works by connecting once more to GitHub: ssh -T git@github.com Hi username! You've successfully authenticated, but GitHub does not provide shell access. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Recovering your SSH key passphrase - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Authenticating to GitHub / Recovering your SSH key passphrase Recovering your SSH key passphrase mac windows linux all If you've lost your SSH key passphrase, depending on the operating system you use, you may either recover it or you may need to generate a new SSH key passphrase. If you configured your SSH passphrase with the OS X Keychain, you may be able to recover it. In Finder, search for the Keychain Access app. In Keychain Access, search for SSH. Double click on the entry for your SSH key to open a new dialog box. In the lower-left corner, select Show password. You'll be prompted for your administrative password. Type it into the "Keychain Access" dialog box. Your password will be revealed. If you lose your SSH key passphrase, there's no way to recover it. You'll need to generate a brand new SSH keypair or switch to HTTPS cloning so you can use your GitHub password instead. If you lose your SSH key passphrase, there's no way to recover it. You'll need to generate a brand new SSH keypair or switch to HTTPS cloning so you can use your GitHub password instead. If you lose your SSH key passphrase, there's no way to recover it. You'll need to generate a brand new SSH keypair or switch to HTTPS cloning so you can use your GitHub password instead. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Error: Permission denied (publickey) - User Documentation <meta name="Description" content="A "Permission denied" error means that the server rejected your connection. There could be several reasons why, and the most common examples are explained below. …"> GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Authenticating to GitHub / Error: Permission denied (publickey) Error: Permission denied (publickey) mac windows linux all A "Permission denied" error means that the server rejected your connection. There could be several reasons why, and the most common examples are explained below. Should the sudo command be used with Git? You should not be using the sudo command with Git. If you have a very good reason you must use sudo, then ensure you are using it with every command (it's probably just better to use su to get a shell as root at that point). If you generate SSH keys without sudo and then try to use a command like sudo git push, you won't be using the same keys that you generated. Check that you are connecting to the correct server Typing is hard, we all know it. Pay attention to what you type; you won't be able to connect to "githib.com" or "guthub.com". In some cases, a corporate network may cause issues resolving the DNS record as well. To make sure you are connecting to the right domain, you can enter the following command: ssh -vT git@github.com OpenSSH_5.6p1, OpenSSL 0.9.8r 8 Feb 2011 debug1: Reading configuration data /Users/you/.ssh/config debug1: Reading configuration data /etc/ssh_config debug1: Applying options for * debug1: Connecting to github.com [IP ADDRESS] port 22. The connection should be made on port 22, unless you're overriding settings to use SSH over HTTPS. Always use the "git" user All connections, including those for remote URLs, must be made as the "git" user. If you try to connect with your GitHub username, it will fail: ssh -T GITHUB-USERNAME@github.com Permission denied (publickey). If your connection failed and you're using a remote URL with your GitHub username, you can change the remote URL to use the "git" user. You should verify your connection by typing: ssh -T git@github.com Hi username! You've successfully authenticated... Make sure you have a key that is being used Open the terminal. Verify that you have a private key generated and loaded into SSH. If you're using OpenSSH 6.7 or older: # start the ssh-agent in the background eval "$(ssh-agent -s)" Agent pid 59566 ssh-add -l 2048 a0:dd:42:3c:5a:9d:e4:2a:21:52:4e:78:07:6e:c8:4d /Users/you/.ssh/id_rsa (RSA) If you're using OpenSSH 6.8 or newer: # start the ssh-agent in the background eval "$(ssh-agent -s)" Agent pid 59566 ssh-add -l -E md5 2048 MD5:a0:dd:42:3c:5a:9d:e4:2a:21:52:4e:78:07:6e:c8:4d /Users/you/.ssh/id_rsa (RSA) If you have GitHub Desktop installed, you can use it to clone repositories and not deal with SSH keys. It also comes with the Git Bash tool, which is the preferred way of running git commands on Windows. If you are using Git Bash, turn on ssh-agent: # start the ssh-agent in the background eval "$(ssh-agent -s)" Agent pid 59566 If you are using another terminal prompt, such as Git for Windows, turn on ssh-agent: # start the ssh-agent in the background eval $(ssh-agent -s) Agent pid 59566 Verify that you have a private key generated and loaded into SSH. If you're using OpenSSH 6.7 or older: ssh-add -l 2048 a0:dd:42:3c:5a:9d:e4:2a:21:52:4e:78:07:6e:c8:4d /Users/you/.ssh/id_rsa (RSA) If you're using OpenSSH 6.8 or newer: ssh-add -l -E md5 2048 MD5:a0:dd:42:3c:5a:9d:e4:2a:21:52:4e:78:07:6e:c8:4d /Users/you/.ssh/id_rsa (RSA) Open the terminal. Verify that you have a private key generated and loaded into SSH. If you're using OpenSSH 6.7 or older: # start the ssh-agent in the background eval "$(ssh-agent -s)" Agent pid 59566 ssh-add -l 2048 a0:dd:42:3c:5a:9d:e4:2a:21:52:4e:78:07:6e:c8:4d /Users/you/.ssh/id_rsa (RSA) If you're using OpenSSH 6.8 or newer: # start the ssh-agent in the background eval "$(ssh-agent -s)" Agent pid 59566 ssh-add -l -E md5 2048 MD5:a0:dd:42:3c:5a:9d:e4:2a:21:52:4e:78:07:6e:c8:4d /Users/you/.ssh/id_rsa (RSA) Open TerminalTerminalGit Bash. Verify that you have a private key generated and loaded into SSH. If you're using OpenSSH 6.7 or older: # start the ssh-agent in the background eval "$(ssh-agent -s)" Agent pid 59566 ssh-add -l 2048 a0:dd:42:3c:5a:9d:e4:2a:21:52:4e:78:07:6e:c8:4d /Users/you/.ssh/id_rsa (RSA) If you're using OpenSSH 6.8 or newer: # start the ssh-agent in the background eval "$(ssh-agent -s)" Agent pid 59566 ssh-add -l -E md5 2048 MD5:a0:dd:42:3c:5a:9d:e4:2a:21:52:4e:78:07:6e:c8:4d /Users/you/.ssh/id_rsa (RSA) The ssh-add command should print out a long string of numbers and letters. If it does not print anything, you will need to generate a new SSH key and associate it with GitHub. Tip: On most systems the default private keys (~/.ssh/id_rsa, ~/.ssh/id_dsa and ~/.ssh/identity) are automatically added to the SSH authentication agent. You shouldn't need to run ssh-add path/to/key unless you override the file name when you generate a key. Getting more details You can also check that the key is being used by trying to connect to git@github.com: ssh -vT git@github.com ... debug1: identity file /Users/you/.ssh/id_rsa type -1 debug1: identity file /Users/you/.ssh/id_rsa-cert type -1 debug1: identity file /Users/you/.ssh/id_dsa type -1 debug1: identity file /Users/you/.ssh/id_dsa-cert type -1 ... debug1: Authentications that can continue: publickey debug1: Next authentication method: publickey debug1: Trying private key: /Users/you/.ssh/id_rsa debug1: Trying private key: /Users/you/.ssh/id_dsa debug1: No more authentication methods to try. Permission denied (publickey). In that example, we did not have any keys for SSH to use. The "-1" at the end of the "identity file" lines means SSH couldn't find a file to use. Later on, the "Trying private key" lines also indicate that no file was found. If a file existed, those lines would be "1" and "Offering public key", respectively: ssh -vT git@github.com ... debug1: identity file /Users/you/.ssh/id_rsa type 1 ... debug1: Authentications that can continue: publickey debug1: Next authentication method: publickey debug1: Offering RSA public key: /Users/you/.ssh/id_rsa Verify the public key is attached to your account You must provide your public key to GitHub to establish a secure connection. Open Terminal. Start SSH agent in the background. eval "$(ssh-agent -s)" Agent pid 59566 Find and take a note of your public key fingerprint. If you're using OpenSSH 6.7 or older: ssh-add -l 2048 a0:dd:42:3c:5a:9d:e4:2a:21:52:4e:78:07:6e:c8:4d /Users/USERNAME/.ssh/id_rsa (RSA) If you're using OpenSSH 6.8 or newer: ssh-add -l -E md5 2048 MD5:a0:dd:42:3c:5a:9d:e4:2a:21:52:4e:78:07:6e:c8:4d /Users/USERNAME/.ssh/id_rsa (RSA) In the upper-right corner of any page, click your profile photo, then click Settings. In the user settings sidebar, click SSH and GPG keys. Compare the list of SSH keys with the output from the ssh-add command. Open the command line. Start SSH agent in the background. ssh-agent -s Agent pid 59566 Find and take a note of your public key fingerprint. If you're using OpenSSH 6.7 or older: ssh-add -l 2048 a0:dd:42:3c:5a:9d:e4:2a:21:52:4e:78:07:6e:c8:4d /Users/USERNAME/.ssh/id_rsa (RSA) If you're using OpenSSH 6.8 or newer: ssh-add -l -E md5 2048 MD5:a0:dd:42:3c:5a:9d:e4:2a:21:52:4e:78:07:6e:c8:4d /Users/USERNAME/.ssh/id_rsa (RSA) In the upper-right corner of any page, click your profile photo, then click Settings. In the user settings sidebar, click SSH and GPG keys. Compare the list of SSH keys with the output from the ssh-add command. Open Terminal. Start SSH agent in the background. eval "$(ssh-agent -s)" Agent pid 59566 Find and take a note of your public key fingerprint. If you're using OpenSSH 6.7 or older: ssh-add -l 2048 a0:dd:42:3c:5a:9d:e4:2a:21:52:4e:78:07:6e:c8:4d /Users/USERNAME/.ssh/id_rsa (RSA) If you're using OpenSSH 6.8 or newer: ssh-add -l -E md5 2048 MD5:a0:dd:42:3c:5a:9d:e4:2a:21:52:4e:78:07:6e:c8:4d /Users/USERNAME/.ssh/id_rsa (RSA) In the upper-right corner of any page, click your profile photo, then click Settings. In the user settings sidebar, click SSH and GPG keys. Compare the list of SSH keys with the output from the ssh-add command. Open Terminal. Start SSH agent in the background. eval "$(ssh-agent -s)" Agent pid 59566 Find and take a note of your public key fingerprint. If you're using OpenSSH 6.7 or older: ssh-add -l 2048 a0:dd:42:3c:5a:9d:e4:2a:21:52:4e:78:07:6e:c8:4d /Users/USERNAME/.ssh/id_rsa (RSA) If you're using OpenSSH 6.8 or newer: ssh-add -l -E md5 2048 MD5:a0:dd:42:3c:5a:9d:e4:2a:21:52:4e:78:07:6e:c8:4d /Users/USERNAME/.ssh/id_rsa (RSA) In the upper-right corner of any page, click your profile photo, then click Settings. In the user settings sidebar, click SSH and GPG keys. Compare the list of SSH keys with the output from the ssh-add command. If you don't see your public key in GitHub, you'll need to add your SSH key to GitHub to associate it with your computer. Warning: If you see an SSH key you're not familiar with on GitHub, delete it immediately and contact GitHub Support, for further help. An unidentified public key may indicate a possible security concern. For more information, see "Reviewing your SSH keys." Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Error: Bad file number - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Authenticating to GitHub / Error: Bad file number Error: Bad file number mac windows linux all This error usually means you were unable to connect to the server. Often this is caused by firewalls and proxy servers. When running remote Git commands or SSH, your connection might time out: ssh -vT git@github.com OpenSSH_5.8p1, OpenSSL 1.0.0d 8 Feb 2011 debug1: Connecting to github.com [207.97.227.239] port 22. debug1: connect to address 207.97.227.239 port 22: Connection timed out ssh: connect to host github.com port 22: Connection timed out ssh: connect to host github.com port 22: Bad file number Solving the issue Use HTTPS Often, the simplest solution is to simply avoid SSH entirely. Most firewalls and proxies allow HTTPS traffic without issue. To take advantage of this, change the remote URL you're using: git clone https://github.com/username/reponame.git Cloning into 'reponame'... remote: Counting objects: 84, done. remote: Compressing objects: 100% (45/45), done. remote: Total 84 (delta 43), reused 78 (delta 37) Unpacking objects: 100% (84/84), done. Test from a different network If you can connect the computer to another network that doesn't have a firewall, you can try testing your SSH connection to GitHub. If everything works as it should, contact your network administrator for help on changing the firewall settings to allow your SSH connection to GitHub to succeed. Using SSH over the HTTPS port If using HTTPS is not an option, and your firewall admin refuses to allow SSH connections, you can try using SSH over the HTTPS port instead. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Error: Key already in use - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Authenticating to GitHub / Error: Key already in use Error: Key already in use mac windows linux all This error occurs when you try to add a key that's already been added to another account or repository. Finding where the key has been used To determine where the key has already been used, open a terminal and type the ssh command. Use the -i flag to provide the path to the key you want to check: ssh -T -ai ~/.ssh/id_rsa git@github.com # Connect to GitHub using a specific ssh key Hi username! You've successfully authenticated, but GitHub does not provide shell access. The username in the response is the GitHub account that the key is currently attached to. If the response looks something like "username/repo", the key has been attached to a repository as a deploy key. Fixing the issue To resolve the issue, first remove the key from the other account or repository and then add it to your account. If you don't have permissions to transfer the key, and can't contact a user who does, remove the keypair and generate a brand new one. Deploy keys Once a key has been attached to one repository as a deploy key, it cannot be used on another repository. If you're running into this error while setting up deploy keys, see "Managing deploy keys" in the GitHub Developer documentation. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Error: Permission to user/repo denied to other-user - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Authenticating to GitHub / Error: Permission to user/repo denied to other-user Error: Permission to user/repo denied to other-user mac windows linux all This error means the key you are pushing with is attached to an account which does not have access to the repository. To fix this, the owner of the repository (user) needs to add your account (other-user) as a collaborator on the repository or to a team that has write access to the repository. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Error: Permission to user/repo denied to user/other-repo - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Authenticating to GitHub / Error: Permission to user/repo denied to user/other-repo Error: Permission to user/repo denied to user/other-repo mac windows linux all This error means the key you are pushing with is attached to another repository as a deploy key, and does not have access to the repository you are trying to push to. To fix this, remove the deploy key from the repository, and add the key to your user account instead. If the key you are using is intended to be a deploy key, check out our guide on deploy keys for more details. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Error: Agent admitted failure to sign - User Documentation <meta name="Description" content="In rare circumstances, connecting to GitHub via SSH on Linux produces the error `"Agent admitted failure to sign using the key"`. Follow these steps to resolve the problem. …"> GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Authenticating to GitHub / Error: Agent admitted failure to sign Error: Agent admitted failure to sign mac windows linux all In rare circumstances, connecting to GitHub via SSH on Linux produces the error "Agent admitted failure to sign using the key". Follow these steps to resolve the problem. When trying to SSH into GitHub on a Linux computer, you may see the following message in your terminal: ssh -vT git@github.com ... Agent admitted failure to sign using the key. debug1: No more authentication methods to try. Permission denied (publickey). For more details, see this issue report. Resolution You should be able to fix this error by loading your keys into your SSH agent with ssh-add: # start the ssh-agent in the background eval "$(ssh-agent -s)" Agent pid 59566 ssh-add Enter passphrase for /home/you/.ssh/id_rsa: [tippy tap] Identity added: /home/you/.ssh/id_rsa (/home/you/.ssh/id_rsa) If your key does not have the default filename (/.ssh/id_rsa), you'll have to pass that path to ssh-add: # start the ssh-agent in the background eval "$(ssh-agent -s)" Agent pid 59566 ssh-add ~/.ssh/my_other_key Enter passphrase for /home/you/.ssh/my_other_key: [tappity tap tap] Identity added: /home/you/.ssh/my_other_key (/home/you/.ssh/my_other_key) Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Error: SSL certificate problem, verify that the CA cert is OK - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Authenticating to GitHub / Error: SSL certificate problem, verify that the CA cert is OK Error: SSL certificate problem, verify that the CA cert is OK mac windows linux all This error means your CA root certificate is out of date. If your CA root certificate, you won't be able to push or pull from GitHub repositories. The error you receive may look like the following: git push -u github.master fatal: 'github.master' does not appear to be a git repository fatal: The remote end hung up unexpectedly git pull -u github error: SSL certificate problem, verify that the CA cert is OK. Details: error:14090086:SSL routines:SSL3_GET_SERVER_CERTIFICATE:certificate verify failed while accessing https://github.com/tqisjim/google-oauth.git/info/refs fatal: HTTP request failed A "CA" is shorthand for a "certificate authority," a third-party group responsible for handling secure connections around the web. They establish digital "certificates," which are a way of ensuring that there are valid connections between two machines (like your computer and GitHub.com). Without a certificate, the security risk between two machines is greater. When you receive this error, it likely means that your CA is out-of-date and needs to be updated. Generally, updating your operating system also updates your CA, and solves the problem. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Error: We're doing an SSH key audit - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Authenticating to GitHub / Error: We're doing an SSH key audit Error: We're doing an SSH key audit mac windows linux all This error means the SSH key you're using to perform a Git operation is unverified. When using an unverified key to perform Git operations, you will be prompted to perform an audit of your SSH keys. ERROR: We're doing an SSH key audit. Reason: unverified due to lack of use Please visit https://github.com/settings/ssh to approve this key so we know it's safe. Fingerprint: ab:08:46:83:ff:f6:c4:f8:a9:4e:68:6b:94:17:f2:46 fatal: could not read from remote repository Solving the issue To fix this, you need to review your SSH keys and either reject or approve the unverified key. Clicking the URL link in the error message brings you to the SSH Settings page, where the unverified SSH key is highlighted in the SSH key list. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Signing commits with GPG - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Authenticating to GitHub / Signing commits with GPG Signing commits with GPG mac windows linux all Use GPG keys to sign your work locally and verify work from trusted collaborators. You can generate a GPG key and add the public key to your GitHub account by following the procedures outlined in this section. GitHub will automatically sign commits you make using the GitHub web interface. About GPG Using GPG, you can sign and verify tags and commits. With GPG keys, tags or commits that you've authored on GitHub are verified and other people can trust that the changes you've made really were made by you. Checking for existing GPG keys Before you generate a GPG key, you can check to see if you have any existing GPG keys. Generating a new GPG key If you don't have an existing GPG key, you can generate a new GPG key to use for signing commits and tags. Adding a new GPG key to your GitHub account To configure your GitHub account to use your new (or existing) GPG key, you'll also need to add it to your GitHub account. Telling Git about your GPG key After you've set up your GPG key and added it to your GitHub account, you need to inform Git that there's a GPG key you'd like to use. Associating an email with your GPG key Your GPG key must be associated with a GitHub verified email that matches your committer identity. Signing commits using GPG Once you've set up your GPG key and associated it with your GitHub account and Git, you can sign commits locally. Your commits will show as verified within a pull request on GitHub. Signing tags using GPG Once you've set up your GPG key and associated it with your GitHub account and Git, you can sign tags. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support About GPG - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Authenticating to GitHub / About GPG About GPG mac windows linux all Using GPG, you can sign and verify tags and commits. With GPG keys, tags or commits that you've authored on GitHub are verified and other people can trust that the changes you've made really were made by you. When you set up GPG, you'll generate a GPG key and then add the key to your GitHub account. You'll also need to tell Git about your GPG key and associate your GitHub email with your GPG key. GitHub uses OpenPGP libraries to confirm that your locally signed commits and tags are cryptographically verifiable against a public key you have added to your GitHub account. GitHub will automatically sign commits you make using the GitHub web interface. These commits will have a verified status on GitHub. You can verify the signature locally using the public key available at https://github.com/web-flow.gpg. You can check the verification status of your signed commits or tags on GitHub and view why your commit signatures might be unverified. For more information, see "Checking your GPG commit and tag signature verification status." Further reading "Signing commits using GPG" "Signing tags using GPG" "Troubleshooting GPG" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Checking for existing GPG keys - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Authenticating to GitHub / Checking for existing GPG keys Checking for existing GPG keys mac windows linux all Before you generate a GPG key, you can check to see if you have any existing GPG keys. Supported GPG key algorithms GitHub supports several GPG key algorithms. If you try to add a key generated with an unsupported algorithm, you may encounter an error. RSA ElGamal DSA ECDH ECDSA EdDSA Note: GPG does not come installed by default on OS X or Windows. To install GPG command line tools, see GnuPG's Download page. Open TerminalTerminalGit Bash. Use the gpg --list-secret-keys --keyid-format LONG command to list GPG keys for which you have both a public and private key. A private key is required for signing commits or tags. $ gpg --list-secret-keys --keyid-format LONG Note: Some GPG installations on Linux may require you to use gpg2 --list-keys --keyid-format LONG to view a list of your existing keys instead. In this case you will also need to configure Git to use gpg2 by running git config --global gpg.program gpg2. Check the command output to see if you have a GPG key pair. If there are no GPG key pairs or you don't want to use any that are available for signing commits and tags, then generate a new GPG key. If there's an existing GPG key pair and you want to use it to sign commits and tags, then add your GPG key to your GitHub account. Further reading "Generating a new GPG key" "Adding a new GPG key to your GitHub account" "Telling Git about your GPG key" "Associating an email with your GPG key" "Signing commits and tags using GPG keys" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Generating a new GPG key - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Authenticating to GitHub / Generating a new GPG key Generating a new GPG key mac windows linux all If you don't have an existing GPG key, you can generate a new GPG key to use for signing commits and tags. Supported GPG key algorithms GitHub supports several GPG key algorithms. If you try to add a key generated with an unsupported algorithm, you may encounter an error. RSA ElGamal DSA ECDH ECDSA EdDSA Generating a GPG key Note: Before generating a new GPG key, make sure you've verified your email address. If you haven't verified your email address, you won't be able to sign commits and tags with GPG. For more information, see "Verifying your email address." Download and install the most recent version of the GPG command line tools for your operating system. You will need version 2.1 or greater to follow the instructions below. Open TerminalTerminalGit Bash. Paste the text below to generate a GPG key pair. $ gpg --full-generate-key At the prompt, specify the kind of key you want, or press Enter to accept the default RSA and RSA. Enter the desired key size. We recommend the maximum key size of 4096. Enter the length of time the key should be valid. Press Enter to specify the default selection, indicating that the key doesn't expire. Verify that your selections are correct. Enter your user ID information. Note: When asked to enter your email address, ensure that you enter the verified email address for your GitHub account. For more information, see "Verifying your email address." Type a secure passphrase. Use the gpg --list-secret-keys --keyid-format LONG command to list GPG keys for which you have both a public and private key. A private key is required for signing commits or tags. $ gpg --list-secret-keys --keyid-format LONG Note: Some GPG installations on Linux may require you to use gpg2 --list-keys --keyid-format LONG to view a list of your existing keys instead. In this case you will also need to configure Git to use gpg2 by running git config --global gpg.program gpg2. From the list of GPG keys, copy the GPG key ID you'd like to use. In this example, the GPG key ID is 3AA5C34371567BD2: gpg --list-secret-keys --keyid-format LONG /Users/hubot/.gnupg/secring.gpg ------------------------------------ sec 4096R/3AA5C34371567BD2 2016-03-10 [expires: 2017-03-10] uid Hubot ssb 4096R/42B317FD4BA89E7A 2016-03-10 Paste the text below, substituting in the GPG key ID you'd like to use. In this example, the GPG key ID is 3AA5C34371567BD2: gpg --armor --export 3AA5C34371567BD2 # Prints the GPG key ID, in ASCII armor format Copy your GPG key, beginning with -----BEGIN PGP PUBLIC KEY BLOCK----- and ending with -----END PGP PUBLIC KEY BLOCK-----. Add the GPG key to your GitHub account. Further reading "Checking for existing GPG keys" "Adding a new GPG key to your GitHub account" "Telling Git about your GPG key" "Associating an email with your GPG key" "Signing commits using GPG" "Signing tags using GPG" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Adding a new GPG key to your GitHub account - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Authenticating to GitHub / Adding a new GPG key to your GitHub account Adding a new GPG key to your GitHub account mac windows linux all To configure your GitHub account to use your new (or existing) GPG key, you'll also need to add it to your GitHub account. Before adding a new GPG key to your GitHub account, you should have: Checked for existing GPG keys Generated and copied a new GPG key Supported GPG key algorithms GitHub supports several GPG key algorithms. If you try to add a key generated with an unsupported algorithm, you may encounter an error. RSA ElGamal DSA ECDH ECDSA EdDSA When verifying a signature, we extract the signature and attempt to parse its key-id. We match the key-id with keys uploaded to GitHub. Until you upload your GPG key to GitHub, we cannot verify your signatures. Adding a GPG key In the upper-right corner of any page, click your profile photo, then click Settings. In the user settings sidebar, click SSH and GPG keys. Click New GPG key. In the "Key" field, paste the GPG key you copied when you generated your GPG key. Click Add GPG key. To confirm the action, enter your GitHub password. Further reading "Checking for existing GPG keys" "Generating a new GPG key" "Telling Git about your GPG key" "Associating an email with your GPG key" "Signing commits and tags using GPG keys" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Telling Git about your GPG key - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Authenticating to GitHub / Telling Git about your GPG key Telling Git about your GPG key mac windows linux all After you've set up your GPG key and added it to your GitHub account, you need to inform Git that there's a GPG key you'd like to use. If you're using a GPG key that matches your committer identity and your verified email address associated with your GitHub account, then you can begin signing commits and signing tags. If you don't have a GPG key that matches your committer identity, you need to associate an email with an existing key. If you have multiple GPG keys, you need to tell Git which one to use. Open TerminalTerminalGit Bash. Use the gpg --list-secret-keys --keyid-format LONG command to list GPG keys for which you have both a public and private key. A private key is required for signing commits or tags. $ gpg --list-secret-keys --keyid-format LONG Note: Some GPG installations on Linux may require you to use gpg2 --list-keys --keyid-format LONG to view a list of your existing keys instead. In this case you will also need to configure Git to use gpg2 by running git config --global gpg.program gpg2. From the list of GPG keys, copy the GPG key ID you'd like to use. In this example, the GPG key ID is 3AA5C34371567BD2: gpg --list-secret-keys --keyid-format LONG /Users/hubot/.gnupg/secring.gpg ------------------------------------ sec 4096R/3AA5C34371567BD2 2016-03-10 [expires: 2017-03-10] uid Hubot ssb 4096R/42B317FD4BA89E7A 2016-03-10 To set your GPG signing key in Git, paste the text below, substituting in the GPG key ID you'd like to use. In this example, the GPG key ID is 3AA5C34371567BD2: git config --global user.signingkey 3AA5C34371567BD2 If you aren't using the GPG suite, paste the text below to add the GPG key to your bash profile: $ echo 'export GPG_TTY=$(tty)' >> ~/.bash_profile Open TerminalTerminalGit Bash. Use the gpg --list-secret-keys --keyid-format LONG command to list GPG keys for which you have both a public and private key. A private key is required for signing commits or tags. $ gpg --list-secret-keys --keyid-format LONG Note: Some GPG installations on Linux may require you to use gpg2 --list-keys --keyid-format LONG to view a list of your existing keys instead. In this case you will also need to configure Git to use gpg2 by running git config --global gpg.program gpg2. From the list of GPG keys, copy the GPG key ID you'd like to use. In this example, the GPG key ID is 3AA5C34371567BD2: gpg --list-secret-keys --keyid-format LONG /Users/hubot/.gnupg/secring.gpg ------------------------------------ sec 4096R/3AA5C34371567BD2 2016-03-10 [expires: 2017-03-10] uid Hubot ssb 4096R/42B317FD4BA89E7A 2016-03-10 To set your GPG signing key in Git, paste the text below, substituting in the GPG key ID you'd like to use. In this example, the GPG key ID is 3AA5C34371567BD2: git config --global user.signingkey 3AA5C34371567BD2 Open TerminalTerminalGit Bash. Use the gpg --list-secret-keys --keyid-format LONG command to list GPG keys for which you have both a public and private key. A private key is required for signing commits or tags. $ gpg --list-secret-keys --keyid-format LONG Note: Some GPG installations on Linux may require you to use gpg2 --list-keys --keyid-format LONG to view a list of your existing keys instead. In this case you will also need to configure Git to use gpg2 by running git config --global gpg.program gpg2. From the list of GPG keys, copy the GPG key ID you'd like to use. In this example, the GPG key ID is 3AA5C34371567BD2: gpg --list-secret-keys --keyid-format LONG /Users/hubot/.gnupg/secring.gpg ------------------------------------ sec 4096R/3AA5C34371567BD2 2016-03-10 [expires: 2017-03-10] uid Hubot ssb 4096R/42B317FD4BA89E7A 2016-03-10 To set your GPG signing key in Git, paste the text below, substituting in the GPG key ID you'd like to use. In this example, the GPG key ID is 3AA5C34371567BD2: git config --global user.signingkey 3AA5C34371567BD2 To add your GPG key to your bash profile, paste the text below: echo 'export GPG_TTY=$(tty)' >> ~/.bashrc Further reading "Checking for existing GPG keys" "Generating a new GPG key" "Adding a new GPG key to your GitHub account" "Associating an email with your GPG key" "Signing commits using GPG" "Signing tags using GPG" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Associating an email with your GPG key - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Authenticating to GitHub / Associating an email with your GPG key Associating an email with your GPG key mac windows linux all Your GPG key must be associated with a GitHub verified email that matches your committer identity. If you're using a GPG key that matches your committer identity and your verified email address associated with your GitHub account, then you can begin signing commits and signing tags. Open TerminalTerminalGit Bash. Use the gpg --list-secret-keys --keyid-format LONG command to list GPG keys for which you have both a public and private key. A private key is required for signing commits or tags. $ gpg --list-secret-keys --keyid-format LONG Note: Some GPG installations on Linux may require you to use gpg2 --list-keys --keyid-format LONG to view a list of your existing keys instead. In this case you will also need to configure Git to use gpg2 by running git config --global gpg.program gpg2. From the list of GPG keys, copy the GPG key ID you'd like to use. In this example, the GPG key ID is 3AA5C34371567BD2: gpg --list-secret-keys --keyid-format LONG /Users/hubot/.gnupg/secring.gpg ------------------------------------ sec 4096R/3AA5C34371567BD2 2016-03-10 [expires: 2017-03-10] uid Hubot ssb 4096R/42B317FD4BA89E7A 2016-03-10 Enter gpg --edit-key GPG key ID, substituting in the GPG key ID you'd like to use. In the following example, the GPG key ID is 3AA5C34371567BD2: gpg --edit-key 3AA5C34371567BD2 Enter gpg> adduid to add the user ID details. gpg> adduid Follow the prompts to supply your real name, email address, and any comments. You can modify your entries by choosing N, C, or E. Real Name: Octocat Email address: octocat@github.com Comment: GitHub key Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? Enter O to save your selections. Enter your key's passphrase. Enter gpg --armor --export GPG key ID, substituting in the GPG key ID you'd like to use. In the following example, the GPG key ID is 3AA5C34371567BD2: gpg --armor --export 3AA5C34371567BD2 # Prints the GPG key, in ASCII armor format Upload the GPG key by adding it to your GitHub account. Further reading "Checking for existing GPG keys" "Generating a new GPG key" "Adding a new GPG key to your GitHub account" "Associating an email with your GPG key" "Signing commits using GPG" "Signing tags using GPG" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Signing commits using GPG - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Authenticating to GitHub / Signing commits using GPG Signing commits using GPG mac windows linux all Once you've set up your GPG key and associated it with your GitHub account and Git, you can sign commits locally. Your commits will show as verified within a pull request on GitHub. Note: GitHub Desktop does not support GPG signing. Tips: To configure your Git client to sign commits by default for a local repository, in Git versions 2.0.0 and above, run git config commit.gpgsign true. To sign all commits by default in any local repository on your computer, run git config --global commit.gpgsign true. To store your GPG key passphrase so you don't have to enter it every time you sign a commit, we recommend using the following tools: For Mac users, the GPG Suite allows you to store your GPG key passphrase in the Mac OS Keychain. For Windows users, the Gpg4win integrates with other Windows tools. You can also manually configure gpg-agent to save your GPG key passphrase, but this doesn't integrate with Mac OS Keychain like ssh-agent and requires more setup. If you have multiple GPG keys or are attempting to sign commits or tags with a GPG key that doesn't match your committer identity, you should tell Git about your GPG key. When committing changes in your local branch, add the -S flag to the git commit command: git commit -S -m your commit message # Creates a signed commit After you create your commit, provide the passphrase you set up when you generated your GPG key. When you've finished creating commits locally, push them to your remote repository on GitHub: git push # Pushes your local commits to the remote repository On GitHub, navigate to your pull request. On the pull request, click Commits. To view more detailed information about the verified signature, click Verified. Further reading "Checking for existing GPG keys" "Generating a new GPG key" "Adding a new GPG key to your GitHub account" "Telling Git about your GPG key" "Associating an email with your GPG key" "Signing tags using GPG" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Signing tags using GPG - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Authenticating to GitHub / Signing tags using GPG Signing tags using GPG mac windows linux all Once you've set up your GPG key and associated it with your GitHub account and Git, you can sign tags. Note: GitHub Desktop does not support GPG signing. To sign a tag, add -s to your git tag command. git tag -s mytag # Creates a signed tag Verify your signed tag it by running git tag -v [tag-name]. git tag -v mytag # Verifies the signed tag Further reading "Working with tags" "Checking for existing GPG keys" "Generating a new GPG key" "Adding a new GPG key to your GitHub account" "Telling Git about your GPG key" "Associating an email with your GPG key" "Signing commits using GPG" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Troubleshooting GPG - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Authenticating to GitHub / Troubleshooting GPG Troubleshooting GPG mac windows linux all When using GPG to verify your tags and commits, you may need to troubleshoot unexpected issues that may arise. Checking your GPG commit and tag verification status Before signing commits and tags with GPG, GitHub will confirm that your GPG signatures are cryptographically verifiable using OpenPGP libraries to ensure your signatures can be trusted. You can check the verification status of your commit and tag signatures on GitHub. Updating an expired GPG key When verifying a signature, GitHub checks that the key is not revoked or expired. If your signing key is revoked or expired, GitHub cannot verify your signatures. If your key is revoked, use the primary key or another key that is not revoked to sign your commits. Using a verified email address in your GPG key When verifying a signature, GitHub checks that the committer or tagger email address matches an email address from the GPG key's identities and is a verified email address on the user's account. This ensures that the key belongs to you and that you created the commit or tag. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Checking your GPG commit and tag signature verification status - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Authenticating to GitHub / Checking your GPG commit and tag signature verification status Checking your GPG commit and tag signature verification status mac windows linux all Before signing commits and tags with GPG, GitHub will confirm that your GPG signatures are cryptographically verifiable using OpenPGP libraries to ensure your signatures can be trusted. You can check the verification status of your commit and tag signatures on GitHub. Checking your GPG commit signature verification status On GitHub, navigate to your pull request. On the pull request, click Commits. Next to your commit's abbreviated commit hash, there is a box that shows whether your commit signature is verified or unverified. To view more detailed information about the commit signature, click Verified or Unverified. If your commit signature is unverified, you can learn more about why by clicking the Unverified box. Checking your GPG tag signature verification status On GitHub, navigate to the main page of the repository. Under your repository name, click Releases. At the top of the Releases page, click Tags. Next to your tag description, there is a box that shows whether your tag signature is verified or unverified. To view more detailed information about the tag signature, click Verified or Unverified. If your tag signature is unverified, you can learn more about why by clicking the Unverified box. Further reading "About GPG" "Signing commits and tags using GPG" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Updating an expired GPG key - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Authenticating to GitHub / Updating an expired GPG key Updating an expired GPG key mac windows linux all When verifying a signature, GitHub checks that the key is not revoked or expired. If your signing key is revoked or expired, GitHub cannot verify your signatures. If your key is revoked, use the primary key or another key that is not revoked to sign your commits. If your key is expired, you must update the expiration, export the new key, delete the expired key in your GitHub account, and upload the new key to GitHub. Your previous commits and tags will show as verified, as long as the key meets all other verification requirements. If your key is invalid and you don't use another valid key in your key set, but instead generate a new GPG key with a new set of credentials, then your commits made with the revoked or expired key will continue to show as unverified. Also, your new credentials will not be able to resign or verify your old commits and tags. Further reading "About GPG" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Using a verified email address in your GPG key - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Authenticating to GitHub / Using a verified email address in your GPG key Using a verified email address in your GPG key mac windows linux all When verifying a signature, GitHub checks that the committer or tagger email address matches an email address from the GPG key's identities and is a verified email address on the user's account. This ensures that the key belongs to you and that you created the commit or tag. If you need to verify your GitHub email address, see "Verifying your email address." If you need to update or add an email address to your GPG key, see "Associating an email with your GPG key." Commits and tags may contain several email addresses. For commits, there is the author — the person who wrote the code — and the committer — the person who added the commit to the tree. When signing a commit with Git, whether it be during a merge, cherry-pick, or normal git commit, the committer email address will be yours, even if the author email address isn't. Tags are more simple: The tagger email address is always the user who created the tag. If you need to change your committer or tagger email address, see "Setting your commit email address in Git." Further reading "About GPG" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Customizing your profile - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing your GitHub profile / Customizing your profile Customizing your profile mac windows linux all You can customize your profile so that other people can get a better sense of who you are and the work you do. About your profile Your profile page tells people the story of your work through the repositories you're interested in, the contributions you've made, and the conversations you've had. Setting your profile picture Your profile picture helps identify you across GitHub in pull requests, comments, contributions pages, and graphs. You can choose to have a profile picture that represents you, your likeness, or your spirit animal. Adding a bio to your profile Add a bio to your profile to share information about yourself with other GitHub users. With the help of @mention's and emoji, you can include information about where you currently or have previously worked, what type of work you do, or even what kind of coffee you drink. Pinning repositories to your profile You can pin repositories to your profile so that other people can easily see repositories you own or have contributed to. These pinned repositories include important information about the repository, like a summary of the work being done, the number of stars the repository has received, and the main programming language used in the repository. Once you pin repositories to your profile, the "Pinned repositories" section replaces the "Popular repositories" section on your profile. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support About your profile - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing your GitHub profile / About your profile About your profile mac windows linux all Your profile page tells people the story of your work through the repositories you're interested in, the contributions you've made, and the conversations you've had. You can add personal information about yourself in your bio, like previous places you've worked, projects you've contributed to, or interests you have that other people may like to know about. People who visit your profile see a timeline of important highlights, like when you joined GitHub, the moment you opened your first pull request, and issues you've opened that prompt important conversations. They can also see: Repositories you own or contribute to and get a feel for the type of work you're interested in. You can choose which repositories showcase your best work by pinning them to your profile. You can choose to display public contributions or to also include private, anonymized contributions. Repositories you've starred. Further reading "How do I set up my profile picture?" "Pinning repositories to your profile" "Publicizing or hiding your private contributions on your profile" "Viewing contributions on your profile" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Setting your profile picture - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing your GitHub profile / Setting your profile picture Setting your profile picture mac windows linux all Your profile picture helps identify you across GitHub in pull requests, comments, contributions pages, and graphs. You can choose to have a profile picture that represents you, your likeness, or your spirit animal. When you sign up for an account, GitHub provides you with a randomly generated "identicon" that looks something like this: Your identicon generates from a hash of your user ID, so there's no way to control its color or pattern. Changing your profile picture As you become more of a GitHub pro, you may want to associate your good work with an identifiable avatar. Tip: Your profile picture should be a PNG, JPG, or GIF file under 1 MB in size. For the best quality rendering, we recommend keeping the image at about 500 by 500 pixels. In the upper-right corner of any page, click your profile photo, then click Settings. Under Profile Picture, you can either drag-and-drop your image from a local folder, or click Upload new picture to upload a new photo manually. Crop your picture. When you're done, click Set new profile picture. Resetting your profile picture to the identicon Go to your designated identicon at https://github.com/identicons/USERNAME.png. Download your identicon. Follow the previous steps to replace the image. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Adding a bio to your profile - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing your GitHub profile / Adding a bio to your profile Adding a bio to your profile mac windows linux all Add a bio to your profile to share information about yourself with other GitHub users. With the help of @mention's and emoji, you can include information about where you currently or have previously worked, what type of work you do, or even what kind of coffee you drink. Tip: When you @mention an organization, only those that you're a member of will autocomplete. You can still @mention organizations that you're not a member of, like a previous employer, but the organization name won't autocomplete for you. In the upper-right corner of any page, click your profile photo, then click Settings. Under Bio, add the content that you want displayed on your profile. The bio field is limited to 160 characters. Click Update profile. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Pinning repositories to your profile - User Documentation <meta name="Description" content="You can pin repositories to your profile so that other people can easily see repositories you own or have contributed to. These pinned repositories include important information about the repository, like a summary of the work being done, the number of stars the repository has received, and the main programming language used in the repository. Once you pin repositories to your profile, the "Pinned repositories" section replaces the "Popular repositories" section on your profile. …"> GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing your GitHub profile / Pinning repositories to your profile Pinning repositories to your profile mac windows linux all You can pin repositories to your profile so that other people can easily see repositories you own or have contributed to. These pinned repositories include important information about the repository, like a summary of the work being done, the number of stars the repository has received, and the main programming language used in the repository. Once you pin repositories to your profile, the "Pinned repositories" section replaces the "Popular repositories" section on your profile. In the top right corner of GitHub, click your profile photo, then click Your profile. In the "Pinned repositories" section, click Customize your pinned repositories to choose up to six repositories to pin to your profile. Choose "Your repositories" or "Repositories you contribute to" to display a searchable list of repositories. Search for and select the repository you want to pin to your profile. Click "Save pinned repositories" to save your selected repositories to the "Pinned repositories" section on your profile. You can reorder the repositories in the "Pinned repositories" section by clicking to the left of the repository name, dragging it to a new location, and dropping it. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Managing contribution graphs on your profile - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing your GitHub profile / Managing contribution graphs on your profile Managing contribution graphs on your profile mac windows linux all Your contributions, including commits, proposed pull requests, and opened issues, are displayed on your profile so people can easily see the work you've done. Viewing contributions on your profile Your GitHub profile shows off your pinned repositories as well as a graph of your repository contributions over the past year. Publicizing or hiding your private contributions on your profile Your GitHub profile shows a graph of your repository contributions over the past year. You can choose to show anonymized activity from private repositories in addition to the activity shown from public repositories. Why are my contributions not showing up on my profile? Your profile contributions graph is a record of contributions you've made to GitHub repositories. Contributions are timestamped according to Coordinated Universal Time (UTC) rather than your local time zone. Contributions are only counted if they meet certain criteria. In some cases, we may need to rebuild your graph in order for contributions to appear. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Viewing contributions on your profile - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing your GitHub profile / Viewing contributions on your profile Viewing contributions on your profile mac windows linux all Your GitHub profile shows off your pinned repositories as well as a graph of your repository contributions over the past year. Your contribution graph shows activity from public repositories. You can choose to show activity from both public and private repositories, with specific details of your activity in private repositories anonymized. For more information, see "Publicizing or hiding your private contributions on your profile." Note: Commits will only appear on your contributions graph if you have added the email address you used for your local Git configuration to your GitHub email settings. For more information, see "Why are my contributions not showing up on my profile?" What counts as a contribution On your profile page, certain actions count as contributions: Committing to a repository's default branch or gh-pages branch Opening an issue Proposing a pull request Submitting a pull request review Notes: When a pull request is merged and commits are squashed, only the user that merged the pull request and the user that opened the pull request receive contribution credit. No other contributors to the pull request will receive contribution credit. When rebasing commits, the original author of the commit and the person who rebased the commits, whether on the command line or on GitHub, receives contribution credit. Popular repositories This section displays your repositories with the most watchers. Once you pin repositories to your profile, this section will change to "Pinned repositories." Pinned repositories This section displays up to six public repositories and can include your repositories as well as repositories you've contributed to. To easily see important details about the repositories you've chosen to feature, each repository in this section includes a summary of the work being done, the number of stars the repository has received, and the main programming language used in the repository. For more information, see "Pinning repositories to your profile." Contributions calendar Your contributions calendar shows your contribution activity. Viewing contributions from specific times Click on a day's square to show the contributions made during that 24-hour period. Press Shift and click on another day's square to show contributions made during that timespan. Note: You can select up to a one-month range on your contributions calendar. If you select a larger timespan, we will only display one month of contributions. How contribution event times are calculated Timestamps are calculated differently for commits and pull requests: Commits use the time zone information in the commit timestamp. Pull requests and issues opened on GitHub use your browser's time zone. Those opened via the API use the timestamp or time zone specified in the API call. Contribution activity The contribution activity section includes a detailed timeline of your work, including commits you've made, pull requests you've proposed, and issues you've opened. You can see your contributions over time by either clicking Show more activity at the bottom of your contribution activity or by clicking the year you're interested in viewing on the right side of the page. Important moments, like the date you joined an organization, proposed your first pull request, or opened a high-profile issue, are highlighted in your contribution activity. If you can't see certain events in your timeline, check to make sure you still have access to the organization or repository where the event happened. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Publicizing or hiding your private contributions on your profile - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing your GitHub profile / Publicizing or hiding your private contributions on your profile Publicizing or hiding your private contributions on your profile mac windows linux all Your GitHub profile shows a graph of your repository contributions over the past year. You can choose to show anonymized activity from private repositories in addition to the activity shown from public repositories. If you publicize your private contributions, people without access to the private repositories you work in won't be able to see the details of your private contributions. Instead, they'll see the number of private contributions you made on any given day. Your public contributions will include detailed information. For more information, see "Viewing contributions on your profile page". Changing the visibility of your private contributions In the upper-right corner of any page, click your profile photo, then click Settings. Under Contributions, to include anonymized activity from private repositories in your contribution graph, select Include private contributions in my profile. To limit your contribution graph to activity from public repositories, deselect Include private contributions in my profile. Click Update contributions. Tip: You can change the visibility of your private contributions in the Contributions settings drop down menu on your contribution graph. Further reading "Viewing contributions on your profile page" "Why are my contributions not showing up on my profile?" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Why are my contributions not showing up on my profile? - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing your GitHub profile / Why are my contributions not showing up on my profile? Why are my contributions not showing up on my profile? mac windows linux all Your profile contributions graph is a record of contributions you've made to GitHub repositories. Contributions are timestamped according to Coordinated Universal Time (UTC) rather than your local time zone. Contributions are only counted if they meet certain criteria. In some cases, we may need to rebuild your graph in order for contributions to appear. Contributions that are counted Issues and pull requests Issues and pull requests will appear on your contribution graph if they were opened in a standalone repository, not a fork. Commits Commits will appear on your contributions graph if they meet all of the following conditions: The email address used for the commits is associated with your GitHub account. The commits were made in a standalone repository, not a fork. The commits were made: In the repository's default branch (usually master) In the gh-pages branch (for repositories with Project Pages sites) In addition, at least one of the following must be true: You are a collaborator on the repository or are a member of the organization that owns the repository. You have forked the repository. You have opened a pull request or issue in the repository. You have starred the repository. Common reasons that contributions are not counted Notes: When a pull request is merged and commits are squashed, only the user that merged the pull request and the user that opened the pull request receive contribution credit. No other contributors to the pull request will receive contribution credit. When rebasing commits, the original author of the commit and the person who rebased the commits, whether on the command line or on GitHub, receives contribution credit. Commit was made less than 24 hours ago After making a commit that meets the requirements to count as a contribution, you may need to wait for up to 24 hours to see the contribution appear on your contributions graph. You haven't added your local Git commit email to your profile Commits must be made with an email address that has been added to your GitHub profile in order to appear on your contributions graph. You can check the email address used for a commit by adding .patch to the end of a commit URL, e.g. https://github.com/octocat/octocat.github.io/commit/67c0afc1da354d8571f51b6f0af8f2794117fd10.patch: From 67c0afc1da354d8571f51b6f0af8f2794117fd10 Mon Sep 17 00:00:00 2001 From: The Octocat <octocat@nowhere.com> Date: Sun, 27 Apr 2014 15:36:39 +0530 Subject: [PATCH] updated index for better welcome message The email address in the From: field is the address that was set in the local git config settings. In this example, the email address used for the commit is octocat@nowhere.com. If the email address used for the commit hasn't been added to your GitHub profile, you must add the email address to your GitHub account. Your contributions graph will be rebuilt automatically when you add the new address. Generic email addresses--such as jane@computer.local--cannot be added to GitHub accounts. If you use such an email for your commits, the commits will not be linked to your GitHub profile and will not show up in your contributions graph. Commit was not made in the default or gh-pages branch Commits are only counted if they are made in the default branch (usually master) or the gh-pages branch (for repositories with Project Pages sites). If your commits are in a non-default or non-gh-pages branch and you'd like them to count toward your contributions, you will need to do one of the following: Open a pull request to have your changes merged into the default branch or the gh-pages branch. Change the default branch of the repository. Changing the default branch of the repository will change it for all repository collaborators. Only do this if you want the new branch to become the base against which all future pull requests and commits will be made. Commit was made in a fork Commits made in a fork will not count toward your contributions. To make them count, you must do one of the following: Open a pull request to have your changes merged into the parent repository. To detach the fork and turn it into a standalone repository on GitHub, contact GitHub Support. If the fork has forks of its own, let support know if the forks should move with your repository into a new network or remain in the current network. For more information, see "About forks." Commit was made in a pull request that was merged and squashed Commits made in a pull request that was merged and squashed will not count toward your contributions. Only the user that merged the pull request and the user that opened the pull request receive contributions. No other contributors to the pull request will receive contribution credit. Further reading "Publicizing or hiding your private contributions on your profile" "Viewing contributions on your profile page" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Getting started with writing and formatting on GitHub - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Writing on GitHub / Getting started with writing and formatting on GitHub Getting started with writing and formatting on GitHub mac windows linux all You can use simple features to format your comments and interact with others in issues, pull requests, and wikis on GitHub. About writing and formatting on GitHub GitHub combines a syntax for formatting text called GitHub Flavored Markdown with a few unique writing features. Basic writing and formatting syntax Create sophisticated formatting for your prose and code on GitHub with simple syntax. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support About writing and formatting on GitHub - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Writing on GitHub / About writing and formatting on GitHub About writing and formatting on GitHub mac windows linux all GitHub combines a syntax for formatting text called GitHub Flavored Markdown with a few unique writing features. Markdown is an easy-to-read, easy-to-write syntax for formatting plain text. We've added some custom functionality to create GitHub Flavored Markdown, used to format prose and code across our site. You can also interact with other users in pull requests, issues, and wikis with features like @mentions, issue and PR references, and emoji. Text formatting toolbar Every comment field on GitHub contains a text formatting toolbar, allowing you to format your text without learning Markdown syntax. In addition to Markdown formatting like bold and italic styles and creating headers, links, and lists, the toolbar includes GitHub-specific features such as @mentions, task lists, and links to issues and pull requests. Further reading "Basic writing and formatting syntax" "Working with advanced formatting" "Mastering Markdown" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Basic writing and formatting syntax - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Writing on GitHub / Basic writing and formatting syntax Basic writing and formatting syntax mac windows linux all Create sophisticated formatting for your prose and code on GitHub with simple syntax. In this article: Headings Styling text Quoting text Quoting code Links Section links Relative links Lists Task lists Mentioning people and teams Referencing issues and pull requests Using emoji Paragraphs and line breaks Ignoring Markdown formatting Headings To create a heading, add one to six # symbols before your heading text. The number of # you use will determine the size of the heading. # The largest heading ## The second largest heading ###### The smallest heading Styling text You can indicate emphasis with bold, italic, or strikethrough text. Style Syntax Keyboard shortcut Example Output Bold ** ** or __ __ command/control + b **This is bold text** This is bold text Italic * * or _ _ command/control + i *This text is italicized* This text is italicized Strikethrough ~~ ~~ ~~This was mistaken text~~ This was mistaken text Bold and italic ** ** and _ _ **This text is _extremely_ important** This text is extremely important Quoting text You can quote text with a >. In the words of Abraham Lincoln: > Pardon my French Tip: When viewing a conversation, you can automatically quote text in a reply by highlighting the text, then typing r. For more information, see "Using keyboard shortcuts." Quoting code You can call out code or a command within a sentence with single backticks. The text within the backticks will not be formatted. Use `git status` to list all new or modified files that haven't yet been committed. To format code or text into its own distinct block, use triple backticks. Some basic Git commands are: ``` git status git add git commit ``` For more information, see "Creating and highlighting code blocks." Links You can create an inline link by wrapping link text in brackets [ ], and then wrapping the URL in parentheses ( ). You can also use the keyboard shortcut command + k to create a link. This site was built using [GitHub Pages](https://pages.github.com/). Tip: GitHub automatically creates links when valid URLs are written in a comment. For more information, see "Autolinked references and URLS." Section links You can link directly to a section in a rendered file by hovering over the section heading to expose the link: Relative links You can define relative links and image paths in your rendered files to help readers navigate to other files in your repository. A relative link is a link that is relative to the current file. For example, if you have a README file in root of your repository, and you have another file in docs/CONTRIBUTING.md, the relative link to CONTRIBUTING.md in your README might look like this: [Contribution guidelines for this project](docs/CONTRIBUTING.md) GitHub will automatically transform your relative link or image path based on whatever branch you're currently on, so that the link or path always works. You can use all relative link operands, such as ./ and ../. Relative links are easier for users who clone your repository. Absolute links may not work in clones of your repository - we recommend using relative links to refer to other files within your repository. Lists You can make an unordered list by preceding one or more lines of text with - or *. - George Washington - John Adams - Thomas Jefferson To order your list, precede each line with a number. 1. James Madison 2. James Monroe 3. John Quincy Adams Nested Lists You can create a nested list by indenting one or more list items below another item. To create a nested list using the web editor on GitHub or a text editor that uses a monospaced font, like Atom, you can align your list visually. Type space characters in front of your nested list item, until the list marker character (- or *) lies directly below the first character of the text in the item above it. 1. First list item - First nested list item - Second nested list item To create a nested list in the comment editor on GitHub, which doesn't use a monospaced font, you can look at the list item immediately above the nested list and count the number of characters that appear before the content of the item. Then type that number of space characters in front of the nested list item. In this example, you could add a nested list item under the list item 100. First list item by indenting the nested list item a minimum of five spaces, since there are five characters (100.) before First list item. 100. First list item - First nested list item You can create multiple levels of nested lists using the same method. For example, because the first nested list item has seven spaces (␣␣␣␣␣-␣) before the nested list content First nested list item, you would need to indent the second nested list item by seven spaces. 100. First list item - First nested list item - Second nested list item For more examples, see the GitHub Flavored Markdown Spec. Task lists To create a task list, preface list items with [ ]. To mark a task as complete, use [x]. - [x] Finish my changes - [ ] Push my commits to GitHub - [ ] Open a pull request If a task list item description begins with a parenthesis, you'll need to escape it with \: - [ ] \(Optional) Open a followup issue For more information, see "About task lists." Mentioning people and teams You can mention a person or team on GitHub by typing @ plus their username or team name. This will trigger a notification and bring their attention to the conversation. People will also receive a notification if you edit a comment to mention their username or team name. @github/support What do you think about these updates? When you mention a parent team, members of its child teams also receive notifications, simplifying communication with multiple groups of people. For more information, see "About teams." Typing an @ symbol will bring up a list of people or teams on a project. The list filters as you type, so once you find the name of the person or team you are looking for, you can use the arrow keys to select it and press either tab or enter to complete the name. For teams, enter the @organization/team-name and all members of that team will get subscribed to the conversation. The autocomplete results are restricted to repository collaborators and any other participants on the thread. Referencing issues and pull requests You can bring up a list of suggested issues and pull requests within the repository by typing #. Type the issue or pull request number or title to filter the list, and then press either tab or enter to complete the highlighted result. For more information, see "Autolinked references and URLs." Using emoji You can add emoji to your writing by typing :EMOJICODE:. @octocat :+1: This PR looks great - it's ready to merge! :shipit: Typing : will bring up a list of suggested emoji. The list will filter as you type, so once you find the emoji you're looking for, press Tab or Enter to complete the highlighted result. For a full list of available emoji and codes, check out emoji-cheat-sheet.com. Paragraphs and line breaks You can create a new paragraph by leaving a blank line between lines of text. Ignoring Markdown formatting You can tell GitHub to ignore (or escape) Markdown formatting by using \ before the Markdown character. Let's rename \*our-new-project\* to \*our-old-project\*. For more information, see Daring Fireball's "Markdown Syntax." Further reading "About writing and formatting on GitHub" "Working with advanced formatting" "Mastering Markdown" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Working with advanced formatting - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Writing on GitHub / Working with advanced formatting Working with advanced formatting mac windows linux all Formatting like tables, syntax highlighting, and automatic linking allows you to arrange complex information clearly in your pull requests, issues, and comments. Organizing information with tables You can build tables to organize information in comments, issues, pull requests, and wikis. Creating and highlighting code blocks Share samples of code with fenced code blocks and enabling syntax highlighting. Autolinked references and URLS References to URLs, issues, pull requests, and commits are automatically shortened and converted into links. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Organizing information with tables - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Writing on GitHub / Organizing information with tables Organizing information with tables mac windows linux all You can build tables to organize information in comments, issues, pull requests, and wikis. Creating a table You can create tables with pipes | and hyphens -. Hyphens are used to create each column's header, while pipes separate each column. You must include a blank line before your table in order for it to correctly render. | First Header | Second Header | | ------------- | ------------- | | Content Cell | Content Cell | | Content Cell | Content Cell | The pipes on either end of the table are optional. Cells can vary in width and do not need to be perfectly aligned within columns. There must be at least three hyphens in each column of the header row. | Command | Description | | --- | --- | | git status | List all new or modified files | | git diff | Show file differences that haven't been staged | Formatting content within your table You can use formatting such as links, inline code blocks, and text styling within your table: | Command | Description | | --- | --- | | `git status` | List all *new or modified* files | | `git diff` | Show file differences that **haven't been** staged | You can align text to the left, right, or center of a column by including colons : to the left, right, or on both sides of the hyphens within the header row. | Left-aligned | Center-aligned | Right-aligned | | :--- | :---: | ---: | | git status | git status | git status | | git diff | git diff | git diff | To include a pipe | as content within your cell, use a \ before the pipe: | Name | Character | | --- | --- | | Backtick | ` | | Pipe | \| | Further reading "Basic writing and formatting syntax" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Creating and highlighting code blocks - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Writing on GitHub / Creating and highlighting code blocks Creating and highlighting code blocks mac windows linux all Share samples of code with fenced code blocks and enabling syntax highlighting. Fenced code blocks You can create fenced code blocks by placing triple backticks ``` before and after the code block. We recommend placing a blank line before and after code blocks to make the raw formatting easier to read. ``` function test() { console.log("notice the blank line before this function?"); } ``` Tip: To preserve your formatting within a list, make sure to indent non-fenced code blocks by eight spaces. Syntax highlighting You can add an optional language identifier to enable syntax highlighting in your fenced code block. For example, to syntax highlight Ruby code: ```ruby require 'redcarpet' markdown = Redcarpet.new("Hello World!") puts markdown.to_html ``` We use Linguist to perform language detection and syntax highlighting. You can find out which keywords are valid in the languages YAML file. Further reading "Basic writing and formatting syntax" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Autolinked references and URLs - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Writing on GitHub / Autolinked references and URLs Autolinked references and URLs mac windows linux all References to URLs, issues, pull requests, and commits are automatically shortened and converted into links. URLs GitHub automatically creates links from standard URLs. Visit https://github.com For more information on creating links, see "Basic writing and formatting syntax." Issues and pull requests Within repositories, references to issues and pull requests are automatically converted to shortened links to the issue or pull request. Reference type Raw reference Short link Issue or pull request URL https://github.com/jlord/sheetsee.js/issues/26 #26 # and issue or pull request number #26 #26 GH- and issue or pull request number GH-26 GH-26 Username/Repository# and issue or pull request number jlord/sheetsee.js#26 jlord/sheetsee.js#26 Commit SHAs References to a commit's SHA hash are automatically converted into shortened links to the commit on GitHub. Reference type Raw reference Short link Commit URL https://github.com/jlord/sheetsee.js/commit/a5c3785ed8d6a35868bc169f07e40e889087fd2e a5c3785 SHA a5c3785ed8d6a35868bc169f07e40e889087fd2e a5c3785 User@SHA jlord@a5c3785ed8d6a35868bc169f07e40e889087fd2e jlord@a5c3785 Username/Repository@SHA User/Repository@SHA: jlord/sheetsee.js@a5c3785ed8d6a35868bc169f07e40e889087fd2e jlord/sheetsee.js@a5c3785 Further reading "Basic writing and formatting syntax" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Working with saved replies - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Writing on GitHub / Working with saved replies Working with saved replies mac windows linux all To save time and make sure you're delivering a consistent message, you can add saved replies to issue and pull request comments. About saved replies You can use a saved reply to respond to an issue or pull request. Creating a saved reply If you frequently add the same comment over and over, you can create a saved reply. Changing a saved reply If you have a saved reply that has an error or isn't saying exactly what you'd like, you can make it more useful by changing it. Deleting a saved reply If you find that you're no longer using a saved reply, you can delete it. Using saved replies When commenting on an issue or pull request, you can add a saved reply that you've already set up. The saved reply can be the entire comment or if you want to customize it, you can add or delete content. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support About saved replies - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Writing on GitHub / About saved replies About saved replies mac windows linux all You can use a saved reply to respond to an issue or pull request. Saved replies allow you to create a reusable response to issues and pull requests. Save time by creating a saved reply for the responses you use most frequently. Once you've added a saved reply, it can be used in both issues and pull requests. Saved replies are tied to your user account. Once they're created, you'll be able to use them across repositories and organizations. You can create a maximum of 50 saved replies. If you've reached the maximum limit, you can delete saved replies that you no longer use or edit existing saved replies. You can also use the GitHub-provided "Duplicate issue" saved reply to mark an issue as a duplicate and track it with a similar issue. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Creating a saved reply - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Writing on GitHub / Creating a saved reply Creating a saved reply mac windows linux all If you frequently add the same comment over and over, you can create a saved reply. In the upper-right corner of any page, click your profile photo, then click Settings. In the left sidebar, click Saved replies. Under "Add a saved reply", add your saved reply title. In the "Write" field, add the content you'd like to use for the saved reply. For more information on writing on GitHub, see "Basic writing and formatting syntax." To review your reply, click Preview. Click Add saved reply. Further reading "Using saved replies" "Changing a saved reply" "Deleting a saved reply" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Changing a saved reply - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Writing on GitHub / Changing a saved reply Changing a saved reply mac windows linux all If you have a saved reply that has an error or isn't saying exactly what you'd like, you can make it more useful by changing it. In the upper-right corner of any page, click your profile photo, then click Settings. In the left sidebar, click Saved replies. Under "Saved replies", click . Under "Edit saved reply", you can edit the title and the content of the saved reply. Click Update saved reply. Further reading "Creating a saved reply" "Deleting a saved reply" "Using saved replies" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Deleting a saved reply - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Writing on GitHub / Deleting a saved reply Deleting a saved reply mac windows linux all If you find that you're no longer using a saved reply, you can delete it. In the upper-right corner of any page, click your profile photo, then click Settings. In the left sidebar, click Saved replies. Under "Saved replies", click . Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Using saved replies - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Writing on GitHub / Using saved replies Using saved replies mac windows linux all When commenting on an issue or pull request, you can add a saved reply that you've already set up. The saved reply can be the entire comment or if you want to customize it, you can add or delete content. On GitHub, navigate to the main page of the repository. Under your repository name, click Issues or Pull requests. To add a saved reply, click . From the list, select the saved reply you'd like to add to your comment. Tip: You can filter the list by typing the title of the saved reply. Further reading "Creating a saved reply" "Changing a saved reply" "Deleting a saved reply" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Getting started with notifications - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Receiving notifications about activity on GitHub / Getting started with notifications Getting started with notifications mac windows linux all Notifications help you keep track of the conversations and updates you're interested in. You can receive notifications on GitHub or through your email client for conversations you're participating in or updates you're watching. About notifications Notifications provide updates about the activities and conversations you're interested in. You can receive notifications on GitHub or through your email client. About web notifications If you're receiving web notifications, you'll see participating and watching notifications on GitHub. About email notifications If you're receiving email notifications, you'll see notifications in your email client and be able to filter emails using the metadata. Accessing your notifications Depending on how your notification delivery is set up, you can either access your notifications on GitHub or through your email client. About your organization's news feed You can use your organization's news feed to keep up with recent activity on repositories owned by that organization. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support About notifications - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Receiving notifications about activity on GitHub / About notifications About notifications mac windows linux all Notifications provide updates about the activities and conversations you're interested in. You can receive notifications on GitHub or through your email client. The notifications you receive will either be participating notifications or watching notifications. Both types of notifications can be received as web notifications or email notifications. For more information, see "About web notifications" and "About email notifications." Participating notifications are received when you're directly involved in activities or conversations within a repository or a team you're a member of. You'll receive a notification when: You, or a team you're a member of, are mentioned. For more information, see "Basic writing and formatting syntax." The parent team of a child team you're a member of is mentioned. For more information, see "About teams.". You're assigned to an issue or pull request. A comment is added in a conversation you're subscribed to. A commit is made to a pull request you're subscribed to. You open, comment on, or close an issue or pull request. A review is submitted that approves or requests changes to a pull request you're subscribed to. You, or a team you're a member of, are requested to review a pull request. You, or a team you're a member of, are the designated owner of a file and someone opens a pull request that changes that file. You create or reply to a team discussion. Watching notifications are received for updates in repositories or team discussions that you're watching. You'll receive a notification when: An issue is opened. A comment is added to an open issue. A pull request is opened. A comment is added to an open pull request. A comment is added to a commit. A release is published. For more information, see "About releases." A review is submitted that approves or requests changes to a pull request. For a team you're watching, a team discussion is created or a reply is added. For more information, see "About team discussions." For the parent team of a team you're a member of and watching, a team discussion is created or a reply is added. For more information on nested teams, see "About teams." A team discussion post for a parent team of or a team you're a member of and watching, is opened, edited, or replied to. For more information, see "Nested teams." Security alerts for vulnerable dependencies If your repository has a dependency manifest in Ruby or JavaScript (and if you've set up the dependency graph if it's a private repository), you can choose to receive security alerts when GitHub detects a vulnerable dependency in your repository. You can configure your security alerts as web notifications, email notifications, or alerts in the GitHub interface. For more information, see "About security alerts for vulnerable dependencies." For more information about configuring your security alerts, see "Choosing the delivery method for your notifications." Further reading "Choosing the delivery method for your notifications." "Listing the repositories you're watching" "Watching and unwatching repositories" "Watching and unwatching team discussions" "Subscribing to and unsubscribing from conversations" "Subscribing to and unsubscribing from notifications" "Types of emails GitHub sends" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support About web notifications - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Receiving notifications about activity on GitHub / About web notifications About web notifications mac windows linux all If you're receiving web notifications, you'll see participating and watching notifications on GitHub. Note: If you receive both web and email notifications, you can "share" the state of the notification by automatically marking web notifications as read once you've read the corresponding email notification. To enable this shared state, you must be able to view images from 'notifications@github.com'. On GitHub, the notifications overview shows you notifications for each repository or team you're watching and also includes notifications for conversations you're participating in. For more information, see "Accessing your notifications." Note: To access the notifications overview, you must have web notifications set up. For more information on enabling web notifications, see "Choosing the delivery method for your notifications." You can click on a notification in your notifications overview to be redirected to the issue, pull request, or team discussion, the notification is referencing. From your notifications overview, you can also mark notifications as read and unsubscribe from threads. Further reading "About notifications" "Accessing your notifications" "Listing the repositories you're watching" "Watching and unwatching repositories" "Subscribing to and unsubscribing from notifications" "Types of emails GitHub sends" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support About email notifications - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Receiving notifications about activity on GitHub / About email notifications About email notifications mac windows linux all If you're receiving email notifications, you'll see notifications in your email client and be able to filter emails using the metadata. Note: If you receive both web and email notifications, you can "share" the state of the notification by automatically marking web notifications as read once you've read the corresponding email notification. To enable this shared state, you must be able to view images from 'notifications@github.com'. If you've enabled email notifications, you'll receive multipart emails that contain both HTML and plain text copies of the email content, including Markdown, @mentions, emojis, hash-links, and more. For more information on enabling email notifications, see "Choosing the delivery method for your notifications." Tip: If you want to only see the email text, you can configure your client to select and display plain text copy only. If you're using Gmail, you can click a button beside the notification email to visit the original issue or pull request that generated the notification. The metadata of each email you receive is specific to the notification the email is addressing. To help you filter or forward notifications that GitHub sends, header information in every email is consistent. The header information you'll see is: Header Information From address This address will always be 'notifications@github.com'. To field This field connects directly to the thread. If you reply to the email, you'll add a new comment to the conversation. Cc address GitHub will Cc you if you're subscribed to a conversation. The second Cc email address matches the notification reason. The suffix for these notification reasons is @noreply.github.com. The possible notification reasons are: assign: You were assigned to an issue or pull request. author: You created an issue or pull request. comment: You commented on an issue or pull request. mention: You were mentioned on an issue or pull request. push: Someone committed to a pull request you're subscribed to. state_change: An issue or pull request you're subscribed to was either closed or opened. team_mention: A team you belong to was mentioned on an issue or pull request. your_activity: You opened, commented on, or closed an issue or pull request. mailing list field This field identifies the name of the repository and its owner. The format of this address is always <repository name>.<repository owner>.github.com. Further reading "About notifications" "Choosing the delivery method for your notifications" "Choosing the types of notifications you receive" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Accessing your notifications - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Receiving notifications about activity on GitHub / Accessing your notifications Accessing your notifications mac windows linux all Depending on how your notification delivery is set up, you can either access your notifications on GitHub or through your email client. If you have email notifications set up, you can access your notifications through your email client. For more information, see "About email notifications." If you have web notifications set up, you can access your notifications through GitHub. For more information, see "About web notifications." Accessing your web notifications In the upper-right corner of any page, click . If you've disabled web notifications and you don't see the bell icon, you can navigate to https://github.com/watching. In the left sidebar, to see all notifications for activity you're participating in, click Participating. In the left sidebar, click the name of a repository to see notifications for a specific repository. Further reading "About notifications" "Listing the repositories you're watching" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support About your organization’s news feed - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Receiving notifications about activity on GitHub / About your organization’s news feed About your organization’s news feed mac windows linux all You can use your organization's news feed to keep up with recent activity on repositories owned by that organization. An organization's news feed shows other people's activity on repositories owned by that organization. You can use your organization's news feed to see when someone opens, closes, or merges an issue or pull request, creates or deletes a branch, comments on an issue, pull request, or commit, or pushes new commits to GitHub. Accessing your organization's news feed Sign in to your GitHub account. Open your personal dashboard. Click the account context switcher in the upper-left corner of the page. Select an organization from the drop-down menu. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Configuring how you receive notifications - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Receiving notifications about activity on GitHub / Configuring how you receive notifications Configuring how you receive notifications mac windows linux all You can choose both the delivery method for notifications and the type of notification you receive. Choosing the delivery method for your notifications You can receive your notifications on GitHub or have them delivered through your email client. Choosing the types of notifications you receive You can choose to have notifications automatically sent when a user commits to a pull request you're subscribed to. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Choosing the delivery method for your notifications - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Receiving notifications about activity on GitHub / Choosing the delivery method for your notifications Choosing the delivery method for your notifications mac windows linux all You can receive your notifications on GitHub or have them delivered through your email client. For personal accounts, notification emails are automatically sent to your primary email address. You can also manage which verified email address organizations should send notifications to. Choosing the delivery method for notifications about repository activity In the upper-right corner of any page, click your profile photo, then click Settings. In the user settings sidebar, click Notifications. Configure how you would like to receive notifications you either participate in or watch by selecting the checkboxes: Selecting Email sends an email to your primary email address Selecting Web allows you to access the notifications on GitHub. If you selected Email for conversations you're either participating in or watching, choose which updates you receive by selecting the checkboxes in the "Notification email" section: Select Comments on Issues and Pull Requests to receive an email when someone makes a comment in an issue or in the "Conversation" tab of a pull request. Select Pull request reviews to receive an email when someone makes a review comment in the "Files changed" tab of a pull request. Select Pull request pushes to receive an email when someone adds commits to a pull request that you're subscribed to. Select Include your own updates to receive an email when you open, comment on, or close an issue or pull request. Choosing the delivery method for security alerts for vulnerable dependencies If your repository has a dependency manifest in Ruby or JavaScript (and if you've set up the dependency graph if it's a private repository), you can choose to receive security alerts when GitHub detects a vulnerable dependency in your repository. You can configure your security alerts as web notifications, email notifications, or alerts in the GitHub interface. For more information, see "About security alerts for vulnerable dependencies." In the upper-right corner of any page, click your profile photo, then click Settings. In the user settings sidebar, click Notifications. Under "Vulnerability alerts", configure how you would like to receive notifications when GitHub detects a vulnerable dependency in your repository: Selecting Email sends an email to your primary email address Selecting Web allows you to access the notifications on GitHub Selecting UI alerts displays a banner in the GitHub interface Choosing the notification delivery method for organizations you belong to If you belong to an organization, you can choose the email account you want notifications for organization activity sent to. For example, if you belong to an organization for work, you may want your notifications sent to your work email address, rather than your personal address. Tip: You'll only receive notification emails if you've chosen to receive email notifications in your notification settings. In the upper-right corner of any page, click your profile photo, then click Settings. In the user settings sidebar, click Notifications. In the "Primary email address" list, select the email address you'd like notifications sent to. Customizing email routes per organization If you are a member of more than one organization, you can configure each one to send notifications to any of your verified email addresses. In the upper-right corner of any page, click your profile photo, then click Settings. In the user settings sidebar, click Notifications. Under "Custom routing," find your organization's name in the list. Click Edit next to the email address you want to change. Select one of your verified email addresses, then click Save. Further reading "About notifications" "About notification emails" "About web notifications" "Watching and unwatching repositories" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Choosing the types of notifications you receive - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Receiving notifications about activity on GitHub / Choosing the types of notifications you receive Choosing the types of notifications you receive mac windows linux all You can choose to have notifications automatically sent when a user commits to a pull request you're subscribed to. Enabling email service notifications for pushes to your repository Email notifications you receive for pushes to a repository list new commits and link to a diff containing just those commits. Web notifications you receive for pushes to a repository also link to a diff containing the new commits. You can filter email notifications you receive for pushes to a repository. For more information, see "About notification emails." You can also turn off email notifications for pushes. For more information, see "Choosing the delivery method for your notifications." When you receive an email notification from pushes to a repository, you'll see: The name of the repository where the commit was made The branch a commit was made in The SHA1 of the commit, including a link to the diff in GitHub The author of the commit The date when the commit was made The files that were changed as part of the commit The commit message On GitHub, navigate to the main page of the repository. Under your repository name, click Settings. Click Integrations & Services. Click Add service, then type "Email." Type up to two email addresses, separated by whitespace, where you'd like notifications to be sent. If you'd like to send emails to more than two accounts, set one of the email addresses to a group email address. If you operate your own server, you can verify the integrity of emails via the Secret token. This token is sent with the email as the Approved header. If the Approved header matches the token you sent, you can trust that the email is from GitHub. Optionally, select Send from author to have emails delivered using the committer's email address. Otherwise, emails are sent from noreply@github.com. Click Add service. Disabling email service notifications for pushes to your repository On GitHub, navigate to the main page of the repository. Under your repository name, click Settings. Click Integrations & Services. Under "Services", next to your added email service, click . Further reading "About notifications" "Choosing the delivery method for your notifications" "About email notifications" "About web notifications" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Managing your notifications - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Receiving notifications about activity on GitHub / Managing your notifications Managing your notifications mac windows linux all To make it easier to receive the notifications you're interested in, you can mark notifications as read, subscribe and unsubscribe from notifications, and watch and unwatch repositories. Marking notifications as read If you receive web notifications, you can mark notifications as read without removing them. If an update is made to the conversation, you'll receive a new notification. Subscribing to and unsubscribing from notifications You can subscribe to individual conversations in issues, pull requests, and team discussions, even if you're not watching the repository or a member of the team where the conversation is occuring. If you're no longer interested in a conversation, you can unsubscribe from any future notifications. Watching and unwatching repositories You can watch a repository to receive notifications for new pull requests and issues that are created. You can also unwatch a repository if you no longer want to receive notifications for that specific repository. Watching and unwatching team discussions You can watch a team to receive notifications for team discussions. You can unwatch a team if you no longer want to receive notifications for that team's discussions. Listing the repositories you're watching You can get an overview of all the repositories you're watching so that you can easily remove any you're no longer interested in receiving notifications for. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Marking notifications as read - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Receiving notifications about activity on GitHub / Marking notifications as read Marking notifications as read mac windows linux all If you receive web notifications, you can mark notifications as read without removing them. If an update is made to the conversation, you'll receive a new notification. Tip: From the notifications overview, you can mark notifications as read without reviewing them. This is helpful if you're watching a repository that you're not actively involved with. To mark all notifications in a repository as read, click the name of the repository, and in the upper-right corner, click the check mark. To mark a single notification in a repository as read, click the name of the repository, and next to the issue or pull request, click the check mark. Further reading "About notifications" "About web notifications" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Subscribing to and unsubscribing from notifications - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Receiving notifications about activity on GitHub / Subscribing to and unsubscribing from notifications Subscribing to and unsubscribing from notifications mac windows linux all You can subscribe to individual conversations in issues, pull requests, and team discussions, even if you're not watching the repository or a member of the team where the conversation is occuring. If you're no longer interested in a conversation, you can unsubscribe from any future notifications. Subscribing to issues and pull requests When you subscribe to a conversation in an issue or pull request, you'll receive notifications for each update to the conversation even if you're not participating in the conversation. On GitHub, navigate to the main page of the repository. Under your repository name, click Issues or Pull requests. Choose an issue or pull request to subscribe to. In the right sidebar, click Subscribe. Unsubscribing from issues and pull requests When you unsubscribe from a conversation in an issue or pull request, you'll no longer receive notifications about the conversation. If you or a team you're a member of are @mentioned in the conversation, you'll begin receiving notifications again. For more information about @mentions, see "Basic writing and formatting syntax." On GitHub, navigate to the main page of the repository. Under your repository name, click Issues or Pull requests. Choose an issue or pull request to unsubscribe from. In the right sidebar, click Unsubscribe. Subscribing to team discussions Team discussions are only available on team pages in organizations. For more information, see "About team discussions." In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click Teams. On the Teams tab, click the name of the team. On the team page, find the discussion you want to subscribe to. In the top right corner of the discussion, click to subscribe to the discussion. Unsubscribing from team discussions Team discussions are only available on team pages in organizations. For more information, see "About team discussions." In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click Teams. On the Teams tab, click the name of the team. On the team page, find the discussion you want to unsubscribe from. In the top right corner of the discussion, click to unsubscribe from the discussion. Further reading "About notifications" "About conversations on GitHub" "Watching and unwatching repositories" "Listing the repositories you're watching" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Watching and unwatching repositories - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Receiving notifications about activity on GitHub / Watching and unwatching repositories Watching and unwatching repositories mac windows linux all You can watch a repository to receive notifications for new pull requests and issues that are created. You can also unwatch a repository if you no longer want to receive notifications for that specific repository. Watching all repositories that you have push access to In the upper-right corner of any page, click your profile photo, then click Settings. In the user settings sidebar, click Notifications. Under "Automatic watching," select Automatically watch repositories. Watching a single repository On GitHub, navigate to the main page of the repository. In the upper-right corner, in the "Watch" list, select Watching. Unwatching all repositories that you have push access to In the upper-right corner of any page, click your profile photo, then click Settings. In the user settings sidebar, click Notifications. Under "Automatic watching," unselect Automatically watch repositories. Unwatching a single repository On GitHub, navigate to the main page of the repository. In the upper-right corner, select Unwatch from the Watch drop-down. Note: You can also choose to ignore a repository. If you ignore a repository, you won't receive any notifications. We don't recommend ignoring repositories as you won't be notified if you're @mentioned. If you experiencing abuse and want to ignore a repository, please contact support so we can help. GitHub does not tolerate abuse. For more information on GitHub's policies, see our Terms of Service and Community Guidelines. Further reading "About notifications" "Subscribing to and unsubscribing from notifications" "Listing the repositories you're watching" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Watching and unwatching team discussions - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Receiving notifications about activity on GitHub / Watching and unwatching team discussions Watching and unwatching team discussions mac windows linux all You can watch a team to receive notifications for team discussions. You can unwatch a team if you no longer want to receive notifications for that team's discussions. By default, you'll automatically receive notifications for team discussions you're a member of. If you don't want to receive certain notifications for an existing team discussion, you must unwatch that team. You can also unsubscribe or subscribe to specific team discussion posts. For more information, see "About team discussions" and "Subscribing to and unsubscribing from conversations." If you don't want to automatically watch team discussions when you become a member of new teams, you can update your automatic watching settings. Watching all team discussions for new teams you join To automatically watch all team discussions for new teams you join, set your automatic watching notification settings. Note: By default, this setting is set to Automatically watching teams. In the upper-right corner of any page, click your profile photo, then click Settings. In the user settings sidebar, click Notifications. Under "Automatic watching," select Automatically watch teams. Watching a single team's discussions In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click Teams. On the Teams tab, click the name of the team. On the left side of the team page, under the team name, click Watch to open your notifications options. Then click Watching. Unwatching team discussions for all new teams you join If you don't want to automatically receive team discussion notifications when you join a team, you can change your notification settings to unwatch all new teams you join. In the upper-right corner of any page, click your profile photo, then click Settings. In the user settings sidebar, click Notifications. Under "Automatic watching," unselect Automatically watch teams. Unwatching a single team's discussions In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click Teams. On the Teams tab, click the name of the team. On the left side of the team page, under the team name, click Unwatch to open your notifications options. Then click Not watching. Note: You can also choose to ignore a team's notifications. If you ignore a team, you won't receive any notifications. We don't recommend ignoring teams as you won't be notified if you're @mentioned. If you're experiencing abuse and want to ignore a team, please contact support so we can help. GitHub does not tolerate abuse. For more information on GitHub's policies, see our Terms of Service and Community Guidelines. Further reading "About notifications" "About team discussions" "About teams" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Listing the repositories you're watching - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Receiving notifications about activity on GitHub / Listing the repositories you're watching Listing the repositories you're watching mac windows linux all You can get an overview of all the repositories you're watching so that you can easily remove any you're no longer interested in receiving notifications for. In the upper-right corner of any page, click . If you've disabled web notifications and you don't see the bell icon, you can navigate to https://github.com/watching. Click Watching to view the list of repositories you're watching. Click Unwatch next to the repository you're no longer interested in receiving notifications for. Further reading "About notifications" "Watching and unwatching repositories" "Viewing all of your issues and pull requests" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Collaborating with groups in organizations - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Collaborating with groups in organizations Collaborating with groups in organizations mac windows linux all Groups of people can collaborate across many projects at the same time in organization accounts. About organizations Organizations are shared accounts where businesses and open-source projects can collaborate across many projects at once. Owners and administrators can manage member access to the organization's data and projects with sophisticated security and administrative features. Creating a new organization from scratch Create an organization to apply fine-grained access permissions to repositories. Accessing your organization's settings The organization account settings page provides several ways to manage the account, such as billing, team membership, and repository settings. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support About organizations - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / About organizations About organizations mac windows linux all Organizations are shared accounts where businesses and open-source projects can collaborate across many projects at once. Owners and administrators can manage member access to the organization's data and projects with sophisticated security and administrative features. Organizations include: A free plan with unlimited collaborators on unlimited public repositories The option to upgrade to paid plans with unlimited private repositories, sophisticated user authentication and management, 24/5 support, and a service level agreement for uptime availability Unlimited membership with a variety of roles that grant different levels of access to the organization and its data The ability to give members a range of access permissions to your organization's repositories Nested teams that reflect your company or group's structure with cascading access permissions and mentions The ability for organization owners to view members' two-factor authentication (2FA) status The option to require all organization members to use two-factor authentication Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Creating a new organization from scratch - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Creating a new organization from scratch Creating a new organization from scratch mac windows linux all Create an organization to apply fine-grained access permissions to repositories. When you create a new organization from scratch, it doesn't have any repositories associated with it. At any time, all members of an organization can add new repositories, and members with owner or admin permissions can transfer existing repositories. In the upper-right corner of any page, click your profile photo, then click Settings. In your user settings sidebar, click Organizations. In the "Organizations" section, click New organization. Under "Organization name", type a name for your organization. Under "Billing email", type the email where receipts for your organization's paid plan should be sent. Optionally, if your organization account is owned by a business, select This account is owned by a business, then type your company's name. Under "Choose your plan", select a billing plan. If you choose to upgrade to a paid plan, enter the number of paid users you would like to add. Choose to pay for your account with a credit card or with PayPal, then enter your payment information. Read the information about GitHub's Terms of Service and Privacy Policy, then click Create organization. Further reading "Setting your organization's billing email" "Switching between monthly and yearly billing for your organization" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Accessing your organization's settings - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Accessing your organization's settings Accessing your organization's settings mac windows linux all The organization account settings page provides several ways to manage the account, such as billing, team membership, and repository settings. Tip: Only organization owners and billing managers can see and change the billing information and account settings for an organization. For more information, see "Permission levels for an organization." In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click Settings. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Managing membership in your organization - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Managing membership in your organization Managing membership in your organization mac windows linux all After you create your organization, you can invite people to become members of the organization. You can also remove members of the organization, and reinstate former members. Inviting users to join your organization You can invite anyone to become a member of your organization using their GitHub username or email address. Canceling or editing an invitation to join your organization Organization owners can edit or cancel an invitation to become a member of your organization any time before the user accepts. Removing a member from your organization If members of your organization no longer require access to any repositories owned by the organization, you can remove them from the organization. Reinstating a former member of your organization You can invite former organization members to rejoin your organization, and choose whether to restore the person's former role, access permissions, forks, and settings. Can I create accounts for people in my organization? While you can add users to an organization you've created, you can't create personal user accounts on behalf of another person. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Inviting users to join your organization - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Inviting users to join your organization Inviting users to join your organization mac windows linux all You can invite anyone to become a member of your organization using their GitHub username or email address. Tips: Only organization owners can invite users to join an organization. For more information, see "Permission levels for an organization." If your organization is on a paid per-user plan, an unused seat must be available before you can invite a new member to join the organization or reinstate a former organization member. For more information, see "About per-user pricing." If your organization requires members to use two-factor authentication, users you invite must enable two-factor authentication before they can accept the invitation. In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click People. On the People tab, click Invite member. Type the username or email address of the person you want to invite and click Enter. If the person you're inviting was an organization member within the last three months, choose whether to restore their privileges or start fresh, then click Invite and reinstate or Invite and start fresh. If the person you're inviting has never been a member of the organization or if you cleared their privileges, choose a role for the user, and optionally add them to some teams, then click Send invitation. The invited person will receive an email inviting them to the organization. They will need to accept the invitation before becoming a member of the organization. You can edit or cancel an invitation any time before the user accepts. Further reading "Adding organization members to a team" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Canceling or editing an invitation to join your organization - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Canceling or editing an invitation to join your organization Canceling or editing an invitation to join your organization mac windows linux all Organization owners can edit or cancel an invitation to become a member of your organization any time before the user accepts. In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click People. On the People tab, click Pending invitation. Next to the username or email address of the person whose invitation you'd like to edit or cancel, click Edit invitation. Decide whether to edit or cancel the user's invitation to join your organization. To edit the user's invitation, select a different role or team, then click Update invitation. To cancel the user's invitation to join your organization, click Cancel invitation. Further reading "Inviting users to join your organization" "Adding organization members to a team" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Removing a member from your organization - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Removing a member from your organization Removing a member from your organization mac windows linux all If members of your organization no longer require access to any repositories owned by the organization, you can remove them from the organization. Only organization owners can remove members from an organization. Warning: When you remove users from an organization: The paid seat count does not automatically downgrade. To pay for fewer seats after removing users from your organization, follow the steps in "Downgrading your organization's paid seats." They will lose access to private forks of your organization's private repositories, but may still have local copies. However, they cannot sync local copies with your organization's repositories. Their private forks can be restored if the user is reinstated as an organization member within three months of being removed from the organization. Ultimately, you are responsible for ensuring that people who have lost access to a repository delete any confidential information or intellectual property. To help the person you're removing from your organization transition and help ensure they delete confidential information or intellectual property, we recommend sharing a checklist of best practices for leaving your organization. For an example, see "Best practices for leaving your company." Note: When you remove a user from your organization, their membership data is saved for three months. You can restore their data, or any private forks they owned of your organization's repositories, if you invite the user to rejoin the organization within that time frame. For more information, see "Reinstating a former member of your organization." For more information, see "Reinstating a former member of your organization." Revoking the user's membership In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click People. Select the member or members you'd like to remove from the organization. Above the list of members, use the drop-down menu, and click Remove from organization. Review the member or members who will be removed from the organization, then click Remove members. Further reading "Removing organization members from a team" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Reinstating a former member of your organization - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Reinstating a former member of your organization Reinstating a former member of your organization mac windows linux all You can invite former organization members to rejoin your organization, and choose whether to restore the person's former role, access permissions, forks, and settings. If you remove a user from your organization, convert an organization member to an outside collaborator, or a user is removed from your organization because you've required members and outside collaborators to enable two-factor authentication (2FA), the user's access privileges and settings are saved for three months. You can restore the user's privileges if you invite them back to the organization within that time frame. You can send an invitation to reinstate a user's privileges and access to the organization before they have enabled two-factor authentication and they must enable 2FA before they can accept your invitation to rejoin the organization. When you reinstate a former organization member, you can restore: The user's role in the organization Any private forks of repositories owned by the organization Membership in the organization's teams Previous access and permissions for the organization's repositories Stars for organization repositories Issue assignments in the organization Repository subscriptions (notification settings for watching, not watching, or ignoring a repository's activity) Tips: If an organization member was removed from the organization because they did not use two-factor authentication and your organization still requires members to use 2FA, the former member must enable two-factor authentication before you can reinstate their membership. Only organization owners can invite users to join an organization. For more information, see "Permission levels for an organization." If your organization is on a paid per-user plan, an unused seat must be available before you can reinstate a former organization member. For more information, see "About per-user pricing." In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click People. On the People tab, click Invite member. Type the username of the person you want to reinstate and click Enter. Choose whether to restore that person's previous privileges in the organization or clear their previous privileges and set new access permissions, then click Invite and reinstate or Invite and start fresh. If you cleared the previous privileges for a former organization member, choose a role for the user, and optionally add them to some teams, then click Send invitation. The invited person will receive an email inviting them to the organization. They will need to accept the invitation before becoming a member of the organization. You can edit or cancel an invitation any time before the user accepts. Further reading "Converting an organization member to an outside collaborator" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Can I create accounts for people in my organization? - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Can I create accounts for people in my organization? Can I create accounts for people in my organization? mac windows linux all While you can add users to an organization you've created, you can't create personal user accounts on behalf of another person. Because you access an organization by logging in to a personal account, each of your team members needs a personal account. Once you have user names for each person you'd like to add to your organization, you can add them to teams. Adding users to your organization Provide each person instructions to create a personal account. Ask for the username of each person you want to give organization membership to. Invite the new personal accounts to join your organization. Use organization roles and repository permissions to limit the access of each account. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Managing people's access to your organization with roles - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Managing people's access to your organization with roles Managing people's access to your organization with roles mac windows linux all A person's role in your organization defines their level of access to your organization, its settings, and your data. You can make people owners, members, or billing managers for your organization, or you can give them team maintainer permissions. Permission levels for an organization After you create an organization, you should give Owner permissions to a small group of people who will manage the organization account. Changing a person's role to owner Organization owners can give owner permissions to any member of the organization. Giving "team maintainer" permissions to an organization member An organization owner can promote any member of the organization to team maintainer for a team, giving them a subset of privileges available to organization owners. Adding a billing manager to your organization A billing manager is a user who manages the billing settings for your organization, such as updating payment information. This is a great option if regular members of your organization don't typically have access to billing resources. Removing a billing manager from your organization If a person with the billing manager role no longer needs to view or change your organization's billing information, you can remove their access to the organization. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Permission levels for an organization - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Permission levels for an organization Permission levels for an organization mac windows linux all After you create an organization, you should give Owner permissions to a small group of people who will manage the organization account. Organization members can have owner, billing manager, or member roles: Owners have complete administrative access to your organization. This role should be limited to a few people in your organization. For more information, see "Changing a person's role to owner." Billing managers allow a person to manage billing settings. For more information, see "Adding a billing manager to your organization". Members are the default role for everyone else. Organization action Owners Members Billing managers View and edit billing information X X Invite people to join the organization X Edit and cancel invitations to join the organization X Remove members from the organization X Reinstate former members to the organization X Add and remove people from all teams X Promote organization members to team maintainer X Add collaborators to all repositories X Access the organization audit log X Delete all teams X Delete the organization account, including all repositories X Create teams X X See all organization members and teams X X @mention any visible team X X Can be made a team maintainer X X View and post public team discussions to all teams (see "About team discussions" for details) X X View and post private team discussions to all teams (see "About team discussions" for details) X Edit and delete team discussions in all teams (see "Editing a comment" and "Deleting a comment" for details) X Set a team profile picture in all teams (see "Setting your team's profile picture" for details) X Enable and enforce SAML single sign-on X Transfer repositories X View a project board and add or reorganize its cards and columns X X Create or delete a project board and edit its description X X Automate actions for project boards X X Purchase, install, manage billing for, and cancel GitHub Marketplace apps X List apps in GitHub Marketplace X Receive security alerts about vulnerable dependencies for all of an organization's repositories X Allow or disable forks for all private repositories in an organization X Outside collaborators To keep your organization data secure while allowing access to repositories, you can add outside collaborators. An outside collaborator is a person who has access to one or more organization repositories but is not explicitly a member of the organization, such as a consultant or temporary employee. For more information, see: "Adding outside collaborators to repositories in your organization" "Converting an organization member to an outside collaborator" "Removing an outside collaborator from an organization repository" Further reading "Repository permission levels for an organization" "About teams" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Changing a person's role to owner - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Changing a person's role to owner Changing a person's role to owner mac windows linux all Organization owners can give owner permissions to any member of the organization. Organization members with the owner role have full administrative access to the organization. For more information, see "Permission levels for an organization." In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click People. Select the person or people you'd like to promote to owner. Above the list of members, use the drop-down menu and click Change role. Select a new role for the person or people, then click Change role. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Giving "team maintainer" permissions to an organization member - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Giving "team maintainer" permissions to an organization member Giving "team maintainer" permissions to an organization member mac windows linux all An organization owner can promote any member of the organization to team maintainer for a team, giving them a subset of privileges available to organization owners. Members with team maintainer permissions can: Change the team's name and description Change the team's visibility Set the team profile picture Edit team discussions Delete team discussions Add organization members to the team Remove organization members from the team Promote an existing team member to team maintainer Remove the team's access to repositories Reinstate a former organization member Promoting an organization member to team maintainer Before promoting an organization member to team maintainer, the person must already be a member of the team. In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click Teams. On the Teams tab, click the name of the team. At the top of the team page, click Members. Select the person or people you'd like to promote to team maintainer. Above the list of team members, use the drop-down menu and click Change role.... Select a new role and click Change role. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Adding a billing manager to your organization - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Adding a billing manager to your organization Adding a billing manager to your organization mac windows linux all A billing manager is a user who manages the billing settings for your organization, such as updating payment information. This is a great option if regular members of your organization don't typically have access to billing resources. Members of your organization's Owners team can give billing manager permissions to people. Once a person accepts their invitation to become a billing manager for your organization, they can invite additional people to be billing managers. Note: You can add a billing manager without an extra paid seat on your organization's billing plan. Permissions for billing managers Billing managers can: Upgrade or downgrade the account Add, update, or remove payment methods View payment history Download receipts View, invite, and remove billing managers In addition, all billing managers will receive billing receipts by email on the organization's billing date. Billing managers are not able to: Create or access repositories in your organizations See private members of your organization Be seen in the list of organization members Purchase, edit, or cancel subscriptions for GitHub Marketplace apps Tip: If your organization requires members, billing managers, and outside collaborators to use two-factor authentication, the user must enable two-factor authentication before they can accept your invitation to become a billing manager for the organization. Inviting a billing manager The invited person will receive an invitation email asking them to become a billing manager for your organization. Once the invited person clicks the accept link in their invitation email, they will automatically be added to the organization as a billing manager. If they don't already have a GitHub account, they will be directed to sign up for one, and they will be automatically added to the organization as a billing manager after they create an account. In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click Settings. In your organization's Settings sidebar, click Billing. Next to Billing managers, click Add a billing manager. Type the username or email address of the person you want to add and click Send invitation. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Removing a billing manager from your organization - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Removing a billing manager from your organization Removing a billing manager from your organization mac windows linux all If a person with the billing manager role no longer needs to view or change your organization's billing information, you can remove their access to the organization. Note: Only organization members with the owner or billing manager role can access or change billing settings for your organization. In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click Settings. In your organization's Settings sidebar, click Billing. In the Billing managers list, next to the name of the person you want to remove, click . Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Organizing members into teams - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Organizing members into teams Organizing members into teams mac windows linux all You can group organization members into teams that reflect your company or group's structure with cascading access permissions and mentions. About teams Teams are groups of organization members that reflect your company or group's structure with cascading access permissions and mentions. Creating a team You can create independent or nested teams to manage repository permissions and mentions for groups of people. Setting your team's profile picture Team maintainers and organization owners can set a profile picture for a team, which is displayed on the team's page. Adding organization members to a team People with owner or team maintainer permissions can add organization members to teams. People with owner permissions can also invite non-members to join a team and the organization. Renaming a team Team maintainers and organization owners can edit the name and description of a team. Changing team visibility Team maintainers and organization owners can determine whether a team is visible or secret. Moving a team in your organization’s hierarchy Team maintainers and organization owners can nest a team under a parent team, or change or remove a nested team's parent. Requesting to add a child team If you have maintainer permissions in a team, you can request to nest an existing team under your team in your organization’s hierarchy. Removing organization members from a team People with owner or team maintainer permissions can remove team members from a team. This may be necessary if a person no longer needs access to a repository the team grants, or if a person is no longer focused on a team's projects. Deleting a team Organization owners can delete teams at any time from the team's settings page. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support About teams - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / About teams About teams mac windows linux all Teams are groups of organization members that reflect your company or group's structure with cascading access permissions and mentions. Organization owners and team maintainers can give teams admin, read, or write access to organization repositories. Organization members can send a notification to an entire team by mentioning the team's name. Organization members can also send a notification to an entire team by requesting a review from that team. Organization members can request reviews from specific teams with read access to the repository where the pull request is opened. Teams can be designated as owners of certain types or areas of code in a CODEOWNERS file. Team visibility Teams can be visible or secret: Visible teams can be viewed and @mentioned by every organization member. Secret teams are only visible to the people on the team and people with owner permissions. They're great for hiding teams with sensitive names or members, such as those used for working with external partners or clients. Secret teams cannot be nested under parent teams or have child teams. Team pages Each team has its own page within an organization. On a team's page, you can view team members, child teams, and the team's repositories. Organization owners and team maintainers can access team settings and update the team's description and profile picture from the team's page. Organization members can create and participate in discussions with the team. For more information, see "About team discussions." Nested teams You can reflect your group or company's hierarchy within your GitHub organization with multiple levels of nested teams. A parent team can have multiple child teams, while each child team only has one parent team. You cannot nest secret teams. Child teams inherit the parent's access permissions, simplifying permissions management for large groups. Members of child teams also receive notifications when the parent team is @mentioned, simplifying communication with multiple groups of people. For example, if your team structure is Employees > Engineering > Application Engineering > Identity, granting Engineering write access to a repository means Application Engineering and Identity also get that access. If you @mention the Identity Team or any team at the bottom of the organization hierarchy, they're the only ones who will receive a notification. To easily understand who shares a parent team's permissions and mentions, you can see all of the members of a parent team's child teams on the parent team's page. Members of a child team are not direct members of the parent team. Preparing to nest teams in your organization If your organization already has existing teams, you should audit each team's repository access permissions before you nest teams above or below it. You should also consider the new structure you'd like to implement for your organization. At the top of the team hierarchy, you should give parent teams repository access permissions that are safe for every member of the parent team and its child teams. As you move toward the bottom of the hierarchy, you can grant child teams additional, more granular access to more sensitive repositories. Remove all members from existing teams Audit and adjust each team's repository access permissions and give each team a parent Create any new teams you'd like to, choose a parent for each new team, and give them repository access Add people directly to teams Further reading "Creating a team" "Adding organization members to a team" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Creating a team - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Creating a team Creating a team mac windows linux all You can create independent or nested teams to manage repository permissions and mentions for groups of people. Tip: Every organization member can create teams at the highest level of your organization's hierarchy. Only organization owners and maintainers of a parent team can create a new child team under a parent. In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click Teams. On the right side of the Teams tab, click New team. Under "Create new team", type the name for your new team. Optionally, in the "Description" field, type a description of the team. Optionally, if you're creating a child team, use the drop-down menu to choose a parent team for your new team. Decide whether the team will be visible or secret. Click Create team. Optionally, give the team access to organization repositories. Further reading "About teams" "Changing team visibility" "Moving a team in your organization's hierarchy" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Setting your team's profile picture - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Setting your team's profile picture Setting your team's profile picture mac windows linux all Team maintainers and organization owners can set a profile picture for a team, which is displayed on the team's page. Unless you set a profile picture for a team, the team profile picture will match the organization's profile picture. In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click Teams. On the Teams tab, click the name of the team. At the top of the team page, click Settings. Click Upload new picture and select your desired profile picture. Click and drag to crop the image as needed, then click Set new team avatar. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Adding organization members to a team - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Adding organization members to a team Adding organization members to a team mac windows linux all People with owner or team maintainer permissions can add organization members to teams. People with owner permissions can also invite non-members to join a team and the organization. In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click Teams. On the Teams tab, click the name of the team. At the top of the team page, click Members. Above the list of team members, click Add a member. Add an organization member to the team or invite a non-member to join a team: If the person you want to add is already a member of your organization, type their username and press Enter. The user will immediately be added to the team. If the person you want to add is not member of your organization, type their username or email address and press Enter. The user will receive an email invitation to join your organization and will be added to the team once they accept the invitation. Review the list of repositories that the new team member will have access to, then click Add USERNAME to TEAMNAME. You can edit or cancel an invitation any time before the user accepts. Further reading "About teams" "Managing team access to an organization repository" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Renaming a team - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Renaming a team Renaming a team mac windows linux all Team maintainers and organization owners can edit the name and description of a team. In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click Teams. On the Teams tab, click the name of the team. At the top of the team page, click Settings. Type a new name or description for the team. Click Update. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Changing team visibility - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Changing team visibility Changing team visibility mac windows linux all Team maintainers and organization owners can determine whether a team is visible or secret. Teams can be visible or secret: Visible teams can be viewed and @mentioned by every organization member. Secret teams are only visible to the people on the team and people with owner permissions. They're great for hiding teams with sensitive names or members, such as those used for working with external partners or clients. Secret teams cannot be nested under parent teams or have child teams. Tip: If a team has child or parent teams, you cannot make it a secret team. In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click Teams. Select the team or teams whose visibility you'd like to change. Above the list of teams, use the drop-down menu and click Change visibility. Choose whether to make the team or teams visible or secret, then click Change visibility. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Moving a team in your organization’s hierarchy - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Moving a team in your organization’s hierarchy Moving a team in your organization’s hierarchy mac windows linux all Team maintainers and organization owners can nest a team under a parent team, or change or remove a nested team's parent. Organization owners can change the parent of any team. Team maintainers can change a team's parent if they are maintainers in both the child team and the parent team. Team maintainers without maintainer permissions in the child team can request to add a child team. For more information, see "Requesting to add a child team." Child teams inherit the access permissions of the parent team. For more info on team hierarchies, see "About teams." Tips: You cannot change a team's parent to a secret team. For more information, see "About teams." You cannot nest a parent team beneath one of its child teams. In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click Teams. In the list of teams, click the name of the team whose parent you'd like to change. At the top of the team page, click Settings. Use the drop-down menu to choose a parent team, or to remove an existing parent, select Clear selected value. Click Update. Read the information about changed repository access permissions, then click Confirm new parent team. Further reading "About teams" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Requesting to add a child team - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Requesting to add a child team Requesting to add a child team mac windows linux all If you have maintainer permissions in a team, you can request to nest an existing team under your team in your organization’s hierarchy. When you request to add a team as a child, a request is sent to the maintainers of the child team. Once a maintainer of the child team approves your request, the child team is nested under the parent team in your organization's hierarchy. If you're an organization owner, or a team maintainer with maintainer permissions in both the child team and the parent team, you can add the child team without requesting approval, or change the child team's parent from the child team's settings page. For more information, see "Moving a team in your organization's hierarchy." Child teams inherit the access permissions of the parent team. For more info on team hierarchies, see "About teams." In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click Teams. In the list of teams, click the name of the team where you'd like to add the child team. Under the team name, click Teams. Click Add a team. Type the name of the team you'd like to add as a child team, and select it from the drop-down list. Read the information about changed repository access permissions, then click Confirm new parent team to send a request to add the child team. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Removing organization members from a team - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Removing organization members from a team Removing organization members from a team mac windows linux all People with owner or team maintainer permissions can remove team members from a team. This may be necessary if a person no longer needs access to a repository the team grants, or if a person is no longer focused on a team's projects. Warning: If you remove a person’s access to a private repository, any of their forks of that private repository are deleted. Local clones of the private repository are retained. If a team's access to a private repository is revoked or a team with access to a private repository is deleted, and team members do not have access to the repository through another team, private forks of the repository will be deleted. You are responsible for ensuring that people who have lost access to a repository delete any confidential information or intellectual property. Organization owners can disable the ability to fork a specific private repository or to fork any private repository in an organization. For more information, see "Allowing people to fork a private repository owned by your organization" and "Allowing people to fork private repositories in your organization." In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click Teams. On the Teams tab, click the name of the team. Select the person or people you'd like to remove. Above the list of team members, use the drop-down menu and click Remove from team. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Deleting a team - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Deleting a team Deleting a team mac windows linux all Organization owners can delete teams at any time from the team's settings page. Tip: Only organization owners can delete parent teams. For more information, see "About teams." In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click Teams. Select the team or teams you'd like to delete. Above the list of teams, use the drop-down menu and click Delete. Review the team or teams that will be deleted, then click I understand, delete teams. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Managing access to your organization's repositories - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Managing access to your organization's repositories Managing access to your organization's repositories mac windows linux all Organization owners can manage individual and team access to the organization's repositories. Team maintainers can also manage a team's repository access. Repository permission levels for an organization People with owner or team maintainer roles can manage repository access with teams. Each team can have different repository access permissions. Managing an individual's access to an organization repository Organization owners can manage any person's access to a repository, as well as other relevant information about the person's relationship to the organization. Managing team access to an organization repository Organization owners and team maintainers can add repositories to a team, as well as change the team's read, write, and admin access to the repository. Adding outside collaborators to repositories in your organization An outside collaborator is a person who isn't explicitly a member of your organization, but who has Read, Write, or Admin permissions to one or more repositories in your organization. Removing an outside collaborator from an organization repository Owners and repository admins can remove an outside collaborator's access to a repository. Converting an organization member to an outside collaborator If a current member of your organization only needs access to certain repositories, such as consultants or temporary employees, you can convert them to an outside collaborator. Converting an outside collaborator to an organization member If you would like to give an outside collaborator on your organization's repositories broader permissions within your organization, you can invite them to become a member of the organization. Reinstating a former outside collaborator's access to your organization If you required two-factor authentication in your organization and an outside collaborator was removed from the organization for not having 2FA enabled, you can reinstate a former outside collaborator's access permissions for organization repositories, forks, and settings. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Repository permission levels for an organization - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Repository permission levels for an organization Repository permission levels for an organization mac windows linux all People with owner or team maintainer roles can manage repository access with teams. Each team can have different repository access permissions. There are three types of repository permissions available for people or teams collaborating on repositories that belong to an organization: Read Write Admin For more information on changing a person or team's access to an organization repository, see "Managing an individual's access to an organization repository" and "Managing team access to an organization repository." In addition, organization members with owner permissions have extensive permissions across all repositories in an organization. For more information, see "Permission levels for an organization". Repository action Read permissions Write permissions Admin permissions Owner permissions Pull (read), push (write), and clone (copy) all repositories in the organization X Promote organization members to team maintainer X Convert organization members to outside collaborators X Create repositories (see "Creating repositories" for details) X X X X Delete repositories (see "Deleting and transferring repositories" for details) X X Archive repositories X X Transfer repositories into the organization account (see "Creating repositories" for details) X X Transfer repositories out of the organization account (see "Deleting and transferring repositories" for details) X X Change a repository's settings (see "Changing repository settings" for details) X X Change a repository's visibility (see "Changing the visibility of repositories" for details) X X Add a repository to a team (see "Adding a repository to a team" for details) X X Add outside collaborators to a repository X X Remove outside collaborators from a repository X X Pull from (read) the team's assigned repositories X X X X Push to (write) the team's assigned repositories X X X Fork (copy) the team's assigned repositories X X X X Send pull requests from forks of the team's assigned repositories X X X X Merge and close pull requests X X X Merge pull requests on protected branches, even if there are no approved reviews X X Submit reviews on pull requests X X X X Submit reviews that affect a pull request's mergeability X X X Request pull request reviews X X X Open issues X X X X Close, reopen, and assign issues X X X Close issues they opened themselves X X X X Apply labels and milestones X X X Have an issue assigned to them X X X X Create and edit releases X X X View draft releases X X X View published releases X X X X Edit and delete their own comments on commits, pull requests, and issues X X X X Edit and delete anyone's comments on commits, pull requests, and issues X X X Edit wikis X X X X Create statuses X X X Manage topics X X Disable project boards X X X Create project boards X X X Automate project boards X X X Limit interactions with a repository X X Mark duplicate issues and pull requests X X X Enable the dependency graph for a private repository X X Receive security alerts for vulnerable dependencies in a repository X X Designate additional people or teams to receive security alerts for vulnerable dependencies X X Opt in to data use for a private repository X X Define code owners for a repository X X Act as a designated code owner for a repository X X X Allow or disable forks for a specific private repository X X Lock conversations X X X Changing repository settings Repository settings include: Adding, removing, and editing collaborator access Editing the repository's default branch Adding, removing, and editing webhooks and service hooks Adding deploy keys Changing repository visibility Limit interactions with a repository Warning: When someone adds a deploy key to a repository, any user who has the private key can read from or write to the repository (depending on the key settings), even if they're later removed from the organization. Adding a repository to a team Organization owners can add any repository to any team in the organization. Organization members with admin access to a repository can add that repository to any other team they belong to. Team maintainers An organization owner can promote any member of the organization to team maintainer for one or more teams. Members with team maintainer permissions can: Change the team's name and description Change the team's visibility Set the team profile picture Edit team discussions Delete team discussions Add organization members to the team Remove organization members from the team Promote an existing team member to team maintainer Remove the team's access to repositories Reinstate a former organization member For more information, see "Giving team maintainer permissions to an organization member." Outside collaborators Repository collaborators can include organization members or outside collaborators. An outside collaborator is a person who has access to one or more organization repositories but is not explicitly a member of the organization, such as a consultant or temporary employee. For more information, see: "Adding outside collaborators to repositories in your organization" "Converting an organization member to an outside collaborator" "Removing an outside collaborator from an organization repository" Creating repositories By default, all organization members can create repositories for the organization and transfer repositories into the organization. If you choose, you can restrict repository creation permissions to organization owners only. Warning: Members of teams that had admin permissions under the legacy organization membership structure are able to create repositories for the organization under improved organization permissions, even if the repository creation setting is not enabled. For more information, see "Migrating your previous admin teams to the improved organization permissions." In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click Settings. In the left sidebar, click Member privileges. Under "Repository creation", deselect Allow members to create repositories for this organization. Click Save. Changing the visibility of repositories By default, only organization members with admin privileges to a repository can change the visibility from public to private or from private to public. If you choose, you can restrict the ability to change repository visibility to organization owners only. In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click Settings. In the left sidebar, click Member privileges. Under "Repository visibility change", deselect Allow members to change repository visibilities for this organization. Click Save. Deleting and transferring repositories By default, only organization members with admin privileges to a repository can delete the repository or transfer it out of the organization. If you choose, you can restrict repository deletion and outgoing transfer permissions to organization owners only. In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click Settings. In the left sidebar, click Member privileges. Under "Repository deletion", deselect Allow members to delete or transfer repositories for this organization. Click Save. Further reading "Permission levels for an organization" "Changing a person's role to owner" "Permission levels for a user account repository" "About teams" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Managing an individual's access to an organization repository - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Managing an individual's access to an organization repository Managing an individual's access to an organization repository mac windows linux all Organization owners can manage any person's access to a repository, as well as other relevant information about the person's relationship to the organization. Warning: If you remove a person’s access to a private repository, any of their forks of that private repository are deleted. Local clones of the private repository are retained. If a team's access to a private repository is revoked or a team with access to a private repository is deleted, and team members do not have access to the repository through another team, private forks of the repository will be deleted. You are responsible for ensuring that people who have lost access to a repository delete any confidential information or intellectual property. Organization owners can disable the ability to fork a specific private repository or to fork any private repository in an organization. For more information, see "Allowing people to fork a private repository owned by your organization" and "Allowing people to fork private repositories in your organization." In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click People. Click either Members or Outside collaborators to manage people with different types of access. To the right of the name of the person you'd like to manage, use the drop-down menu, and click Manage. On the "Manage access" page, next to the repository, click Manage access. Review the person's access to a given repository, such as whether they're a collaborator or have access to the repository via team membership. Removing access to private repositories When you remove a collaborator from a repository in your organization, they lose read/write access to your repository. If the person has forked a private repository, then their fork is also deleted, but the person will still retain any local clones of your repository. Further reading "Limiting interactions with your repository" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Managing team access to an organization repository - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Managing team access to an organization repository Managing team access to an organization repository mac windows linux all Organization owners and team maintainers can add repositories to a team, as well as change the team's read, write, and admin access to the repository. Warnings: You can change a team's permission level if the team has direct access to a repository. If the team's access to the repository is inherited from a parent team, you must change the parent team's access to the repository. If you add or remove repository access for a parent team, each of that parent's child teams will also receive or lose access to the repository. For more information, see "About teams." Giving a team access to a repository In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click Teams. On the Teams tab, click the name of the team. Above the list of team members, click Repositories. Above the list of repositories, click Add repository. In the "Search by repository name" field, type the name of a repository, then select it. Optionally, to the right of the repository name, choose a different permission level for the team. Removing a team's access to a repository You can remove a team's access to a repository if the team has direct access to a repository. If a team's access to the repository is inherited from a parent team, you must remove the repository from the parent team in order to remove the repository from child teams. Warning: If you remove a person’s access to a private repository, any of their forks of that private repository are deleted. Local clones of the private repository are retained. If a team's access to a private repository is revoked or a team with access to a private repository is deleted, and team members do not have access to the repository through another team, private forks of the repository will be deleted. You are responsible for ensuring that people who have lost access to a repository delete any confidential information or intellectual property. Organization owners can disable the ability to fork a specific private repository or to fork any private repository in an organization. For more information, see "Allowing people to fork a private repository owned by your organization" and "Allowing people to fork private repositories in your organization." In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click Teams. On the Teams tab, click the name of the team. Above the list of team members, click Repositories. Select the repository or repositories you'd like to remove from the team. Above the list of repositories, use the drop-down menu, and click Remove from team. Review the repository or repositories that will be removed from the team, then click Remove repositories. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Adding outside collaborators to repositories in your organization - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Adding outside collaborators to repositories in your organization Adding outside collaborators to repositories in your organization mac windows linux all An outside collaborator is a person who isn't explicitly a member of your organization, but who has Read, Write, or Admin permissions to one or more repositories in your organization. Tips: Only members with owner privileges for an organization or admin privileges for a repository can add outside collaborators to a repository. If your organization requires members and outside collaborators to use two-factor authentication, they must enable two-factor authentication before they can accept your invitation to collaborate on an organization repository. When you add an outside collaborator to a repository, you'll also need to add them to any forks of the repository you'd like them to access. In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. In the organization's Repositories tab, click the name of a repository, or search for the repository by name. Under your repository name, click Settings. In the left sidebar, click Collaborators & teams. Under "Collaborators", type the name of the person you'd like to give access to the repository, then click Add collaborator. Next to the new collaborator's name, choose the appropriate permission level: Write, Read, or Admin. Further reading "Converting an organization member to an outside collaborator" "Removing an outside collaborator from an organization repository" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Removing an outside collaborator from an organization repository - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Removing an outside collaborator from an organization repository Removing an outside collaborator from an organization repository mac windows linux all Owners and repository admins can remove an outside collaborator's access to a repository. Warning: When removing an outside collaborator from a private repository, the paid seat count does not automatically downgrade. To pay for fewer seats after removing users from your organization, follow the steps in "Downgrading your organization's paid seats." You are responsible for ensuring that people who have lost access to a repository delete any confidential information or intellectual property. While forks of private repositories are deleted when a collaborator is removed, the person will still retain any local clones of your repository. Removing outside collaborators from all repositories in an organization In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click People. Under the "People" tab, click Outside collaborators. Select the outside collaborator or outside collaborators you'd like to remove from the organization. Above the list of outside collaborators, use the drop-down menu, and click Remove from all repositories. Review the outside collaborator or outside collaborators who will be removed from the organization, then click Remove outside collaborators. Removing an outside collaborator from a particular repository in an organization If you only want to remove an outside collaborator from certain repositories in your organization, you can remove this person's access to one specific repository at a time. In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click People. Under the "People" tab, click Outside collaborators. To the right of the username of the person you want to remove, use the drop-down menu, and click Manage. To the right of the repository that you want to remove the outside collaborator from, click Manage access. To completely remove the outside collaborator's access to the repository, in the upper right corner, click Remove access to this repository. To confirm, click Remove access. Further reading "Adding outside collaborators to repositories in your organization" "Converting an organization member to an outside collaborator" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Converting an organization member to an outside collaborator - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Converting an organization member to an outside collaborator Converting an organization member to an outside collaborator mac windows linux all If a current member of your organization only needs access to certain repositories, such as consultants or temporary employees, you can convert them to an outside collaborator. Tips: Only members with owner privileges for an organization or admin privileges for a repository can convert organization members into outside collaborators. When you add an outside collaborator to a repository, you'll also need to add them to any forks of the repository you'd like them to access. After converting an organization member to an outside collaborator, they'll only have access to the repositories that their current team membership allows. The person will no longer be an explicit member of the organization, and will no longer be able to: Create teams See all organization members and teams @mention any visible team Be a team maintainer For more information, see "Permission levels for an organization." We recommend reviewing the organization member's access to repositories to ensure their access is as you expect. When you convert an organization member to an outside collaborator, their privileges as organization members are saved for three months so that you can restore their membership privileges if you invite them to rejoin your organization within that time frame. For more information, see "Reinstating a former member of your organization." In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click People. Select the person or people you'd like to convert to outside collaborators. Above the list of members, use the drop-down menu and click Convert to outside collaborator. Read the information about converting members to outside collaborators, then click Convert to outside collaborator. Further reading "Adding outside collaborators to repositories in your organization" "Removing an outside collaborator from an organization repository" "Converting an outside collaborator to an organization member" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Converting an outside collaborator to an organization member - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Converting an outside collaborator to an organization member Converting an outside collaborator to an organization member mac windows linux all If you would like to give an outside collaborator on your organization's repositories broader permissions within your organization, you can invite them to become a member of the organization. Tips: Only organization owners can invite users to join an organization. For more information, see "Permission levels for an organization." If your organization is on a paid per-user plan, an unused seat must be available before you can invite a new member to join the organization or reinstate a former organization member. For more information, see "About per-user pricing." If your organization requires members to use two-factor authentication, users you invite must enable two-factor authentication before they can accept the invitation. In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click People. Under the "People" tab, click Outside collaborators. To the right of the name of the outside collaborator you want to become a member, use the drop-down menu and click Invite to organization. If the person you're inviting was an organization member within the last three months, choose whether to restore their privileges or start fresh, then click Invite and reinstate or Invite and start fresh. If the person you're inviting has never been a member of the organization or if you cleared their privileges, choose a role for the user, and optionally add them to some teams, then click Send invitation. The invited person will receive an email inviting them to the organization. They will need to accept the invitation before becoming a member of the organization. You can edit or cancel an invitation any time before the user accepts. Further reading "Converting an organization member to an outside collaborator" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Reinstating a former outside collaborator's access to your organization - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Reinstating a former outside collaborator's access to your organization Reinstating a former outside collaborator's access to your organization mac windows linux all If you required two-factor authentication in your organization and an outside collaborator was removed from the organization for not having 2FA enabled, you can reinstate a former outside collaborator's access permissions for organization repositories, forks, and settings. If an outside collaborator's access to your organization's private repositories is removed because you've required members and outside collaborators to enable two-factor authentication, the user's access privileges and settings are saved for three months. You can restore the user's privileges if you invite them back to the organization within that time frame. You can send an invitation to reinstate a user's privileges and access to the organization before they have enabled two-factor authentication and they must enable 2FA before they can accept your invitation to rejoin the organization. When you reinstate a former outside collaborator, you can restore: The user's former access to organization repositories Any private forks of repositories owned by the organization Membership in the organization's teams Previous access and permissions for the organization's repositories Stars for organization repositories Issue assignments in the organization Repository subscriptions (notification settings for watching, not watching, or ignoring a repository's activity) Tips: Only organization owners can reinstate outside collaborators' access to an organization. For more information, see "Permission levels for an organization." The reinstating a member flow on GitHub may use the term "member" to describe reinstating an outside collaborator but if you reinstate this person and keep their previous privileges, they will only have their previous outside collaborator permissions. If your organization is on a paid per-user plan, an unused seat must be available before you can invite a new member to join the organization or reinstate a former organization member. For more information, see "About per-user pricing." In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click People. On the People tab, click Invite member. Type the username of the person you want to reinstate and click Enter. Choose to restore the outside collaborator's previous privileges in the organization by clicking Invite and reinstate or choose to clear their previous privileges and set new access permissions by clicking Invite and start fresh. Warning: If you want to upgrade the outside collaborator to a member of your organization, then choose Invite and start fresh and choose a new role for this person. Note, however, that this person's private forks of your organization's repositories will be lost if you choose to start fresh. To make the former outside collaborator a member of your organization and keep their private forks, choose Invite and reinstate instead. Once this person accepts the invitation, you can convert them to an organization member by inviting them to join the organization as a member. If you cleared the previous privileges for a former outside collaborator, choose a role for the user and optionally add them to some teams, then click Send invitation. The invited person will receive an email inviting them to the organization. They will need to accept the invitation before becoming an outside collaborator in the organization. You can edit or cancel an invitation any time before the user accepts. Further Reading "Repository permission levels for an organization" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Managing organization settings - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Managing organization settings Managing organization settings mac windows linux all Organization administrators can change several settings, including the names of repositories that belong to the organization and Owners team membership. In addition, organization admins can delete the organization and all of its repositories. Renaming an organization If your project or company has changed names, you can update the name of your organization to match. Transferring organization ownership To make someone else the owner of an organization account, you must add a new owner, ensure that the billing information is updated, and then remove yourself from the account. Allowing people to fork private repositories in your organization Organization owners can allow or prevent the forking of any private repositories owned by your organization. Deleting an organization account When you delete an organization, all repositories, forks of private repositories, wikis, issues, pull requests, and Project or Organization Pages are deleted as well. The organization name becomes available for use on a new user or organization account, and your billing will end. Converting an organization into a user It's not possible to convert an organization into a personal user account, but you can create a new user account and transfer the organization's repositories to it. Integrating JIRA with your organization's projects You can connect the JIRA DVCS plugin to your organization account to scan commits and pull requests, creating relevant metadata and hyperlinks in any mentioned JIRA Issues. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Renaming an organization - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Renaming an organization Renaming an organization mac windows linux all If your project or company has changed names, you can update the name of your organization to match. Tip: Only organization owners can rename an organization. For more information, see "Permission levels for an organization." What happens when I change my organization's name? When you change your organization's name, most references to your repositories under the old organization name automatically change to the new name. However, some links to your profile won't automatically redirect. Changes that occur automatically GitHub automatically redirects references to your repositories. Web links to your organization's existing repositories will continue to work. This can take a few minutes to complete after you initiate the change. You can continue pushing your local repositories to the old remote tracking URL without updating it. However, we recommend you update all existing remote repository URLs after changing your organization name. Because your old organization name is available for use by anyone else after you change it, that person would be able to create repositories that override the redirect entries. Previous Git commits will also be correctly attributed to users within your organization. Changes that aren't automatic After changing your organization's name, links to your previous organization profile page, such as https://github.com/previousorgname, will return a 404 error. For this reason, you'll want to update links to your organization account from elsewhere, such as your LinkedIn or Twitter profiles. There are no automatic @mention redirects for teams that use the old organization's name. Changing your organization's name In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click Settings. Near the bottom of the settings page, under "Rename organization", click Rename Organization. Further reading "Changing a remote's URL" "Why are my commits linked to the wrong user?" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Transferring organization ownership - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Transferring organization ownership Transferring organization ownership mac windows linux all To make someone else the owner of an organization account, you must add a new owner, ensure that the billing information is updated, and then remove yourself from the account. If you're the only member with owner privileges, give another organization member the owner role. Contact the new owner and make sure he or she is able to access the organization's settings. If you are currently responsible for paying for GitHub in your organization, you'll also need to have the new owner or a billing manager update the organization's payment information. For more information, see "Updating your organization's payment method." Warning: Removing yourself from the organization does not update the billing information on file for the organization account. The new owner or a billing manager must update the billing information on file to remove your credit card or PayPal information. Remove yourself from the organization. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Allowing people to fork private repositories in your organization - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Allowing people to fork private repositories in your organization Allowing people to fork private repositories in your organization mac windows linux all Organization owners can allow or prevent the forking of any private repositories owned by your organization. By default, new organizations are configured to disallow the forking of private repositories. Tip: If you allow forking of private repositories at the organization level, you can also configure the ability to fork a specific private repository. For more information, see "Allowing people to fork a private repository owned by your organization." In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click Settings. In the left sidebar, click Member privileges. Under "Repository forking", select Allow forking of private repositories. Click Save. Further reading "About forks" "Repository permission levels for an organization" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Deleting an organization account - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Deleting an organization account Deleting an organization account mac windows linux all When you delete an organization, all repositories, forks of private repositories, wikis, issues, pull requests, and Project or Organization Pages are deleted as well. The organization name becomes available for use on a new user or organization account, and your billing will end. Tip: If you want to cancel your paid plan, you can downgrade your organization to free instead of deleting the organization and its content. 1. Back up your organization content Once you delete an organization, GitHub cannot restore your content. Therefore, before you delete your organization, make sure you have a copy of all private repositories, wikis, and issues from the account. 2. Delete the organization In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click Settings. Near the bottom of the organization's settings page, click Delete this Organization. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Converting an organization into a user - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Converting an organization into a user Converting an organization into a user mac windows linux all It's not possible to convert an organization into a personal user account, but you can create a new user account and transfer the organization's repositories to it. Sign up for a new GitHub user account. Have the user's role changed to an owner. Sign in to the new user account. Transfer each organization repository to the new user account. Delete the organization. Rename the user to the organization's name. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Integrating JIRA with your organization's projects - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Integrating JIRA with your organization's projects Integrating JIRA with your organization's projects mac windows linux all You can connect the JIRA DVCS plugin to your organization account to scan commits and pull requests, creating relevant metadata and hyperlinks in any mentioned JIRA Issues. In the upper-right corner of any page, click your profile photo, then click Settings. In the left sidebar under Organization settings, click the name of your organization. In the left sidebar under Developer settings, click OAuth Apps. Click Register a new application. Under Application name, type "JIRA". Under Homepage URL, type the full URL to your JIRA instance. Under Authorization callback URL, type the full URL to your JIRA instance. Click Register application. Under Organization owned applications, note the "Client ID" and "Client Secret" values. Link your GitHub account with JIRA. For more information, see Atlassian's help documentation. Further reading "Integrating JIRA with your personal projects" GitHub Integrations • JIRA (YouTube) Connect JIRA Cloud to GitHub (Atlassian documentation) Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Migrating your organization to improved organization permissions - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Migrating your organization to improved organization permissions Migrating your organization to improved organization permissions mac windows linux all If your organization was created after September 2015, your organization has improved organization permissions by default. Organizations created before September 2015 may need to migrate older Owners and Admin teams to the improved permissions model. Converting your previous Owners team to the improved organization permissions If your organization was created after September 2015, your organization has improved organization permissions by default. Organizations created before September 2015 may need to migrate older Owners and Admin teams to the improved permissions model. The "Owner" is now an administrative role given to individual members of your organization. Members of your legacy Owners team are automatically given owner privileges. Converting your previous admin team to the improved organization permissions If your organization was created after September 2015, your organization has improved organization permissions by default. Organizations created before September 2015 may need to migrate older Owners and Admin teams to the improved permissions model. Members of legacy admin teams automatically retain the ability to create repositories until those teams are migrated to the improved organization permissions model. Migrating your previous admin team to the improved organization permissions If your organization was created after September 2015, your organization has improved organization permissions by default. Organizations created before September 2015 may need to migrate older Owners and Admin teams to the improved permissions model. Members of legacy admin teams automatically retain the ability to create repositories until those teams are migrated to the improved organization permissions model. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Converting your previous Owners team to the improved organization permissions - User Documentation <meta name="Description" content="If your organization was created after September 2015, your organization has improved organization permissions by default. Organizations created before September 2015 may need to migrate older Owners and Admin teams to the improved permissions model. The "Owner" is now an administrative role given to individual members of your organization. Members of your legacy Owners team are automatically given owner privileges. …"> GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Converting your previous Owners team to the improved organization permissions Converting your previous Owners team to the improved organization permissions mac windows linux all If your organization was created after September 2015, your organization has improved organization permissions by default. Organizations created before September 2015 may need to migrate older Owners and Admin teams to the improved permissions model. The "Owner" is now an administrative role given to individual members of your organization. Members of your legacy Owners team are automatically given owner privileges. You have a few options to convert your legacy Owners team: Give the team a new name that denotes the members have a special status in the organization. Delete the team after ensuring all members have been added to teams that grant necessary access to the organization's repositories. Give the Owners team a new name Note: Because "admin" is a term for organization members with specific access to certain repositories in the organization, we recommend you avoid that term in any team name you decide on. In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click Teams. On the Teams tab, click Owners. Under the description of the new owner role, click Okay, got it. In the team name field, choose a new name for the Owners team. For example: If very few members of your organization were members of the Owners team, you might name the team "Core". If all members of your organization were members of the Owners team so that they could @mention teams, you might name the team "Employees". Under the team description, click Save and continue. Optionally, make the team public. Delete the legacy Owners team Warning: If there are members of your Owners team who are not members of other teams, deleting the team will remove those members from the organization. Before deleting the team, ensure members are already direct members of the organization, or have collaborator access to necessary repositories. In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click Teams. On the Teams tab, click Owners. Under the description of the new owner role, click Okay, got it. At the bottom of the page, review the warning and click Delete the Owners team. Further reading "Migrating your previous admin teams to the improved organization permissions" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Converting your previous admin team to the improved organization permissions - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Converting your previous admin team to the improved organization permissions Converting your previous admin team to the improved organization permissions mac windows linux all If your organization was created after September 2015, your organization has improved organization permissions by default. Organizations created before September 2015 may need to migrate older Owners and Admin teams to the improved permissions model. Members of legacy admin teams automatically retain the ability to create repositories until those teams are migrated to the improved organization permissions model. You can remove the ability for members of legacy admin teams to create repositories by creating a new team for these members, ensuring that the team has necessary access to the organization's repositories, then deleting the legacy admin team. For more information, see "Repository permission levels for an organization." Warnings: If there are members of your legacy Admin team who are not members of other teams, deleting the team will remove those members from the organization. Before deleting the team, ensure members are already direct members of the organization, or have collaborator access to necessary repositories. To prevent the loss of private forks made by members of the legacy Admin team, you must follow steps 1-3 below before deleting the legacy Admin team. Because "admin" is a term for organization members with specific access to certain repositories in the organization, we recommend you avoid that term in any team name you decide on. Create a new team. Add each of the members of your legacy admin team to the new team. Give the new team equivalent access to each of the repositories the legacy team could access. Delete the legacy admin team. Further reading "Converting your previous Owners team to the improved organization permissions" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Migrating your previous admin teams to the improved organization permissions - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Migrating your previous admin teams to the improved organization permissions Migrating your previous admin teams to the improved organization permissions mac windows linux all If your organization was created after September 2015, your organization has improved organization permissions by default. Organizations created before September 2015 may need to migrate older Owners and Admin teams to the improved permissions model. Members of legacy admin teams automatically retain the ability to create repositories until those teams are migrated to the improved organization permissions model. By default, all organization members can create repositories. If you restrict repository creation permissions to organization owners, and your organization was created under the legacy organization permissions structure, members of legacy admin teams will still be able to create repositories. Legacy admin teams are teams that were created with the admin permission level under the legacy organization permissions structure. Members of these teams were able to create repositories for the organization, and we've preserved this ability in the improved organization permissions structure. You can remove this ability by migrating your legacy admin teams to the improved organization permissions. For more information, see "Repository permission levels for an organization." Warning: If your organization has disabled repository creation permissions for all members, some members of legacy admin teams may lose repository creation permissions. If your organization has enabled member repository creation, migrating legacy admin teams to improved organization permissions will not affect team members' ability to create repositories. Migrating all of your organization's legacy admin teams In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click Settings. In the Settings sidebar, click Team settings. Review your organization's legacy admin teams, then click Migrate all teams. Read the information about possible permissions changes for members of these teams, then click Migrate all teams. Migrating a single admin team In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click Teams. On the Teams tab, click the name of the team. In the team description box, click Migrate team. Further reading "Converting your previous owners team to the improved organization permissions" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Restricting access to your organization's data - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Restricting access to your organization's data Restricting access to your organization's data mac windows linux all OAuth App access restrictions allow organization owners to restrict an untrusted app's access to the organization's data. Organization members can then use OAuth Apps for their personal user accounts while keeping organization data safe. About OAuth App access restrictions Organizations can choose which OAuth Apps have access to their repositories and other resources by enabling OAuth App access restrictions. Enabling OAuth App access restrictions for your organization Organization owners can enable OAuth App access restrictions to prevent untrusted apps from accessing the organization's resources while allowing organization members to use OAuth Apps for their personal accounts. Disabling OAuth App access restrictions for your organization Organization owners can disable restrictions on the OAuth Apps that have access to the organization's resources. Approving OAuth Apps for your organization When an organization member requests OAuth App access to organization resources, organization owners can approve or deny the request. Denying access to a previously approved OAuth App for your organization If an organization no longer requires a previously authorized OAuth App, owners can remove the application's access to the organization's resources. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support About OAuth App access restrictions - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / About OAuth App access restrictions About OAuth App access restrictions mac windows linux all Organizations can choose which OAuth Apps have access to their repositories and other resources by enabling OAuth App access restrictions. When OAuth App access restrictions are enabled, organization members cannot authorize OAuth App access to organization resources. Organization members can request owner approval for OAuth Apps they'd like to use, and organization owners receive a notification of pending requests. When you create a new organization, OAuth App access restrictions are enabled by default. Organization owners can disable OAuth App access restrictions at any time. Tip: When an organization has not set up OAuth App access restrictions, any OAuth App authorized by an organization member can also access the organization's private resources. Setting up OAuth App access restrictions When an organization owner sets up OAuth App acess restrictions for the first time: Applications that are owned by the organization are automatically given access to the organization's resources. OAuth Apps immediately lose access to the organization's resources. SSH keys created before February 2014 immediately lose access to the organization's resources (this includes user and deploy keys). SSH keys created by OAuth App during or after February 2014 immediately lose access to the organization's resources. Hook deliveries from private organization repositories will no longer be sent to unapproved OAuth Apps. API access to private organization resources is not available for unapproved OAuth Apps. In addition, there is no create, update, or delete access to public organization resources. Hooks created by users and hooks created before May 2014 will not be affected. Private forks of organization-owned repositories are subject to the organization's access restrictions. Resolving SSH access failures When an SSH key created before February 2014 loses access to an organization with OAuth App access restrictions enabled, subsequent SSH access attempts will fail. Users will encounter an error message directing them to a URL where they can approve the key or upload a trusted key in its place. Webhooks When an OAuth App is granted access to the organization after restrictions are enabled, any pre-existing webhooks created by that OAuth App will resume dispatching. When an organization removes access from a previously-approved OAuth App, any pre-existing webhooks created by that application will no longer be dispatched (these hooks will be disabled, but not deleted). Re-enabling access restrictions If an organization disables OAuth App access application restrictions, and later re-enables them, previously approved OAuth App are automatically granted access to the organization's resources. Further reading "Enabling OAuth App access restrictions for your organization" "Approving OAuth Apps for your organization" "Reviewing your organization's installed integrations" "Denying access to a previously approved OAuth App for your organization" "Disabling OAuth App access restrictions for your organization" "Requesting organization approval for OAuth Apps" "Authorizing OAuth Apps" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Enabling OAuth App access restrictions for your organization - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Enabling OAuth App access restrictions for your organization Enabling OAuth App access restrictions for your organization mac windows linux all Organization owners can enable OAuth App access restrictions to prevent untrusted apps from accessing the organization's resources while allowing organization members to use OAuth Apps for their personal accounts. When you create a new organization, OAuth App access restrictions are enabled by default. Organization owners can disable OAuth App access restrictions at any time. Warnings: Enabling OAuth App access restrictions will revoke organization access for all previously authorized OAuth Apps and SSH keys. For more information, see "About OAuth App access restrictions." Once you've set up OAuth App access restrictions, make sure to re-authorize any OAuth App that require access to the organization's private data on an ongoing basis. All organization members will need to create new SSH keys, and the organization will need to create new deploy keys as needed. When OAuth App access restrictions are enabled, applications can use an OAuth token to access information about GitHub Marketplace transactions. In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click Settings. In the Settings sidebar, click Third-party access. Under "Third-party application access policy," click Setup application access restrictions. After you review the information about third-party access restrictions, click Restrict third-party application access. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Disabling OAuth App access restrictions for your organization - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Disabling OAuth App access restrictions for your organization Disabling OAuth App access restrictions for your organization mac windows linux all Organization owners can disable restrictions on the OAuth Apps that have access to the organization's resources. Warning: When you disable OAuth App access restrictions for your organization, any organization member will automatically authorize OAuth App access to the organization's private resources when they approve an application for use in their personal account settings. In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click Settings. In the Settings sidebar, click Third-party access. Click Remove restrictions. After you review the information about disabling third-party application restrictions, click Yes, remove application restrictions. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Approving OAuth Apps for your organization - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Approving OAuth Apps for your organization Approving OAuth Apps for your organization mac windows linux all When an organization member requests OAuth App access to organization resources, organization owners can approve or deny the request. When OAuth App access restrictions are enabled, organization members must request approval from an organization owner before they can authorize an OAuth App that has access to the organization's resources. In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click Settings. In the Settings sidebar, click Third-party access. Next to the application you'd like to approve, click Review. After you review the information about the requested application, click Grant access. Further reading "About OAuth App access restrictions" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Denying access to a previously approved OAuth App for your organization - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Denying access to a previously approved OAuth App for your organization Denying access to a previously approved OAuth App for your organization mac windows linux all If an organization no longer requires a previously authorized OAuth App, owners can remove the application's access to the organization's resources. In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click Settings. In the Settings sidebar, click Third-party access. Next to the application you'd like to disable, click . Click Deny access. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Keeping your organization secure - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Keeping your organization secure Keeping your organization secure mac windows linux all Organization owners have several features to help them keep their projects and data secure. If you're the owner of an organization, you should regularly review your organization's audit log, member 2FA status, and application settings to ensure that no unauthorized or malicious activity has occurred. Viewing whether users in your organization have 2FA enabled You can see which organization owners, members, and outside collaborators have enabled two-factor authentication. Preparing to require two-factor authentication in your organization Before requiring two-factor authentication (2FA), you can notify users about the upcoming change and verify who already uses 2FA. Requiring two-factor authentication in your organization Organization owners can require organization members, outside collaborators, and billing managers to enable two-factor authentication for their personal accounts, making it harder for malicious actors to access an organization's repositories and settings. Reviewing the audit log for your organization The audit log allows organization admins to quickly review the actions performed by members of your organization. It includes details such as who performed the action, what the action was, and when it was performed. Reviewing your organization's installed integrations You can review the permission levels for your organization's installed integrations and configure each integration's access to organization repositories. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Viewing whether users in your organization have 2FA enabled - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Viewing whether users in your organization have 2FA enabled Viewing whether users in your organization have 2FA enabled mac windows linux all You can see which organization owners, members, and outside collaborators have enabled two-factor authentication. Note: You can require that all members, including, owners, billing managers and outside collaborators in your organization have two-factor authentication enabled. For more information, see "Requiring two-factor authentication in your organization." In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click People. To view organization members, including organization owners, who have enabled or disabled two-factor authentication, on the right, click 2FA, and select Enabled or Disabled. To view outside collaborators in your organization, under the "People" tab, click Outside collaborators. To view which outside collaborators have enabled or disabled two-factor authentication, on the right, click 2FA, and select Enabled or Disabled. Further reading "Viewing people's roles in an organization" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Preparing to require two-factor authentication in your organization - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Preparing to require two-factor authentication in your organization Preparing to require two-factor authentication in your organization mac windows linux all Before requiring two-factor authentication (2FA), you can notify users about the upcoming change and verify who already uses 2FA. We recommend that you notify organization members, outside collaborators, and billing managers at least one week before you require 2FA in your organization. When you require use of two-factor authentication for your organization, members, outside collaborators, and billing managers (including bot accounts) who do not use 2FA will be removed from the organization and lose access to its repositories. They will also lose access to their forks of the organization's private repositories. Before requiring 2FA in your organization, we recommend that you: Enable 2FA on your personal account Ask the people in your organization to set up 2FA for their accounts See whether users in your organization have 2FA enabled Warn users that once 2FA is enabled, those without 2FA are automatically removed from the organization Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Requiring two-factor authentication in your organization - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Requiring two-factor authentication in your organization Requiring two-factor authentication in your organization mac windows linux all Organization owners can require organization members, outside collaborators, and billing managers to enable two-factor authentication for their personal accounts, making it harder for malicious actors to access an organization's repositories and settings. Requirements for enforcing two-factor authentication Before you can require organization members, outside collaborators, and billing managers to use 2FA, you must enable two-factor authentication for your own personal account. Warnings: When you require use of two-factor authentication for your organization, members, outside collaborators, and billing managers (including bot accounts) who do not use 2FA will be removed from the organization and lose access to its repositories. They will also lose access to their forks of the organization's private repositories. You can reinstate their access privileges and settings if they enable two-factor authentication for their personal account within three months of their removal from your organization. If an organization owner, member, billing manager, or outside collaborator disables 2FA for their personal account after you've enabled required two-factor authentication, they will automatically be removed from the organization. If you're the sole owner of an organization that requires two-factor authentication, you won't be able to disable 2FA for your personal account without disabling required two-factor authentication for the organization. Before you require use of two-factor authentication, we recommend notifying organization members, outside collaborators, and billing managers and asking them to set up 2FA for their accounts. You can see if members and outside collaborators already use 2FA on your organization's People page. In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click Settings. In the organization settings sidebar, click Security. Under "Authentication", select Require two-factor authentication for all members, then click Save. If prompted, read the information about members and outside collaborators who will be removed from the organization. Type your organization's name to confirm the change, then click Remove members & require two-factor authentication. If any members or outside collaborators are removed from the organization, we recommend sending them an invitation that can reinstate their former privileges and access to your organization. They must enable two-factor authentication before they can accept your invitation. Viewing people who were removed from your organization To view people who were automatically removed from your organization for non-compliance when you required two-factor authentication, you can search your organization's audit log for people removed from your organization. The audit log event will show if a person was removed for 2FA non-compliance. In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. In the Settings sidebar, click Audit log. Enter your search query. To search for: Organization members removed, use action:org.remove_member in your search query Outside collaborators removed, use action:org.remove_outside_collaborator in your search query Billing managers removed, use action:org.remove_billing_managerin your search query You can also view people who were removed from your organization by using a time frame in your search. Helping removed members and outside collaborators rejoin your organization If any members or outside collaborators are removed from the organization when you enable required use of two-factor authentication, they'll receive an email notifying them that they've been removed. They should then enable 2FA for their personal account, and contact an organization owner to request access to your organization. Further reading "Viewing whether users in your organization have 2FA enabled" "Securing your account with two-factor authentication (2FA)" "Reinstating a former member of your organization" "Reinstating a former outside collaborator's access to your organization" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Reviewing the audit log for your organization - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Reviewing the audit log for your organization Reviewing the audit log for your organization mac windows linux all The audit log allows organization admins to quickly review the actions performed by members of your organization. It includes details such as who performed the action, what the action was, and when it was performed. In this article Accessing the audit log Searching the audit log Search based on repository Search based on the user Search based on the action performed Search based on time of action Search based on location Exporting the audit log Accessing the audit log The audit log lists actions performed within the last 90 days. Only owners can access an organization's audit log. In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click Settings. In the Settings sidebar, click Audit log. Searching the audit log The audit log lists the following information about actions made within your organization: Which repository an action was performed in The user that performed the action The action that was performed Which country the action took place in The date and time the action occurred Note that you cannot search for audit entries using text. You can, however, construct search queries using a variety of filters. Many operators used when querying the audit log—such as -, >, or < —match the same format as searching across GitHub. Search based on repository Use the repo qualifier to limit actions to a specific repository owned by your organization. For example: repo:my-org/our-repo finds all events that occurred for the our-repo repository in the my-org organization. repo:my-org/our-repo repo:my-org/another-repo finds all events that occurred for both the our-repo and another-repo repositories in the my-org organization. -repo:my-org/not-this-repo excludes all events that occurred for the not-this-repo repository in the my-org organization. Note that you must include your organization's name within the repo qualifier; searching for just repo:our-repo will not work. Search based on the user The actor qualifier can scope events based on the member of your organization that performed the action. For example: actor:octocat finds all events performed by octocat. actor:octocat actor:hubot finds all events performed by both octocat and hubot. -actor:hubot excludes all events performed by hubot. Note that you can only use a GitHub username, not an individual's real name. Search based on the action performed To search for specific events, use the action qualifier in your query. Actions listed in the audit log are grouped within the following categories: Category Name Description account Contains all activities related to your organization account. billing Contains all activities related to your organization's billing. hook Contains all activities related to webhooks. marketplace_agreement_signature Contains all activities related to signing the GitHub Marketplace Developer Agreement. marketplace_listing Contains all activities related to listing apps in GitHub Marketplace. org Contains all activities related organization membership payment_method Contains all activities related to how your organization pays for GitHub. profile_picture Contains all activities related to your organization's profile picture. project Contains all activities related to project boards. repo Contains all activities related to the repositories owned by your organization. repository_content_analysis Contains all activities related to enabling or disabling data use for a private repository. repository_dependency_graph Contains all activities related to enabling or disabling the dependency graph for a private repository. repository_vulnerability_alert Contains all activities related to security alerts for vulnerable dependencies. team Contains all activities related to teams in your organization. discussion_post Contains all activities related to discussions posted to a team page. discussion_post_reply Contains all activities related to replies to discussions posted to a team page. You can search for specific sets of actions using these terms. For example: action:team finds all events grouped within the team category. -action:hook excludes all events in the webhook category. Each category has a set of associated events that you can filter on. For example: action:team.create finds all events where a team was created. -action:hook.events_changed excludes all events where the events on a webhook have been altered. This list describes the available categories and associated events: The account category The billing category The hook category The marketplace_agreement_signature category The marketplace_listing category The org category The oauth_application category The payment_method category The profile_picture category The project category The repo category The repository_content_analysis category The repository_dependency_graph category The repository_vulnerability_alert category The team category The discussion_post category The discussion_post_reply category The account category Action Description billing_plan_change Triggered when an organization's billing cycle changes. plan_change Triggered when an organization's billing plan changes. pending_plan_change Triggered when an organization owner or billing manager cancels or downgrades a paid plan. pending_subscription_change Triggered when a GitHub Marketplace free trial starts or expires. The billing category Action Description change_billing_type Triggered when your organization changes how it pays for GitHub. change_email Triggered when your organization's billing email address changes. The hook category Action Description create Triggered when a new hook was added to a repository owned by your organization. config_changed Triggered when an existing hook has its configuration altered. destroy Triggered when an existing hook was removed from a repository. events_changed Triggered when the events on a hook have been altered. The marketplace_agreement_signature category Action Description create Triggered when you sign the GitHub Marketplace Developer Agreement. The marketplace_listing category Action Description approve Triggered when your listing is approved for inclusion in GitHub Marketplace. create Triggered when you create a listing for your app in GitHub Marketplace. delist Triggered when your listing is removed from GitHub Marketplace. redraft Triggered when your listing is sent back to draft state. reject Triggered when your listing is not accepted for inclusion in GitHub Marketplace. The org category Action Description audit_log_export Triggered when an organization admin creates an export of the organization audit log. If the export included a query, the log will list the query used and the number of audit log entries matching that query. block_user Triggered when an organization owner blocks a user from accessing the organization's repositories. cancel_invitation Triggered when an organization invitation has been revoked. disable_oauth_app_restrictions Triggered when an owner disables OAuth App access restrictions for your organization. disable_saml Triggered when an organization admin disables SAML single sign-on for an organization. disable_two_factor_requirement Triggered when an owner disables a two-factor authentication requirement for all members, billing managers, and outside collaborators in an organization. enable_oauth_app_restrictions Triggered when an owner enables OAuth App access restrictions for your organization. enable_saml Triggered when an organization admin enables SAML single sign-on for an organization. enable_two_factor_requirement Triggered when an owner requires two-factor authentication for all members, billing managers, and outside collaborators in an organization. invite_member Triggered when a new user was invited to join your organization. oauth_app_access_approved Triggered when an owner grants organization access to an OAuth App. oauth_app_access_denied Triggered when an owner disables a previously approved OAuth App's access to your organization. oauth_app_access_requested Triggered when an organization member requests that an owner grant an OAuth App access to your organization. remove_billing_manager Triggered when an owner removes a billing manager from an organization or when two-factor authentication is required in an organization and a billing manager doesn't use 2FA or disables 2FA. remove_member Triggered when an owner removes a member from an organization or when two-factor authentication is required in an organization and an organization member doesn't use 2FA or disables 2FA. Also triggered when an organization member removes themselves from an organization. remove_outside_collaborator Triggered when an owner removes an outside collaborator from an organization or when two-factor authentication is required in an organization and an outside collaborator does not use 2FA or disables 2FA. unblock_user Triggered when an organization owner unblocks a user from an organization. update_default_repository_permission Triggered when an owner changes the default repository permission level for organization members. update_member Triggered when an owner changes a person's role from owner to member or member to owner. update_member_repository_creation_permission Triggered when an owner changes the create repository permission for organization members. update_saml_provider_settings Triggered when an organization's SAML provider settings are updated. The oauth_application category Action Description create Triggered when a new OAuth App is created. destroy Triggered when an existing OAuth App is deleted. reset_secret Triggered when an OAuth App's client secret is reset. revoke_tokens Triggered when an OAuth App's user tokens are revoked. transfer Triggered when an existing OAuth App is transferred to a new organization. The payment_method category Action Description clear Triggered when a payment method on file is removed. create Triggered when a new payment method is added, such as a new credit card or PayPal account. update Triggered when an existing payment method is updated. The profile_picture category Action Description update Triggered when you set or update your organization's profile picture. The project category Action Description create Triggered when a project board is created. rename Triggered when a project board is renamed. delete Triggered when a project board is deleted. The repo category Action Description access Triggered when a repository owned by an organization is switched from "private" to "public" (or vice versa). add_member Triggered when a user is invited to have collaboration access to a repository. add_topic Triggered when a repository admin adds a topic to a repository. archived Triggered when a repository admin archives a repository. create Triggered when a new repository is created. destroy Triggered when a repository is deleted. disable Triggered when a repository is disabled (e.g., for insufficient funds). enable Triggered when a repository is reenabled. remove_member Triggered when a user is removed from a repository as a collaborator. remove_topic Triggered when a repository admin removes a topic from a repository. rename Triggered when a repository is renamed. transfer Triggered when a repository is transferred. transfer_start Triggered when a repository transfer is about to occur. unarchived Triggered when a repository admin unarchives a repository. The repository_content_analysis category Action Description enable Triggered when an organization owner or person with admin access to the repository opts in to data use for a private repository. disable Triggered when an organization owner or person with admin access to the repository opts out of data use for a private repository. The repository_dependency_graph category Action Description enable Triggered when a repository owner or person with admin access to the repository enables the dependency graph for a private repository. disable Triggered when a repository owner or person with admin access to the repository disables the dependency graph for a private repository. The repository_vulnerability_alert category Action Description create Triggered when GitHub creates a security alert for a vulnerable dependency in a particular repository. resolve Triggered when someone with write access to a repository pushes changes to update and resolve a vulnerability in a project dependency. dismiss Triggered when an organization owner or person with admin access to the repository dismisses a security alert about a vulnerable dependency. authorized_users_teams Triggered when an organization owner or a member with admin permissions to the repository updates the list of people or teams authorized to receive security alerts for vulnerable dependencies in the repository. The team category Action Description add_member Triggered when a member of an organization is added to a team. add_repository Triggered when a team is given control of a repository. change_parent_team Triggered when a child team is created or a child team's parent is changed. change_privacy Triggered when a team's privacy level is changed. create Triggered when a new team is created. destroy Triggered when a team is deleted from the organization. remove_member Triggered when a member of an organization is removed from a team. remove_repository Triggered when a repository is no longer under a team's control. The discussion_post category Action Description update Triggered when a team discussion post is edited. destroy Triggered when a team discussion post is deleted. The discussion_post_reply category Action Description update Triggered when a reply to a team discussion post is edited. destroy Triggered when a reply to a team discussion post is deleted. Search based on time of action Use the created qualifier to filter actions in the audit log based on when they occurred. Date formatting must follow the ISO8601 standard, which is YYYY-MM-DD (year-month-day). You can also add optional time information THH:MM:SS+00:00 after the date, to search by the hour, minute, and second. That's T, followed by HH:MM:SS (hour-minutes-seconds), and a UTC offset (+00:00). Dates support greater than, less than, and range qualifiers. For example: created:2014-07-08 finds all events that occurred on July 8th, 2014. created:>=2014-07-08 finds all events that occurred on or after July 8th, 2014. created:<=2014-07-08 finds all events that occurred on or before July 8th, 2014. created:2014-07-01..2014-07-31 finds all events that occurred in the month of July 2014. The audit log contains data for the past 90 days, but you can use the created qualifier to search for events earlier than that. Search based on location Using the qualifier country, you can filter actions in the audit log based on the originating country. You can use a country's two-letter short code or its full name. Keep in mind that countries with spaces in their name will need to be wrapped in quotation marks. For example: country:de finds all events that occurred in Germany. country:Mexico finds all events that occurred in Mexico. country:"United States" all finds events that occurred in the United States. Exporting the audit log You can export your organization's audit log as JSON data or a comma-separated value (CSV) file, with or without a specified search. When exporting the results of a specific search, these fields can be included: key example value action team.create actor dewski user shayfrendt org octo-org repo octo-org/documentation created_at 1429548104000 data.hook_id 245 data.events ["issues", "issue_comment", "pull_request", "pull_request_review_comment"] data.events_were ["push", "pull_request", "issues"] data.target_login octocat data.old_user hubot data.team octo-org/engineering Further reading "Keeping your organization secure" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Reviewing your organization's installed integrations - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Reviewing your organization's installed integrations Reviewing your organization's installed integrations mac windows linux all You can review the permission levels for your organization's installed integrations and configure each integration's access to organization repositories. In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click Settings. In the left sidebar, click Installed GitHub Apps. Next to the GitHub App you'd like to review, click Configure. Review the GitHub App's permissions and repository access. To give the GitHub App access to all of your organization's repositories, select All repositories. To choose specific repositories to give the application access to, select Only select repositories, then type a repository name. Click Save. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Managing member identity and access in your organization with SAML single sign-on - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Managing member identity and access in your organization with SAML single sign-on Managing member identity and access in your organization with SAML single sign-on mac windows linux all Organization administrators can manage organization members' identities and access to the organization with SAML single sign-on. Note: This feature is only available on the Business plan. About identity and access management with SAML single sign-on Using Security Assertion Markup Language (SAML) web browser single sign-on (SSO), administrators can use an identity provider to manage the identities of their users and the applications they use. Organization members can authenticate with an identity provider that grants access to your GitHub organization. About SCIM With System for Cross-domain Identity Management (SCIM), administrators can automate the exchange of user identity information between systems. Connecting your identity provider to your organization To use SAML single sign-on and SCIM, you must connect your identity provider to your GitHub organization. Enabling and testing SAML single sign-on for your organization Organization owners and admins can enable SAML single sign-on to add an extra layer of security to their organization. Preparing to enforce SAML single sign-on in your organization Before you enforce SAML single sign-on in your organization, you should verify your organization's membership and configure the connection settings to your identity provider. Enforcing SAML single sign-on for your organization Organization owners and admins can enforce SAML SSO so that all organization members must authenticate via an identity provider. Downloading your organization's SAML single sign-on recovery codes Organization administrators should download their organization's SAML single sign-on recovery codes to ensure that they can access GitHub even if the identity provider for the organization is unavailable. Accessing your organization if your identity provider is unavailable Organization administrators can sign into GitHub even if their identity provider is unavailable by bypassing single sign-on and using their recovery codes. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support About identity and access management with SAML single sign-on - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / About identity and access management with SAML single sign-on About identity and access management with SAML single sign-on mac windows linux all Using Security Assertion Markup Language (SAML) web browser single sign-on (SSO), administrators can use an identity provider to manage the identities of their users and the applications they use. Organization members can authenticate with an identity provider that grants access to your GitHub organization. Note: This feature is only available on the Business plan. With SAML SSO, organization administrators can invite members to connect their existing GitHub user accounts to a supported IdP. SAML SSO gives organizations a centralized and secure way of  controlling access to their resources on GitHub and helps organization members maintain control of their identity and  contributions. Organization members sign in through the organization's IdP and their existing GitHub account is linked to an external identity that belongs to the organization. This external identity is separate from, but related to, their GitHub account and is used to control access to the organization's resources like  repositories, issues, and pull requests. We offer limited support for all identity providers that implement the SAML 2.0 standard. We officially support these identity providers that have been internally tested: Azure Active Directory (Azure AD) Okta OneLogin PingOne Shibboleth SAML SSO can be disabled, enabled but not enforced, or enabled and enforced. For more information on setting up and enforcing SAML SSO for your GitHub organization, see "Connecting your identity provider to your organization" and "Enforcing SAML single sign-on for your organization." You must periodically log in to your SAML provider to authenticate and gain access to the organization's resources on GitHub. The duration of this login period is specified by your IdP and is generally 24 hours. This periodic login requirement limits the length of access and requires you to re-identify yourself to continue. Note: Outside collaborators aren't required to have an external (SAML) identity to access an organization that uses SAML SSO. Members will be required to authorize personal access tokens to access the organization's protected resources using the API and Git on the command line. Organization administrators can revoke the access token at any time. For more information, see "Viewing and revoking organization members' authorized access to tokens." Note: If your IdP supports SCIM, members are automatically invited to join the GitHub organization when access is provisioned in your IdP and will be automatically removed from the GitHub organization when their access is removed from your IdP. Further reading "About SCIM" "About two-factor authentication and SAML single sign-on " Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support About SCIM - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / About SCIM About SCIM mac windows linux all With System for Cross-domain Identity Management (SCIM), administrators can automate the exchange of user identity information between systems. Note: This feature is only available on the Business plan. If you use SAML SSO in your organization, you can implement SCIM to add, manage, and remove organization members' access to GitHub. For example, an administrator can deprovision an organization member using SCIM and automatically remove the member from the organization. If you're using SAML SSO without implementing SCIM, you won't benefit from automatic deprovisioning. When organization members' sessions expire after their access has been removed from the IdP, they won't be automatically removed from the organization. Authorized tokens grant access to the organization even after their sessions expire. To remove access, organization administrators can either manually remove the authorized token from the organization or automate its removal with SCIM. These identity providers are compatible with the GitHub SCIM API. For more information, see SCIM in the GitHub API documentation. OneLogin Okta Further reading "About identity and access management with SAML single sign-on" "Connecting your identity provider to your organization" "Enabling and testing SAML single sign-on for your organization" "Viewing and revoking organization members' authorizes access tokens" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Connecting your identity provider to your organization - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Connecting your identity provider to your organization Connecting your identity provider to your organization mac windows linux all To use SAML single sign-on and SCIM, you must connect your identity provider to your GitHub organization. Note: This feature is only available on the Business plan. Before enabling SAML SSO in your GitHub organization, you'll need to connect your identity provider (IdP) to your organization. You can find the SAML and SCIM implementation details for your IdP in their documentation: Azure Active Directory (Azure - AD) SAML Okta SAML and SCIM OneLogin SAML and SCIM PingOne SAML Shibboleth SAML Note: GitHub supported identity providers for SCIM are Okta and OneLogin. For more information about SCIM, see "About SCIM." Further reading "About identity and access management with SAML single sign-on" "Enforcing SAML single sign-on for your organization" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Enabling and testing SAML single sign-on for your organization - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Enabling and testing SAML single sign-on for your organization Enabling and testing SAML single sign-on for your organization mac windows linux all Organization owners and admins can enable SAML single sign-on to add an extra layer of security to their organization. Note: This feature is only available on the Business plan. You can enable SAML SSO in your organization without requiring all members to use it. Enabling but not enforcing SAML SSO in your organization can help smooth your organization's SAML SSO adoption. Once a majority of your organization's members use SAML SSO, you can enforce it within your organization. If you enable but don't enforce SAML SSO, organization members who choose not to use SAML SSO can still be members of the organization. For more information on enforcing SAML SSO, see "Enforcing SAML single sign-on for your organization." Note: You must periodically log in to your SAML provider to authenticate and gain access to the organization's resources on GitHub. The duration of this login period is specified by your IdP and is generally 24 hours. This periodic login requirement limits the length of access and requires you to re-identify yourself to continue. Prior to enforcing SAML SSO in your organization, ensure that you've set up your identity provider (IdP). For more information, see "Preparing to enforce SAML single sign-on in your organization." Note: Outside collaborators aren't required to have an external (SAML) identity to access an organization that uses SAML SSO. In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click Settings. In the organization settings sidebar, click Security. Under "SAML single sign-on", select Enable SAML authentication. Note: After enabling SAML SSO, you can download your single sign-on recovery codes so that you can access your organization even if your IdP is unavailable. For more information, see "Downloading your organization's SAML single sign-on recovery codes." In the "Sign on URL" field, type the HTTPS endpoint of your IdP for single sign-on requests. This value is available in your IdP configuration. Optionally, in the "Issuer" field, type your SAML issuer's name. This verifies the authenticity of sent messages. Under "Public Certificate," paste a certificate to verify SAML responses. Click and then in the Signature Method and Digest Method drop-downs, choose the hashing algorithm used by your SAML issuer to verify the integrity of the requests. Before enabling SAML SSO for your organization, click Test SAML configuration to ensure that the information you've entered is correct. Tip: When setting up SAML SSO in your organization, you can test your implementation without affecting your organization members by leaving Require SAML SSO authentication for all members of the organization name organization unchecked. To enforce SAML SSO and remove all organization members who haven't authenticated via your IdP, select Require SAML SSO authentication for all members of the organization name organization. For more information on enforcing SAML SSO, see "Enforcing SAML single sign-on for your organization." Click Save. Further reading "About identity and access management with SAML single sign-on" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Preparing to enforce SAML single sign-on in your organization - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Preparing to enforce SAML single sign-on in your organization Preparing to enforce SAML single sign-on in your organization mac windows linux all Before you enforce SAML single sign-on in your organization, you should verify your organization's membership and configure the connection settings to your identity provider. Note: This feature is only available on the Business plan. When you enforce SAML single sign-on in your organization, members that haven't authenticated via your identity provider (IdP) will be removed from the organization and will receive an email notifying them about the removal. Before enforcing SAML SSO in your organization, you should: Add or remove members from your organization if needed. If you haven't already, connect your IdP to your organization. For more information, see "Connecting your identity provider to your organization." Ensure that your organization members have signed in and linked their accounts with the IdP. Note: Outside collaborators aren't required to have an external (SAML) identity to access an organization that uses SAML SSO. Further reading "About identity and access management with SAML single sign-on" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Enforcing SAML single sign-on for your organization - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Enforcing SAML single sign-on for your organization Enforcing SAML single sign-on for your organization mac windows linux all Organization owners and admins can enforce SAML SSO so that all organization members must authenticate via an identity provider. Note: This feature is only available on the Business plan. If you enforce SAML SSO in your organization, any members, including admins who have not authenticated via your SAML identity provider (IdP), will be removed from the organization and will receive an email notifying them about the removal. Bots and service accounts that do not have external identities set up in your organization's IdP will also be removed. For more information on bots and service accounts, see "Managing bots and service accounts with SAML single sign-on." You can restore organization members once they successfully complete single sign-on. Tip: When setting up SAML SSO in your organization, you can test your implementation without affecting your organization members by leaving Require SAML SSO authentication for all members of the organization name organization unchecked. Enable and test SAML SSO for your organization. For more information on this process, see "Enabling and testing SAML single sign-on for your organization." After you select Require SAML SSO authentication for all members of the SAML SSO Org organization, organization members who haven't authenticated via your IdP will be shown. If you enforce SAML SSO, these members will be removed from the organization. Click Enforce SAML SSO to enforce SAML SSO and remove the listed organization members. Further reading "About identity and access management with SAML single sign-on" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Downloading your organization's SAML single sign-on recovery codes - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Downloading your organization's SAML single sign-on recovery codes Downloading your organization's SAML single sign-on recovery codes mac windows linux all Organization administrators should download their organization's SAML single sign-on recovery codes to ensure that they can access GitHub even if the identity provider for the organization is unavailable. Note: This feature is only available on the Business plan. Recovery codes should not be shared or distributed. We recommend saving them with a password manager such as LastPass, 1Password, or Keeper. In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click Settings. In the organization settings sidebar, click Security. Under "SAML single sign-on", in the note about recovery codes, click Save your recovery codes. Save your recovery codes by clicking Download, Print, or Copy. Note: Your recovery codes will help get you back into GitHub if your IdP is unavailable. If you generate new recovery codes the recovery codes displayed on the "Single sign-on recovery codes" page are automatically updated. Once you use a recovery code to regain access to GitHub, it cannot be reused. Access to GitHub will only be available for 24 hours before you'll be asked to sign in using single sign-on. Further reading "About identity and access management with SAML single sign-on" "Accessing your organization if your identity provider is unavailable" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Accessing your organization if your identity provider is unavailable - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Accessing your organization if your identity provider is unavailable Accessing your organization if your identity provider is unavailable mac windows linux all Organization administrators can sign into GitHub even if their identity provider is unavailable by bypassing single sign-on and using their recovery codes. Note: This feature is only available on the Business plan. Organization administrators can use one of their downloaded or saved recovery codes to bypass single sign-on. You may have saved these to a password manager, such as LastPass, 1Password, or Keeper. Note: You can only use recovery codes once and you must use them in consecutive order. Recovery codes grant access for 24 hours. At the bottom of the single sign-on dialog, click Use a recovery code to bypass single sign-on. In the "Recovery Code" field, type your recovery code. Click Verify. After you've used a recovery code, make sure to note that it's no longer valid. You will not be able to reuse the recovery code. Further reading "About identity and access management with SAML SSO" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Granting access to your organization with SAML single sign-on - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Granting access to your organization with SAML single sign-on Granting access to your organization with SAML single sign-on mac windows linux all Organization administrators can grant access to their organization with SAML single sign-on. This access can be granted to organization members, bots, and service accounts. Note: This feature is only available on the Business plan. Managing bots and service accounts with SAML single sign-on Organizations that have enabled SAML single sign-on can retain access for bots and service accounts. Viewing and revoking organization members' authorized access tokens Organization administrators can view and revoke organization members' authorized access tokens. About two-factor authentication and SAML single sign-on Organizations administrators can enable both SAML single sign-on and two-factor authentication to add additional authentication measures for their organization members. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Managing bots and service accounts with SAML single sign-on - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Managing bots and service accounts with SAML single sign-on Managing bots and service accounts with SAML single sign-on mac windows linux all Organizations that have enabled SAML single sign-on can retain access for bots and service accounts. Note: This feature is only available on the Business plan. To retain access for bots and service accounts, organization administrators can enable, but not enforce SAML single sign-on for their organization. If you need to enforce SAML single sign-on for your organization, you can create an external identity for the bot or service account with your identity provider (IdP). Note: If you enforce SAML single sign-on for your organization and do not have external identities set up for bots and service accounts with your IdP, they will be removed from your organization. Further reading "About identity and access management with SAML single sign-on" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Viewing and revoking organization members' authorized access tokens - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Viewing and revoking organization members' authorized access tokens Viewing and revoking organization members' authorized access tokens mac windows linux all Organization administrators can view and revoke organization members' authorized access tokens. Note: This feature is only available on the Business plan. In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click People. Navigate to and click on the organization member whose access token you'd like to view. Click SAML identity linked. In "Authorized credentials", find the authorized access token you'd like to revoke and click Revoke. Note: Only the last eight characters of access tokens are visible. If needed, you can work with the organization member to determine which access token should be revoked. Read the information and click I understand, revoke access for this token. Further reading "About identity and access management with SAML single sign-on" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support About two-factor authentication and SAML single sign-on - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / About two-factor authentication and SAML single sign-on About two-factor authentication and SAML single sign-on mac windows linux all Organizations administrators can enable both SAML single sign-on and two-factor authentication to add additional authentication measures for their organization members. Note: This feature is only available on the Business plan. Two-factor authentication (2FA) provides basic authentication for organization members. By enabling 2FA, organization administrators limit the likelihood that a member's GitHub account could be compromised. For more information on 2FA, see "About two-factor authentication." To add additional authentication measures, organization administrators can also enable SAML single sign-on (SSO) so that organization members must use single sign-on to access an organization. For more information on SAML SSO, see "About identity and access management with SAML single sign-on." If both 2FA and SAML SSO are enabled, organization members must do the following: Use 2FA to log in to their GitHub account Use single sign-on to access the organization Use an authorized token for API or Git access and use single sign-on to authorize the token Further reading "Enforcing SAML single sign-on for your organization" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Encouraging positive contributions in your organization - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Encouraging positive contributions in your organization Encouraging positive contributions in your organization mac windows linux all To build a positive environment for contributors and manage the community around your organization's projects, owners can block and unblock a user's access to organization repositories. Blocking a user from your organization Organization owners can block a user to remove the user's ability to collaborate on the organization's repositories. Viewing users who are blocked from your organization You can view a list of all users whom you or other owners have blocked from your organization. Unblocking a user from your organization Organization owners can unblock a user who's previously been blocked, restoring their access to the organization's repositories. Further reading "Encouraging positive contributions to your project" "Helping people contribute to your project" "Moderating comments and conversations" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Blocking a user from your organization - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Blocking a user from your organization Blocking a user from your organization mac windows linux all Organization owners can block a user to remove the user's ability to collaborate on the organization's repositories. At the time that you block a user from your organization: The user stops watching your organization's repositories The user's stars and issue assignments are removed from your repositories The user is removed as a collaborator on your organization's repositories After you've blocked a user from your organization, they cannot: Cross-reference your organization's repositories in comments Fork, watch, or star your organization's repositories In your organization's repositories, blocked users also cannot: Open issues or send pull requests Comment on issues, pull requests, or commits Add or edit wiki pages The user is not directly notified that you've blocked them. Tip: If you're blocking a user because of a heated conversation, consider locking the conversation so only collaborators can comment. To block an organization member, remove the user from the organization. In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click Settings. In the settings sidebar, click Blocked users. Under "Block a user", type the username of the user you'd like to block, then click Block user. Further reading "Viewing users who are blocked from your organization" "Unblocking a user from your organization" "Blocking a user from your personal account" "Unblocking a user from your personal account" "Reporting abuse or spam" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Viewing users who are blocked from your organization - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Viewing users who are blocked from your organization Viewing users who are blocked from your organization mac windows linux all You can view a list of all users whom you or other owners have blocked from your organization. In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click Settings. In the settings sidebar, click Blocked users. Under "Blocked users", review the list of users who are blocked from your organization. Further reading "Blocking a user from your organization" "Unblocking a user from your organization" "Viewing users you've blocked from your personal account" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Unblocking a user from your organization - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Unblocking a user from your organization Unblocking a user from your organization mac windows linux all Organization owners can unblock a user who's previously been blocked, restoring their access to the organization's repositories. When you unblock a user from your organization, they'll be able to contribute to your organization's repositories. In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click Settings. In the settings sidebar, click Blocked users. Under "Blocked users", next to the user you'd like to unblock, click Unblock. Tip: Settings that were removed when you blocked the user from your organization, such as collaborator status, stars, and watches, are not restored when you unblock the user. Further reading "Blocking a user from your organization" "Blocking a user from your personal account" "Unblocking a user from your personal account" "Reporting abuse or spam" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Upgrading your organization's billing plan - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Upgrading your organization's billing plan Upgrading your organization's billing plan mac windows linux all You can upgrade your organization to a paid plan or you can switch from per-repository pricing to a per-user plan. Organization billing plans Organizations are available on the free plan and the Team and Business paid plans. About per-user pricing With per-user pricing, organizations pay based on team size to access unlimited private repositories, and optionally, sophisticated user management and security features. Upgrading your organization account You can upgrade your organization to a paid plan with unlimited private repositories, and optionally, sophisticated user authentication and management, 24/5 support, and a service level agreement for uptime availability. Switching from per-repository to per-user pricing If your organization is using the legacy per-repository billing plan, you can switch to per-user pricing at any time. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Organization billing plans - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Organization billing plans Organization billing plans mac windows linux all Organizations are available on the free plan and the Team and Business paid plans. You can upgrade or downgrade your billing plan at any time. Free plan With the free plan, you can use organization features to collaborate on unlimited public repositories with unlimited organization membership. Team plan The Team plan gives you unlimited public and private repositories. You can upgrade to the Team plan for five or more paid users in your organization. Tip: The Team plan is free for both verified teachers who use GitHub in the classroom and for academic faculty who use GitHub for non-profit academic research. For more information, see our education page. Business plan With the Business plan, you can: Collaborate on unlimited public and private repositories Allow or require organization members to authenticate to GitHub using SAML SSO Provision and deprovision access with SAML or SCIM You can upgrade to the Business plan for one or more paid users in your organization. The Business plan includes a service level agreement for 99.95% monthly uptime. For more information, see "GitHub Business Plan Addendum." The Business plan also includes a target eight-hour response time for priority support requests, Monday to Friday in your local time zone. For more information, see "Business plan support." Other paid features and products In addition to paid plans for your GitHub account, you can purchase other features products with your existing GitHub payment information. For more information, see "GitHub's billing plans." Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support About per-user pricing - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / About per-user pricing About per-user pricing mac windows linux all With per-user pricing, organizations pay based on team size to access unlimited private repositories, and optionally, sophisticated user management and security features. New organizations can build public and open-source projects on the free plan, or upgrade to a paid plan with per-user pricing. Organizations using a paid plan before May 11, 2016 can choose to stay on their existing per-repository plan or switch to per-user pricing. There's not currently a timeline to switch to per-user pricing - you'll have at least twelve months' notice before any mandated change to your plan. For more information on per-user billing options, see "Organization billing plans." How many seats do I need for my organization? Organization owners and members each fill a seat. If you've sent a pending invitation to a prospective organization member, the invitation will fill a seat. Outside collaborators and bot accounts will count toward your organization's total of paid seats if they are given access to a private repository. How can I add or downgrade my organization's paid seats? You can add paid seats to your organization anytime. If you're paying for more seats than you're using, you can also remove paid seats from your organization. If you have questions about your organization's billing plan, contact GitHub Support. If I keep my organization on a per-repository plan, can I upgrade or downgrade to a different per-repository plan? You can upgrade or downgrade between legacy paid plans in your organization's billing settings. When you upgrade to a plan with more private repositories, we'll immediately move your account to your new plan and bill you for the difference in price, prorated for the number of days left in your billing cycle. When you downgrade to a paid plan with fewer private repositories, your new plan will take effect on your next billing date. If you have more private repositories than your new plan allows for, your private repositories will be locked when your new plan takes effect. To reduce your number of private repositories, you can make some of your private repositories public, or you can clone your private repositories locally and delete the copies on GitHub. Further reading "Upgrading your organization's billing plan" "Switching from per-repository to per-user pricing" "Adding seats to your organization" "Removing paid seats from your organization" "How does upgrading or downgrading affect the billing process?" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Upgrading your organization account - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Upgrading your organization account Upgrading your organization account mac windows linux all You can upgrade your organization to a paid plan with unlimited private repositories, and optionally, sophisticated user authentication and management, 24/5 support, and a service level agreement for uptime availability. Note: Only organization members with the owner or billing manager role can access or change billing settings for your organization. If you receive a 500 error when trying to upgrade your account: Try clearing your browser's cache, then resubmit your information Check to make sure you have entered your payment data correctly If that doesn't resolve the error, please contact GitHub Support. Upgrading your organization account with a credit card In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click Settings. In your organization's Settings sidebar, click Billing. Under "Billing overview", click Upgrade. If you're upgrading from the free plan, under "Plan setup and duration", select a billing plan. Optionally, if your organization account is owned by a business, select This account is owned by a business, then type your company's name. Choose whether you want to be billed monthly or yearly. Under "Pay with," type your credit card information. Review the information about the charge and your billing date, then click Upgrade your plan to finish upgrading your account. Upgrading your organization account with PayPal In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click Settings. In your organization's Settings sidebar, click Billing. Under "Billing overview", click Upgrade. If you're upgrading from the free plan, under "Plan setup and duration", select a billing plan. Optionally, if your organization account is owned by a business, select This account is owned by a business, then type your company's name. Choose whether you want to be billed monthly or yearly. Under "Pay with", select PayPal account. Click PayPal. Log in to PayPal with your account information. Agree to the terms of service for paying with PayPal. Select your country of residency, as well as your state or province (if you're asked). Type your postal code. If you're a European business, enter your VAT or GST ID. Review the information about the charge and your billing date, then click Upgrade your plan to finish upgrading your account. Next steps If you upgraded your organization to the Business plan, you can now set set up identity and access management for your organization. For more information, see "Managing member identity and access in your organization with SAML SSO." Further reading "Organization billing plans" "Adding seats to your organization" "Removing paid seats from your organization" "How does upgrading or downgrading affect the billing process?" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Switching from per-repository to per-user pricing - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Switching from per-repository to per-user pricing Switching from per-repository to per-user pricing mac windows linux all If your organization is using the legacy per-repository billing plan, you can switch to per-user pricing at any time. Notes: Only organization members with the owner or billing manager role can access or change billing settings for your organization. You will not be able to switch back to repository pricing once you've upgraded to per-user pricing. In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click Settings. In your organization's Settings sidebar, click Billing. Under "Plan", click Upgrade. If you're upgrading from the free plan, under "Plan setup and duration", select a billing plan. Optionally, if your organization account is owned by a business, select This account is owned by a business, then type your company's name. Choose whether you want to be billed monthly or yearly. Review the information about the charge and your billing date, then click Upgrade your plan to finish upgrading your account. Further reading "Organization billing plans" "Adding seats to your organization" "About per-user pricing" "Removing paid seats from your organization" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Managing your organization's paid seats - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Managing your organization's paid seats Managing your organization's paid seats mac windows linux all You can add or remove paid seats from your organization at any time. Adding seats to your organization If you'd like additional users to have access to your organization's private repositories, you can purchase more seats anytime. Removing paid seats from your organization If you're not using all of your organization's paid seats, you can downgrade to pay for fewer seats. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Adding seats to your organization - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Adding seats to your organization Adding seats to your organization mac windows linux all If you'd like additional users to have access to your organization's private repositories, you can purchase more seats anytime. Note: Only organization members with the owner or billing manager role can access or change billing settings for your organization. In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click Settings. In your organization's Settings sidebar, click Billing. Under "Billing overview", click Add seats. Under "Add seats", type the number of seats you'd like to add. Click Add seats. Further reading "About per-user pricing" "Removing paid seats from your organization" "Switching from per-repository to per-user pricing" "Inviting users to join your organization" "How does upgrading or downgrading affect the billing process?" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Removing paid seats from your organization - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Removing paid seats from your organization Removing paid seats from your organization mac windows linux all If you're not using all of your organization's paid seats, you can downgrade to pay for fewer seats. Notes: Only organization members with the owner or billing manager role can access or change billing settings for your organization. Your organization's number of paid seats must equal the number of organization members and outside collaborators or bots that have access to any of your private repositories. When you downgrade your organization's number of paid seats, changes are applied at the end of your current billing cycle. You'll need to reduce the number of paid seats that your organization uses to match the new number of paid seats before your paid seat count drops on your next billing date. To reduce the number of paid seats your organization uses, you can remove members from your organization or convert members to outside collaborators and give them access to only public repositories. In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click Settings. In your organization's Settings sidebar, click Billing. Under "Billing overview", click Remove seats. Under "Remove seats", select the number of seats you'd like to downgrade to. Review the information about your new payment on your next billing date, then click Remove seats to finish downgrading. Further reading "About per-user pricing" "Adding seats to your organization" "Switching from per-repository to per-user pricing" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Paying for organization accounts - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Paying for organization accounts Paying for organization accounts mac windows linux all Owners and billing managers can manage an organization's payment information and plan duration. Updating your organization's payment method You can update the credit card or PayPal account that we use to bill your organization at any time. Switching payment methods for your organization You can change how your organization pays for GitHub at any time. Removing a payment method associated with your organization If your organization is already paying for its GitHub subscription with a coupon, and you aren't using your payment method for any other paid features or products on GitHub, you can remove your organization's credit card or PayPal information. Switching between monthly and yearly billing for your organization Choose to pay for your organization on a monthly or yearly billing cycle, depending on your needs. Redeeming a coupon for organizations With a coupon code, you can apply a discount for a paid plan to your personal account. Unlocking a locked organization account Your organization's private repositories are locked when you downgrade your paid account to a free one, or if your paid plan is seriously past due because of billing problems. Discounted organization accounts GitHub provides discounts to educational institutions, nonprofits, and libraries seeking to collaborate on private repositories in organizations. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Updating your organization's payment method - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Updating your organization's payment method Updating your organization's payment method mac windows linux all You can update the credit card or PayPal account that we use to bill your organization at any time. When you update your payment method for your personal account or organization's GitHub subscription, your new payment method is automatically added to your other subscriptions for paid products. For more information, see "GitHub's billing plans." Notes: Only organization members with the owner or billing manager role can access or change billing settings for your organization. Credit cards not issued in the US can be prone to being declined. If you have trouble with such a card, we recommend paying for your organization account using PayPal. Updating your organization's credit card In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click Settings. In your organization's Settings sidebar, click Billing. Click Update payment method. Type your new credit card information in the secure form. Click Update credit card or Save credit card. Updating your organization's PayPal information If your organization is outside of the US or if you're using a corporate checking account to pay for GitHub, PayPal could be a helpful method of payment. In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click Settings. In your organization's Settings sidebar, click Billing. Under "Pay with", select PayPal account. Click PayPal. Log in to PayPal with your account information. Agree to the terms of service for paying with PayPal. Select your country of residency, as well as your state or province (if you're asked). Type your postal code. If you're a European business, enter your VAT or GST ID. Click Process payment. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Switching payment methods for your organization - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Switching payment methods for your organization Switching payment methods for your organization mac windows linux all You can change how your organization pays for GitHub at any time. You can pay for GitHub with a credit card or with a PayPal account. When you update your payment method for your personal account or organization's GitHub subscription, your new payment method is automatically added to your other subscriptions for paid products. For more information, see "GitHub's billing plans." Note: Only organization members with the owner or billing manager role can access or change billing settings for your organization. In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click Settings. In your organization's Settings sidebar, click Billing. Click Update payment method. At the top, choose to either pay with a credit card or PayPal. Further reading "Updating your organization's payment method" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Removing a payment method associated with your organization - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Removing a payment method associated with your organization Removing a payment method associated with your organization mac windows linux all If your organization is already paying for its GitHub subscription with a coupon, and you aren't using your payment method for any other paid features or products on GitHub, you can remove your organization's credit card or PayPal information. Notes: Only organization members with the owner or billing manager role can access or change billing settings for your organization. If you downgrade your organization to free and you don't have subscriptions for any other paid features or products, we'll automatically remove your payment information. In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click Settings. In your organization's Settings sidebar, click Billing. In the "Payment" section, click . Confirm the change by clicking Remove credit card or Remove PayPal account. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Switching between monthly and yearly billing for your organization - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Switching between monthly and yearly billing for your organization Switching between monthly and yearly billing for your organization mac windows linux all Choose to pay for your organization on a monthly or yearly billing cycle, depending on your needs. If you decide to switch to yearly billing from a monthly billing plan, or vice versa, your account, along with any other paid features and products, will be moved to your new billing cycle on your next billing date. Warning: Only organization members with the owner or billing manager role can access or change billing settings for your organization. Changing the duration of a per-user plan In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. In your organization's Settings sidebar, click Billing. Under "Billing overview", next to your payment information, click Change to yearly billing or Change to monthly billing. Review your new payment details, then click Change plan duration. Changing the duration of a per-repository plan In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. In your organization's Settings sidebar, click Billing. Under "Billing overview", click Change plan. At the top right corner, click Switch to monthly billing or Switch to yearly billing. Further reading "Switching between monthly and yearly billing for your personal account" "How does upgrading or downgrading affect the billing process?" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Redeeming a coupon for organizations - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Redeeming a coupon for organizations Redeeming a coupon for organizations mac windows linux all With a coupon code, you can apply a discount for a paid plan to your personal account. You cannot apply coupons to paid plans for GitHub Marketplace apps. Notes: Only organization members with the owner or billing manager role can access or change billing settings for your organization. GitHub can't issue a refund if you pay for an account before applying a coupon. We also can't transfer a redeemed coupon or give you a new coupon if you apply it to the wrong account. Confirm that you're applying the coupon to the correct account before you redeem a coupon. Visit the Redeem coupon page. In the Enter coupon code box, type your coupon code and click Redeem. If you're not already signed in, you can sign in on this page, or create a new account to apply your coupon to. Under "Redeem your coupon", click Choose next to the organization you want to apply the coupon to. If you'd like to apply your coupon to a new organization that doesn't exist yet, click Create a new organization. Under "Your new plan", review the information about your plan and discount, then click Redeem. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Unlocking a locked organization account - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Unlocking a locked organization account Unlocking a locked organization account mac windows linux all Your organization's private repositories are locked when you downgrade your paid account to a free one, or if your paid plan is seriously past due because of billing problems. You can unlock and access your private repositories by updating your account's payment method and resuming paid status. We do not ask you to pay for the time elapsed in locked mode. We won't delete your locked private repositories or make them public. After a period of nonpayment, GitHub reserves the right to delete content from locked repositories. If you need short-term access to the repositories to move them off of the account, contact GitHub Support. Warning: Only organization members with the owner or billing manager role can access or change billing settings for your organization. Unlocking an organization account locked due to a declined payment If your organization's private repositories were locked due to a declined payment, you'll need to update your billing information to trigger a newly authorized charge. For more information, see "Updating your organization's payment method." If the new billing information is approved, we will immediately charge your account, and the organization account will automatically unlock when a successful payment has been made. Unlocking an organization account locked due to a plan downgrade If your organization's private repositories were locked because you downgraded your billing plan to free, you can: Upgrade your organization to a paid plan Make your private repositories public Further reading "Unlocking a locked personal account" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Discounted organization accounts - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Discounted organization accounts Discounted organization accounts mac windows linux all GitHub provides discounts to educational institutions, nonprofits, and libraries seeking to collaborate on private repositories in organizations. Discounts for schools and universities GitHub provides discounted and free Team plans for organizations to teachers, researchers, and employees of educational institutions that grant credentials. You can request a discount for your classroom, research, or other academic project on our education page. Discounts for nonprofits and libraries GitHub provides free Team plans for organizations with unlimited private repositories and unlimited users to qualifying 501(c)3 (or equivalent) organizations and libraries. You can request a discount for your organization on our nonprofit page. If your organization is already on a paid plan, your organization's last transaction will be refunded once your nonprofit discount has been applied. Tip: Discounts do not apply to subscriptions for other paid products and features. Further reading "Discounted personal accounts" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Viewing and managing your organization's billing information - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Viewing and managing your organization's billing information Viewing and managing your organization's billing information mac windows linux all Owners and billing managers can set an organization's billing email and download and customize its receipts. Setting your organization's billing email Your organization's billing email is where GitHub sends receipts, credit card or PayPal charges, and other billing-related communication. Finding your organization's next billing date You can find out when you're next going to be billed for your GitHub plan in your organization settings. Downloading receipts for organizations You can download past receipts at any time from your organization's settings page. Adding information to your organization's receipts If there's specific information required by your company or country, you can add that information to your GitHub receipts. Viewing and managing pending changes to your organization's billing plan You can view and cancel pending changes to your organization's billing plan and subscriptions before they take effect on your next billing date. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Setting your organization's billing email - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Setting your organization's billing email Setting your organization's billing email mac windows linux all Your organization's billing email is where GitHub sends receipts, credit card or PayPal charges, and other billing-related communication. Note: Only organization members with the owner or billing manager role can access or change billing settings for your organization. In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click Settings. Under Billing Email, type a valid email address. The email does not need to be unique to the organization account. To confirm your changes, click Update profile. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Finding your organization's next billing date - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Finding your organization's next billing date Finding your organization's next billing date mac windows linux all You can find out when you're next going to be billed for your GitHub plan in your organization settings. Note: Only organization members with the owner or billing manager role can access or change billing settings for your organization. In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click Settings. In your organization's Settings sidebar, click Billing. You can see your next billing date in the "Payment" section. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Downloading receipts for organizations - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Downloading receipts for organizations Downloading receipts for organizations mac windows linux all You can download past receipts at any time from your organization's settings page. Note: Only organization members with the owner or billing manager role can access or change billing settings for your organization. In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click Settings. In your organization's Settings sidebar, click Billing. Under "Payment history", click . Further reading "Downloading receipts for personal accounts" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Adding information to your organization's receipts - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Adding information to your organization's receipts Adding information to your organization's receipts mac windows linux all If there's specific information required by your company or country, you can add that information to your GitHub receipts. Your receipts include your GitHub subscription as well as any subscriptions for other paid features and products. Warnings: Only organization members with the owner or billing manager role can access or change billing settings for your organization. For security reasons, we strongly recommend against including any confidential or financial information (such as credit card numbers) on your receipts. In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click Settings. In your organization's Settings sidebar, click Billing. Under "Billing overview", next to "Extra info", click Add information. Type the extra information you'd like on your receipt, then click Save contact information. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Viewing and managing pending changes to your organization's billing plan - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Viewing and managing pending changes to your organization's billing plan Viewing and managing pending changes to your organization's billing plan mac windows linux all You can view and cancel pending changes to your organization's billing plan and subscriptions before they take effect on your next billing date. You can cancel pending changes to your organization's GitHub billing plan as well as pending changes to your organization's subscriptions to other paid features and products. When you cancel a pending change, your organization's plan or subscription will not change on your next billing date (unless you make a subsequent change to your organization's plan or subscription before your next billing date). In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click Settings. In your organization's Settings sidebar, click Billing. Under "Pending changes," review your pending changes. Next to the pending change you'd like to cancel, click Cancel. To confirm that you'd like to cancel your pending plan changes, in the dialog box, click OK. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Downgrading your organization's billing plan - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Downgrading your organization's billing plan Downgrading your organization's billing plan mac windows linux all You can downgrade your organization to a different billing plan or to the free plan at any time. Downgrading your organization to free You can downgrade your organization to the free plan at any time. Downgrading your organization from the Business plan to the Team plan If your organization is on the Business paid plan, you can downgrade to the Team paid plan at any time. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Downgrading your organization to free - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Downgrading your organization to free Downgrading your organization to free mac windows linux all You can downgrade your organization to the free plan at any time. Downgrading to free does not affect your subscriptions for other paid features and products. If you want to cease all of your paid subscriptions on GitHub, you must downgrade each paid subscription separately. Warnings: Only organization members with the owner or billing manager role can access or change billing settings for your organization. When you downgrade your billing plan, your new plan takes effect on your next billing date. Make sure to back up your private repositories before your next billing date, or you won't be able to access them without upgrading to a paid plan again. Downgrading an organization with per-seat pricing to free In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click Settings. In your organization's Settings sidebar, click Billing. Under "Downgrade your plan," select Downgrade options, then click Downgrade to the Free plan. Read the information about what happens when you cancel a paid plan, then click I understand, downgrade my plan. Downgrading an organization with per-repository pricing to free In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click Settings. In your organization's Settings sidebar, click Billing. Under "Billing overview", click Change plan. In the Plans table, next to the plan you'd like to switch to, click Downgrade. Select the reason you're downgrading your account, then click Downgrade plan. Further reading "How does upgrading or downgrading affect the billing process?" "Downgrading your organization from the Business plan to the Team plan" "Removing a payment method associated with your organization" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Downgrading your organization from the Business plan to the Team plan - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Downgrading your organization from the Business plan to the Team plan Downgrading your organization from the Business plan to the Team plan mac windows linux all If your organization is on the Business paid plan, you can downgrade to the Team paid plan at any time. Notes: Only organization members with the owner or billing manager role can access or change billing settings for your organization. When you downgrade your billing plan, changes are applied at the end of your current billing cycle. On your next billing date, you will lose access to all of the Business plan's features, including user management with SAML SSO, 24/5 support, and the Business plan's uptime service level agreement. In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click Settings. In your organization's Settings sidebar, click Billing. Under "Downgrade your plan," select Downgrade options, then click Downgrade to the Team plan. Read the information about the features your organization will no longer have access to on your next billing date, then click I understand, downgrade my plan. Further reading "How does upgrading or downgrading affect the billing process?" "Downgrading your organization to free" "Removing a payment method associated with your organization" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Managing your organization's apps - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Managing your organization's apps Managing your organization's apps mac windows linux all You can upgrade, downgrade, or cancel your organization's GitHub Marketplace apps at any time. Upgrading an app for your organization You can upgrade your organization's GitHub Marketplace app to a different plan at any time. Downgrading an app for your organization If you'd like to use a different billing plan, you can downgrade your organization's GitHub Marketplace app at any time. Canceling an app for your organization You can cancel and remove a GitHub Marketplace app from your organization at any time. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Upgrading an app for your organization - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Upgrading an app for your organization Upgrading an app for your organization mac windows linux all You can upgrade your organization's GitHub Marketplace app to a different plan at any time. When you upgrade an app, your payment method is charged a prorated amount based on the time remaining until your next billing date. For more information, see "About billing for GitHub Marketplace." Tip: Only owners can purchase, install, or cancel apps and manage app billing for an organization. In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click Settings. In your organization's Settings sidebar, click Billing. In the "Marketplace Purchases" section, next to the app you'd like to upgrade, click Edit. Under "Edit your plan," use the drop-down menu, and click on a new plan. If you chose a unit plan, type a new quantity. Review the information about your new plan and billing information, then click Issue plan changes. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Downgrading an app for your organization - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Downgrading an app for your organization Downgrading an app for your organization mac windows linux all If you'd like to use a different billing plan, you can downgrade your organization's GitHub Marketplace app at any time. When you downgrade an app, your subscription remains active until the end of your current billing cycle. The downgrade takes effect on your next billing date. For more information, see "About billing for GitHub Marketplace." Canceling an app or downgrading an app to free does not affect your other paid subcriptions on GitHub. If you want to cease all of your paid subscriptions on GitHub, you must downgrade each paid subscription separately. Tip: Only owners can purchase, install, or cancel apps and manage app billing for an organization. In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click Settings. In your organization's Settings sidebar, click Billing. In the "Marketplace Purchases" section, next to the app you'd like to downgrade, click Edit. Under "Edit your plan," use the drop-down menu, and click on a new plan. If you chose a unit plan, type a new quantity. Review the information about your new plan and billing information, then click Issue plan changes. Further reading "Canceling an app for your organization" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Canceling an app for your organization - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Canceling an app for your organization Canceling an app for your organization mac windows linux all You can cancel and remove a GitHub Marketplace app from your organization at any time. When you cancel an app, your subscription remains active until the end of your current billing cycle. The cancellation takes effect on your next billing date. For more information, see "About billing for GitHub Marketplace." When you cancel a free trial on a paid plan, your subscription is immediately canceled and you will lose access to the app. If you don't cancel your free trial within the trial period, the payment method on file for your account will be charged for the plan you chose at the end of the trial period. For more information, see "About billing for GitHub Marketplace." Canceling an app or downgrading an app to free does not affect your other paid subcriptions on GitHub. If you want to cease all of your paid subscriptions on GitHub, you must downgrade each paid subscription separately. Tip: Only owners can purchase, install, or cancel apps and manage app billing for an organization. Canceling an app for your organization In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click Settings. In your organization's Settings sidebar, click Billing. In the "Marketplace Purchases" section, next to the app you'd like to cancel, click Cancel. In the dialog box, click OK. Canceling a free trial for an app for your organization In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click Settings. In your organization's Settings sidebar, click Billing. In the "Marketplace Purchases" section, next to the free trial you'd like to cancel, click Cancel. In the dialog box, click OK. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Managing large file storage and bandwidth for your organization - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Managing large file storage and bandwidth for your organization Managing large file storage and bandwidth for your organization mac windows linux all You can upgrade and downgrade Git Large File Storage for your organization. Purchasing additional storage and bandwidth for an organization Purchasing additional data packs increases your monthly bandwidth quota and total storage capacity for your organization. For more information on Git LFS, see "Versioning large files." Downgrading storage and bandwidth for an organization You can downgrade your organization's storage and bandwidth for Git LFS by increments of 50 GB per month in bandwidth and storage. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Purchasing additional storage and bandwidth for an organization - User Documentation <meta name="Description" content="Purchasing additional data packs increases your monthly bandwidth quota and total storage capacity for your organization. For more information on Git LFS, see "[Versioning large files](/articles/versioning-large-files)." …"> GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Purchasing additional storage and bandwidth for an organization Purchasing additional storage and bandwidth for an organization mac windows linux all Purchasing additional data packs increases your monthly bandwidth quota and total storage capacity for your organization. For more information on Git LFS, see "Versioning large files." Note: Only organization members with the owner or billing manager role can access or change billing settings for your organization. In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click Settings. In your organization's Settings sidebar, click Billing. In the "Git LFS Data" section, click Purchase more. Enter the number of data packs you want to add to your account. Each pack costs $5 per month, and provides 50 GB of bandwidth and 50 GB for storage. To confirm your new monthly data pack quantity, click Purchase. Further reading "About storage and bandwidth usage" "Viewing storage and bandwidth usage for an organization" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Downgrading storage and bandwidth for an organization - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Downgrading storage and bandwidth for an organization Downgrading storage and bandwidth for an organization mac windows linux all You can downgrade your organization's storage and bandwidth for Git LFS by increments of 50 GB per month in bandwidth and storage. When you downgrade your number of data packs, your change takes effect on your next billing date. For more information, see "About storage and bandwidth usage." Only organization members with the owner or billing manager role can access or change billing settings for your organization. In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click Settings. In your organization's Settings sidebar, click Billing. Next to "Git LFS Data", click Downgrade. Under "Downgrade data pack", select the number of data packs you'd like to downgrade to. To finish downgrading, click Downgrade data plan. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Setting up and paying for organizations for procurement companies - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Setting up and paying for organizations for procurement companies Setting up and paying for organizations for procurement companies mac windows linux all If you pay for GitHub on behalf of a client, you can configure their organization and payment settings to optimize convenience and security. About organizations for procurement companies Businesses use organizations to collaborate on shared projects with multiple owners and administrators. You can create an organization for your client, make a payment on their behalf, then pass ownership of the organization to your client. Creating and paying for an organization on behalf of a client You can create and pay for a GitHub organization on behalf of a client. Upgrading or downgrading your client's paid organization Billing managers can upgrade or downgrade a client's paid organization at any time. Renewing your client's paid organization If your client's organization has a valid payment method on file, their yearly paid plan will automatically renew. Billing managers can view and update the organization's payment method and plan. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support About organizations for procurement companies - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / About organizations for procurement companies About organizations for procurement companies mac windows linux all Businesses use organizations to collaborate on shared projects with multiple owners and administrators. You can create an organization for your client, make a payment on their behalf, then pass ownership of the organization to your client. To access an organization, each member must sign into their own personal user account. Organization members can have different roles, such as owner or billing manager: Owners have complete administrative access to an organization and its contents. Billing managers can manage billing settings, and cannot access organization contents. Billing managers are not shown in the list of organization members. Payments and pricing for organizations We don't provide quotes for organization pricing. You can see our published pricing for organizations and Git Large File Storage. We do not provide discounts for procurement companies or for renewal orders. We accept payment in US dollars, although end users may be located anywhere in the world. We accept payment by credit card and PayPal. We don't accept payment by purchase order or invoice. For easier and more efficient purchasing, we recommend that procurement companies set up yearly billing for their clients' organizations. Further reading "Creating and paying for an organization on behalf of a client" "Upgrading or downgrading your client's paid organization" "Renewing your client's paid organization" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Creating and paying for an organization on behalf of a client - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Creating and paying for an organization on behalf of a client Creating and paying for an organization on behalf of a client mac windows linux all You can create and pay for a GitHub organization on behalf of a client. In this article: Requirements Step 1: Create your personal GitHub account Step 2: Create the organization Step 3: Upgrade the organization to a yearly paid plan Step 4: Upgrade the number of paid seats in the organization Step 5: Invite your client to join the organization Step 6: Transfer organization ownership to your client Next steps Requirements Before you start, make sure you know: The GitHub username of the client who will become the owner of the organization you create The name your client would like to use for the organization The email address where you would like receipts to be sent The billing plan your client would like to purchase The number of paid seats your client would like you to purchase for the organization Step 1: Create your personal GitHub account You will use your personal account to set up the organization. You'll also need to sign in to this account to renew or make changes your client's plan in the future. If you already have a personal GitHub user account, skip to step 2. Go to the Join GitHub page. Under "Create your personal account," type your username, email address, and password, then click Create an account. Select the Free plan for your personal account. Click Finish sign up. Step 2: Create the organization In the upper-right corner of any page, click your profile photo, then click Settings. In your user settings sidebar, click Organizations. In the "Organizations" section, click New organization. Under "Organization name", type a name for your organization. Under "Billing email", type the email where receipts for your organization's paid plan should be sent. Optionally, if your organization account is owned by a business, select This account is owned by a business, then type your company's name. Under "Choose your plan", select Free (you will upgrade the organization in the next step). Read the information about GitHub's Terms of Service and Privacy Policy, then click Create organization. On the next page, click Finish. Step 3: Upgrade the organization to a yearly paid plan In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click Settings. In your organization's Settings sidebar, click Billing. Under "Billing overview", click Upgrade. If you're upgrading from the free plan, under "Plan setup and duration", select a billing plan. (You can add more seats to the organization in the next step.) Optionally, if your organization account is owned by a business, select This account is owned by a business, then type your company's name. Under "How shall we bill you?", select the yearly amount to pay for the organization yearly. Under "Pay with," type your credit card information. Review the information about the charge and your billing date, then click Upgrade your plan to finish upgrading your account. Step 4: Upgrade the number of paid seats in the organization If your client wants to use more than five paid seats, you can upgrade the organization's paid seats right away. In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click Settings. In your organization's Settings sidebar, click Billing. Under "Billing overview", click Add seats. Under "Add seats", type the number of seats you'd like to add. Click Add seats. Step 5: Invite your client to join the organization In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click People. On the People tab, click Invite member. Type your client's GitHub username and press Enter. Choose the owner role for your client, then click Send invitation. Your client will receive an email inviting them to the organization. They will need to accept the invitation before you can move on to the next step. Step 6: Transfer organization ownership to your client In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click People. Confirm that your client is listed among the members of the organization and is assigned the owner role. To the right of your username, use the drop-down menu, and click Manage. On the left, click Remove from organization. Confirm your choice and click Remove members. Next steps Contact your client and ask them to add you to the organization as a billing manager. You'll need to be a billing manager for the organization so that you can renew or make changes to your client's paid plan in the future. If you would like your organization's credit card to be removed from the organization so that it's not charged again, contact GitHub Support. When it's time to renew your client's paid plan, see "Renewing your client's paid organization." Further reading "About organizations for procurement companies" "Upgrading or downgrading your client's paid organization" "Renewing your client's paid organization" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Upgrading or downgrading your client's paid organization - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Upgrading or downgrading your client's paid organization Upgrading or downgrading your client's paid organization mac windows linux all Billing managers can upgrade or downgrade a client's paid organization at any time. If you're not a billing manger for the organization, ask your client to have an owner of the organization add you to the organization as a billing manager. Tips: Before you upgrade your client's organization, you can view or update the payment method on file for the organization. These instructions are for upgrading and downgrading organizations on the per-seat plan. If your client pays for GitHub using a per-repository plan, you can upgrade or downgrade their plan, or switch their organization to per-seat pricing. Upgrading an organization's number of paid seats In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click Settings. In your organization's Settings sidebar, click Billing. Under "Billing overview", click Add seats. Under "Add seats", type the number of seats you'd like to add. Click Add seats. After you add seats, the payment method on file for the organization will be charged a pro-rated amount based on the number of seats you're adding and the amount of time left in your billing cycle. Downgrading an organization's number of paid seats to free In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click Settings. In your organization's Settings sidebar, click Billing. Under "Downgrade your plan," select Downgrade options, then click Downgrade to the Free plan. Read the information about what happens when you cancel a paid plan, then click I understand, downgrade my plan. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Renewing your client's paid organization - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Setting up and managing organizations and teams / Renewing your client's paid organization Renewing your client's paid organization mac windows linux all If your client's organization has a valid payment method on file, their yearly paid plan will automatically renew. Billing managers can view and update the organization's payment method and plan. If you're not a billing manger for the organization, ask your client to have an owner of the organization add you to the organization as a billing manager. Tip: Billing managers can also change the organization's number of paid seats anytime. Updating your organization's credit card In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click Settings. In your organization's Settings sidebar, click Billing. Click Update payment method. Type your new credit card information in the secure form. Click Update credit card or Save credit card. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Creating a repository on GitHub - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Creating, cloning, and archiving repositories / Creating a repository on GitHub Creating a repository on GitHub mac windows linux all After you create your repository on GitHub, you can customize its settings and content. About repositories A repository is like a folder for your project. Your project's repository contains all of your project's files and stores each file's revision history. Creating a new repository You can create a new repository on your personal account or any organization where you have sufficient permissions. About READMEs You can add a README file to your repository to tell other people why your project is useful, what they can do with your project, and how they can use it. About CODEOWNERS You can use a CODEOWNERS file to define individuals or teams that are responsible for code in a repository. About repository languages The files and directories within a repository determine the languages that make up the repository. You can view a repository's languages to get a quick overview of the repository. Licensing a repository Public repositories on GitHub are often used to share open source software. For your repository to truly be open source, you'll need to license it so that others are free to use, change, and distribute the software. Creating an issues-only repository GitHub does not provide issues-only access permissions, but you can accomplish this using a second repository which contains only the issues. Limits for viewing content and diffs in a repository Certain types of resources can be quite large, requiring excessive processing on GitHub. Because of this, limits are set to ensure requests complete in a reasonable amount of time. Duplicating a repository To duplicate a repository without forking it, you can run a special clone command, then mirror-push to the new repository. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support About repositories - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Creating, cloning, and archiving repositories / About repositories About repositories mac windows linux all A repository is like a folder for your project. Your project's repository contains all of your project's files and stores each file's revision history. You can own a repository individually, and give other people collaborator access to your repository so that they can collaborate on your project. You can also share ownership of a repository with other people in an organization, and give organization members access permissions to collaborate on your repository. Repositories can be public or private. Public repositories are visible to everyone. Only the owner and collaborators can view or contribute to a private repository. Each person and organization can own unlimited public repositories and invite an unlimited number of collaborators to the repository. You can collaborate on your project with others using your repository's issues, pull requests, and project boards. Further reading "Collaborating with issues and pull requests" "Administering a repository" "Visualizing repository data with graphs" "About GitHub Wikis" "GitHub Glossary" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Creating a new repository - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Creating, cloning, and archiving repositories / Creating a new repository Creating a new repository mac windows linux all You can create a new repository on your personal account or any organization where you have sufficient permissions. Tip: By default, all organization members can create repositories for the organization. If you choose, you can restrict repository creation permissions to organization owners only. For more information, see "Repository permission levels for an organization." In the upper-right corner of any page, click , and then click New repository. In the Owner drop-down, select the account you wish to create the repository on. Type a name for your repository, and an optional description. You can choose to make the repository either public or private. Public repositories are visible to the public, while private repositories are only accessible to you, and people you share them with. Your account must be on a paid plan to create a private repository. There are a number of optional items you can pre-populate your repository with. If you're importing an existing repository to GitHub, don't choose any of these options, as you may introduce a merge conflict. You can choose to add these files using the command line later. You can create a README, which is a document describing your project. You can create a CODEOWNERS file, which describes which individuals or teams own certain files in the repository. You can create a .gitignore file, which is a set of ignore rules. You can choose to add a software license for your project. When you're finished, click Create repository. At the bottom of the resulting Quick Setup page, under "Import code from an old repository", you can choose to import a project to your new repository. To do so, click Import code. Further reading "Adding a file to a repository using the command line" "Adding organization members to a team" Open Source Guides Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support About READMEs - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Creating, cloning, and archiving repositories / About READMEs About READMEs mac windows linux all You can add a README file to your repository to tell other people why your project is useful, what they can do with your project, and how they can use it. A README file, along with a repository license, contribution guidelines, and a code of conduct, helps you communicate expectations for and manage contributions to your project. A README is often the first item a visitor will see when visiting your repository. README files typically include information on: What the project does Why the project is useful How users can get started with the project Where users can get help with your project Who maintains and contributes to the project If you put your README file in your repository's root, docs, or hidden .github directory, GitHub will recognize and automatically surface your README to repository visitors. Section links in README files and blob pages Many projects use a table of contents at the start of a README to direct users to different sections of the file. You can link directly to a section in a rendered file by hovering over the section heading to expose the link: Relative links and image paths in README files You can define relative links and image paths in your rendered files to help readers navigate to other files in your repository. A relative link is a link that is relative to the current file. For example, if you have a README file in root of your repository, and you have another file in docs/CONTRIBUTING.md, the relative link to CONTRIBUTING.md in your README might look like this: [Contribution guidelines for this project](docs/CONTRIBUTING.md) GitHub will automatically transform your relative link or image path based on whatever branch you're currently on, so that the link or path always works. You can use all relative link operands, such as ./ and ../. Relative links are easier for users who clone your repository. Absolute links may not work in clones of your repository - we recommend using relative links to refer to other files within your repository. Further reading "Adding a file to a repository" 18F's "Making READMEs readable" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support About CODEOWNERS - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Creating, cloning, and archiving repositories / About CODEOWNERS About CODEOWNERS mac windows linux all You can use a CODEOWNERS file to define individuals or teams that are responsible for code in a repository. People with admin or owner permissions can set up a CODEOWNERS file in a repository. The people you choose as code owners must have write permissions for the repository. Code owners are automatically requested for review when someone opens a pull request that modifies code that they own. When someone with admin or owner permissions has enabled required reviews, they also can optionally require approval from a code owner before the author can merge a pull request in the repository. CODEOWNERS file location To use a CODEOWNERS file, create a new file called CODEOWNERS in the root, docs/, or .github/ directory of the repository, in the branch where you'd like to add the code owners. Each CODEOWNERS file assigns the code owners for a single branch in the repository. Thus, you can assign different code owners for different branches, such as @octo-org/codeowners-team for a code base on the master branch and @octocat for a GitHub Pages site on the gh-pages branch. For code owners to receive review requests, the CODEOWNERS file must be on the base branch of the pull request. For example, if you assign @octocat as the code owner for .js files on the gh-pages branch of your repository, @octocat will receive review requests when a pull request with changes to .js files is opened between the head branch and gh-pages. CODEOWNERS syntax A CODEOWNERS file uses a pattern that follows the same rules used in gitignore files. The pattern is followed by one or more GitHub usernames or team names using the standard @username or @org/team-name format. You can also refer to a user by an email address that has been added to their GitHub account, for example user@example.com. CODEOWNERS file example: # This is a comment. # Each line is a file pattern followed by one or more owners. # These owners will be the default owners for everything in # the repo. Unless a later match takes precedence, # @global-owner1 and @global-owner2 will be requested for # review when someone opens a pull request. * @global-owner1 @global-owner2 # Order is important; the last matching pattern takes the most # precedence. When someone opens a pull request that only # modifies JS files, only @js-owner and not the global # owner(s) will be requested for a review. *.js @js-owner # You can also use email addresses if you prefer. They'll be # used to look up users just like we do for commit author # emails. *.go docs@example.com # In this example, @doctocat owns any files in the build/logs # directory at the root of the repository and any of its # subdirectories. /build/logs/ @doctocat # The `docs/*` pattern will match files like # `docs/getting-started.md` but not further nested files like # `docs/build-app/troubleshooting.md`. docs/* docs@example.com # In this example, @octocat owns any file in an apps directory # anywhere in your repository. apps/ @octocat # In this example, @doctocat owns any file in the `/docs` # directory in the root of your repository. /docs/ @doctocat Further reading "Creating new files" "Inviting collaborators to a personal repository" "Managing an individual's access to an organization repository" "Managing team access to an organization repository" "Viewing a pull request review" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support About repository languages - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Creating, cloning, and archiving repositories / About repository languages About repository languages mac windows linux all The files and directories within a repository determine the languages that make up the repository. You can view a repository's languages to get a quick overview of the repository. GitHub uses the open source Linguist library to determine file languages for syntax highlighting and repository statistics. Language statistics will update after you push changes to your default branch (which is usually master). Some files are hard to identify, and sometimes projects contain more library and vendor files than their primary code. If you're receiving incorrect results, please consult the Linguist troubleshooting guide for help. Markup languages Markup languages are rendered to HTML and displayed inline using our open-source Markup library. At this time, we are not accepting new markup languages to show within GitHub. However, we do actively maintain our current markup languages. If you see a problem, please create an issue. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Licensing a repository - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Creating, cloning, and archiving repositories / Licensing a repository Licensing a repository mac windows linux all Public repositories on GitHub are often used to share open source software. For your repository to truly be open source, you'll need to license it so that others are free to use, change, and distribute the software. Choosing the right license We created choosealicense.com, to help you understand how to license your code. A software license tells others what they can and can't do with your source code, so it's important to make an informed decision. You're under no obligation to choose a license. However, without a license, the default copyright laws apply, meaning that you retain all rights to your source code and no one may reproduce, distribute, or create derivative works from your work. If you're creating an open source project, we strongly encourage you to include an open source license. The Open Source Guide provides additional guidance on choosing the correct license for your project. Note: If you publish your source code in a public repository on GitHub, according to the Terms of Service, other GitHub users have the right to view and fork your repository within the GitHub site. If you have already created a public repository and no longer want users to have access to it, you can make your repository private. When you convert a public repository to a private repository, existing forks or local copies created by other users will still exist. For more information, see "Making a public repository private." Determining the location of your license Most people place their license text in a file named LICENSE.txt (or LICENSE.md) in the root of the repository; here's an example from Hubot. Some projects include information about their license in their README. For example, a project's README may include a note saying "This project is licensed under the terms of the MIT license." As a best practice, we encourage you to include the license file with your project. Searching GitHub by license type You can filter repositories based on their license or license family using the license qualifier and the exact license keyword: License License keyword Academic Free License v3.0 afl-3.0 Apache license 2.0 apache-2.0 Artistic license 2.0 artistic-2.0 Boost Software License 1.0 bs1-1.0 BSD 2-clause "Simplified" license bsd-2-clause BSD 3-clause "New" or "Revised" license bsd-3-clause BSD 3-clause Clear license bsd-3-clause-clear Creative Commons license family cc Creative Commons Zero v1.0 Universal cc0-1.0 Creative Commons Attribution 4.0 cc-by-4.0 Creative Commons Attribution Share Alike 4.0 cc-by-sa-4.0 Do What The F*ck You Want To Public License wtfpl Educational Community License v2.0 ecl-2.0 Eclipse Public License 1.0 epl-1.0 European Union Public License 1.1 eupl-1.1 GNU Affero General Public License v3.0 agpl-3.0 GNU General Public License family gpl GNU General Public License v2.0 gpl-2.0 GNU General Public License v3.0 gpl-3.0 GNU Lesser General Public License family lgpl GNU Lesser General Public License v2.1 lgpl-2.1 GNU Lesser General Public License v3.0 lgpl-3.0 ISC isc LaTex Project Public License v1.3c lppl-1.3c Microsoft Public License ms-pl MIT mit Mozilla Public License 2.0 mpl-2.0 Open Software License 3.0 osl-3.0 PostgreSQL License postgresql SIL Open Font License 1.1 ofl-1.1 University of Illinois/NCSA Open Source License ncsa The Unlicense unlicense zLib License zlib When you search by a family license, your results will include all licenses in that family. For example, when you use the query license:gpl, your results will include repositories licensed under GNU General Public License v2.0 and GNU General Public License v3.0. For more information, see "Searching repositories." Detecting a license The open source Ruby gem Licensee compares the repository's LICENSE file to a short list of known licenses. Licensee also provides the Licenses API and gives us insight into how repositories on GitHub are licensed. If your repository is using a license that isn't listed on the Choose a License website, you can request including the license. If your repository is using a license that is listed on the Choose a License website and it's not displaying clearly at the top of the repository page, it may contain multiple licenses or other complexity. To have your license detected, simplify your LICENSE file and note the complexity somewhere else, such as your repository's README file. Applying a license to a repository with an existing license The license picker is only available when you create a new project on GitHub. You can manually add a license using the browser. For more information on adding a license to a repository, see "Adding a license to a repository." Disclaimer The goal of GitHub's open source licensing efforts is to provide a starting point to help you make an informed choice. GitHub displays license information to help users get information about open source licenses and the projects that use them. We hope it helps, but please keep in mind that we’re not lawyers and that we make mistakes like everyone else. For that reason, GitHub provides the information on an “as-is” basis and makes no warranties regarding any information or licenses provided on or through it, and disclaims liability for damages resulting from using the license information. If you have any questions regarding the right license for your code or any other legal issues relating to it, it’s always best to consult with a professional. Further reading The Open Source Guides' section "The Legal Side of Open Source" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Creating an issues-only repository - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Creating, cloning, and archiving repositories / Creating an issues-only repository Creating an issues-only repository mac windows linux all GitHub does not provide issues-only access permissions, but you can accomplish this using a second repository which contains only the issues. Create a private repository to host the source code from your project. Create a second repository with the permissions you desire to host the issue tracker. Add a README file to the issues repository explaining the purpose of this repository and linking to the issues section. Set your collaborators or teams to give access to the repositories as you desire. Users with write access to both can reference and close issues back and forth across the repositories, but those without the required permissions will see references that contain a minimum of information. For example, if you pushed a commit to the private repository's default branch with a message that read Fixes organization/public-repo#12, the issue would be closed, but only users with the proper permissions would see the cross-repository reference indicating the commit that closed the issue. Without the permissions, a reference still appears, but the details are omitted. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Limits for viewing content and diffs in a repository - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Creating, cloning, and archiving repositories / Limits for viewing content and diffs in a repository Limits for viewing content and diffs in a repository mac windows linux all Certain types of resources can be quite large, requiring excessive processing on GitHub. Because of this, limits are set to ensure requests complete in a reasonable amount of time. Most of the limits below affect both GitHub and the API. Text limits Text files over 1 MB are always displayed as plain text. Code is not syntax highlighted, and prose files are not converted to HTML (such as Markdown, AsciiDoc, etc.). Text files over 5 MB are only available through their raw URLs, which are served through raw.githubusercontent.com; for example, https://raw.githubusercontent.com/octocat/Spoon-Knife/master/index.html. Click the Raw button to get the raw URL for a file. Diff limits Because diffs can become very large, we impose these limits on diffs for commits, pull requests, and compare views: No single file's diff may exceed 20,000 lines that you can load or 1 MB of raw diff data. Four hundred lines and 20 KB are automatically loaded for a single file. The maximum number of files in a single diff is limited to 3,000. The maximum number of renderable files (such as images, PDFs, and GeoJSON files) in a single diff is limited to 25. Some portions of a limited diff may be displayed, but anything exceeding the limit is not shown. Commit listings limits The compare view and pull requests pages display a list of commits between the base and head revisions. These lists are limited to 250 commits. If they exceed that limit, a note indicates that additional commits are present (but they're not shown). Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Duplicating a repository - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Creating, cloning, and archiving repositories / Duplicating a repository Duplicating a repository mac windows linux all To duplicate a repository without forking it, you can run a special clone command, then mirror-push to the new repository. Before you can duplicate a repository and push to your new copy, or mirror, of the repository, you must create the new repository on GitHub. In these examples, exampleuser/new-repository or exampleuser/mirrored are the mirrors. Mirroring a repository Open TerminalTerminalGit Bash. Create a bare clone of the repository. git clone --bare https://github.com/exampleuser/old-repository.git Mirror-push to the new repository. cd old-repository.git git push --mirror https://github.com/exampleuser/new-repository.git Remove the temporary local repository you created in step 1. cd .. rm -rf old-repository.git Mirroring a repository that contains Git Large File Storage objects Open TerminalTerminalGit Bash. Create a bare clone of the repository. Replace the example username with the name of the person or organization who owns the repository, and replace the example repository name with the name of the repository you'd like to duplicate. git clone --bare https://github.com/exampleuser/old-repository.git Navigate to the repository you just cloned. cd old-repository.git Pull in the repository's Git Large File Storage objects. git lfs fetch --all Mirror-push to the new repository. git push --mirror https://github.com/exampleuser/new-repository.git Push the repository's Git Large File Storage objects to your mirror. git lfs push --all https://github.com/exampleuser/new-repository.git Remove the temporary local repository you created in step 1. cd .. rm -rf old-repository.git Mirroring a repository in another location If you want to mirror a repository in another location, including getting updates from the original, you can clone a mirror and periodically push the changes. Open TerminalTerminalGit Bash. Create a bare mirrored clone of the repository. git clone --mirror https://github.com/exampleuser/repository-to-mirror.git Set the push location to your mirror. cd repository-to-mirror.git git remote set-url --push origin https://github.com/exampleuser/mirrored As with a bare clone, a mirrored clone includes all remote branches and tags, but all local references will be overwritten each time you fetch, so it will always be the same as the original repository. Setting the URL for pushes simplifies pushing to your mirror. To update your mirror, fetch updates and push. git fetch -p origin git push --mirror Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Cloning a repository from GitHub - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Creating, cloning, and archiving repositories / Cloning a repository from GitHub Cloning a repository from GitHub mac windows linux all You can clone a remote repository to your local machine. If you run into errors, there are some common troubleshooting solutions. Cloning a repository When you create a repository on GitHub, it exists as a remote repository. You can clone your repository to create a local copy on your computer and sync between the two locations. HTTPs cloning errors There are a few common errors when using HTTPS with Git. These errors usually indicate you have an old version of Git, or you don't have access to the repository. Error: repository not found If you see this error when cloning a repository, it means that the repository does not exist or you do not have permission to access it. There are a few solutions to this error, depending on the cause. Error: remote HEAD refers to nonexistent ref, unable to checkout This error occurs if the default branch of a repository has been deleted on GitHub. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Cloning a repository - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Creating, cloning, and archiving repositories / Cloning a repository Cloning a repository mac windows linux all When you create a repository on GitHub, it exists as a remote repository. You can clone your repository to create a local copy on your computer and sync between the two locations. This procedure assumes you have already created a repository on GitHub, or have an existing repository owned by someone else you'd like to contribute to. On GitHub, navigate to the main page of the repository. Under the repository name, click Clone or download. In the Clone with HTTPs section, click to copy the clone URL for the repository. Open TerminalTerminalGit Bash. Change the current working directory to the location where you want the cloned directory to be made. Type git clone, and then paste the URL you copied in Step 2. git clone https://github.com/YOUR-USERNAME/YOUR-REPOSITORY Press Enter. Your local clone will be created. git clone https://github.com/YOUR-USERNAME/YOUR-REPOSITORY Cloning into `Spoon-Knife`... remote: Counting objects: 10, done. remote: Compressing objects: 100% (8/8), done. remove: Total 10 (delta 1), reused 10 (delta 1) Unpacking objects: 100% (10/10), done. Cloning a repository to GitHub Desktop On GitHub, navigate to the main page of the repository. Under your repository name, click to clone your repository in Desktop. Follow the prompts in GitHub Desktop to complete the clone. For more information, see "Cloning a repository from GitHub to GitHub Desktop." Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support HTTPS cloning errors - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Creating, cloning, and archiving repositories / HTTPS cloning errors HTTPS cloning errors mac windows linux all There are a few common errors when using HTTPS with Git. These errors usually indicate you have an old version of Git, or you don't have access to the repository. Here's an example of an HTTPS error you might receive: error: The requested URL returned error: 401 while accessing https://github.com/user/repo.git/info/refs?service=git-receive-pack fatal: HTTP request failed Error: The requested URL returned error: 403 while accessing https://github.com/user/repo.git/info/refs fatal: HTTP request failed Error: https://github.com/user/repo.git/info/refs not found: did you run git update-server-info on the server? Check your Git version There's no minimum Git version necessary to interact with GitHub, but we've found version 1.7.10 to be a comfortable stable version that's available on many platforms. You can always download the latest version on the Git website. Ensure the remote is correct The repository you're trying to fetch must exist on GitHub, and the URL is case-sensitive. You can find the URL of the local repository by opening the command line and typing git remote -v: git remote -v # View existing remotes origin https://github.com/github/reactivecocoa.git (fetch) origin https://github.com/github/reactivecocoa.git (push) git remote set-url origin https://github.com/github/ReactiveCocoa.git # Change the 'origin' remote's URL git remote -v # Verify new remote URL origin https://github.com/github/ReactiveCocoa.git (fetch) origin https://github.com/github/ReactiveCocoa.git (push) Alternatively, you can change the URL through our GitHub Desktop application. Provide an access token If you have enabled two-factor authentication, or if you are accessing an organization that uses SAML single sign-on, you must provide a personal access token instead of entering your password for HTTPS Git. Check your permissions When prompted for a username and password, make sure you use an account that has access to the repository. Tip: If you don't want to enter your username and password every time you interact with the remote repository, you can turn on password caching. Use SSH instead If you've previously set up SSH keys, you can use the SSH clone URL instead of HTTPS. For more information, see "Which remote URL should I use?" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Error: Repository not found - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Creating, cloning, and archiving repositories / Error: Repository not found Error: Repository not found mac windows linux all If you see this error when cloning a repository, it means that the repository does not exist or you do not have permission to access it. There are a few solutions to this error, depending on the cause. Check your spelling Typos happen, and repository names are case-sensitive. If you try to clone git@github.com:user/repo.git, but the repository is really named User/Repo you will receive this error. To avoid this error, when cloning, always copy and paste the clone URL from the repository's page. For more information, see "Cloning a repository." To update the remote on an existing repository, see "Changing a remote's URL". Checking your permissions If you are trying to clone a private repository but do not have permission to view the repository, you will receive this error. Make sure that you have access to the repository in one of these ways: The owner of the repository A collaborator on the repository A member of a team that has access to the repository (if the repository belongs to an organization) Check your SSH access In rare circumstances, you may not have the proper SSH access to a repository. You should ensure that the SSH key you are using is attached to your GitHub user account. You can check this by typing the following into the command line: ssh -T git@github.com Hi username! You've successfully authenticated, but GitHub does not provide shell access. For more information, see Adding a new SSH key to your GitHub account. Check that the repository really exists If all else fails, make sure that the repository really exists on GitHub! If you're trying to push to a repository that doesn't exist, you'll get this error. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Error: Remote HEAD refers to nonexistent ref, unable to checkout - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Creating, cloning, and archiving repositories / Error: Remote HEAD refers to nonexistent ref, unable to checkout Error: Remote HEAD refers to nonexistent ref, unable to checkout mac windows linux all This error occurs if the default branch of a repository has been deleted on GitHub. Detecting this error is simple; Git will warn you when you try to clone the repository: git clone https://github.com/user/repo.git # Clone a repo Cloning into 'repo'... remote: Counting objects: 66179, done. remote: Compressing objects: 100% (15587/15587), done. remote: Total 66179 (delta 46985), reused 65596 (delta 46402) Receiving objects: 100% (66179/66179), 51.66 MiB | 667 KiB/s, done. Resolving deltas: 100% (46985/46985), done. warning: remote HEAD refers to nonexistent ref, unable to checkout. To fix the error, you'll need to be an administrator of the repository on GitHub. You'll want to change the default branch of the repository. After that, you can get a list of all the available branches from the command line: git branch -a # Lists ALL the branches remotes/origin/awesome remotes/origin/more-work remotes/origin/new-master Then, you can just switch to your new branch: git checkout new-master # Create and checkout a tracking branch Branch new-master set up to track remote branch new-master from origin. Switched to a new branch 'new-master' Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Archiving a GitHub repository - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Creating, cloning, and archiving repositories / Archiving a GitHub repository Archiving a GitHub repository mac windows linux all You can archive, back up, and cite your work using GitHub, the API, or third-party tools and services. About archiving repositories When you archive a repository, you are letting people know that a project is no longer actively maintained. Archiving repositories You can archive a repository to make it read-only for all users and indicate that it's no longer actively maintained. You can also unarchive repositories that have been archived. About archiving content and data on GitHub You can archive content and data on GitHub for other people to view and reference. Referencing and citing content You can use third-party tools to cite and reference content on GitHub. Backing up a repository You can use a third-party tool to back up your repository, or you can use the API to download and back up your repository manually. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support About archiving repositories - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Creating, cloning, and archiving repositories / About archiving repositories About archiving repositories mac windows linux all When you archive a repository, you are letting people know that a project is no longer actively maintained. Note: If you have a legacy per-repository billing plan, you will still be charged for your archived repository. If you don't want to be charged for an archived repository, you must upgrade to a new billing plan. For more information, see "Organization billing plans." We recommend that you close all issues and pull requests, as well as update the README file and description, before you archive a repository. Once a repository is archived, you cannot add or remove collaborators or teams. Contributors with access to the repository can only fork or star your project. When a repository is archived, its issues, pull requests, code, labels, milestones, projects, wiki, releases, commits, tags, branches, reactions, and comments become read-only. To make changes in an archived repository, you must unarchive the repository first. You can search for archived repositories. For more information, see "Searching repositories." You can also search for issues and pull requests within archived repositories. For more information, see "Searching issues and pull requests." Further reading "Archiving repositories" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Archiving repositories - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Creating, cloning, and archiving repositories / Archiving repositories Archiving repositories mac windows linux all You can archive a repository to make it read-only for all users and indicate that it's no longer actively maintained. You can also unarchive repositories that have been archived. We recommend that you close all issues and pull requests, as well as update the README file and description, before you archive a repository. On GitHub, navigate to the main page of the repository. Under your repository name, click Settings. Under "Danger Zone", click Archive this repository or Unarchive this repository. Read the warnings. Type the name of the repository you want to archive or unarchive. Click I understand the consequences, archive this repository. Further reading "About archiving repositories" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support About archiving content and data on GitHub - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Creating, cloning, and archiving repositories / About archiving content and data on GitHub About archiving content and data on GitHub mac windows linux all You can archive content and data on GitHub for other people to view and reference. Persistence of public repositories GitHub intends to keep your public repositories available unless you remove them. In some cases, we may make public content unavailable, for example if: We receive a DMCA Takedown Notice for content in a repository. We determine that a repository's content violates our Community Guidelines or Terms of Service. Academics and researchers can reference this information in data management plans. Third-party archival projects Several third-party projects use the GitHub API to archive all public repositories on GitHub and make the data accessible to anyone: GHTorrent GitHub Archive Software Heritage Responsible use of archives includes respecting users' privacy. For more information, see "Public information on GitHub." Adding an open source license to increase archivability Libraries and researchers may require legal protections to create archives of publicly available content. If you want third parties to consider your work on GitHub for archiving, you can add an open source license to your projects. An open source license gives contributors explicit permissions to copy and distribute the material in your repositories. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Referencing and citing content - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Creating, cloning, and archiving repositories / Referencing and citing content Referencing and citing content mac windows linux all You can use third-party tools to cite and reference content on GitHub. Issuing a persistent identifier for your repository with Zenodo To make your repositories easier to reference in academic literature, you can create persistent identifiers, also known as Digital Object Identifiers (DOIs). You can use the data archiving tool Zenodo to archive a GitHub repository and issue a DOI for the archive. Tips: Zenodo can only access public repositories, so make sure the repository you want to archive is public. If you want to archive a repository that belongs to an organization, the organization owner may need to approve access for the Zenodo application. Make sure to include a license in your repository so readers know how they can reuse your work. Navigate to Zenodo. In the upper-left corner of the screen, click Log in. Click Log in with GitHub. Review the information about access permissions, then click Authorize application. Navigate to the Zenodo GitHub page. To the right of the name of the repository you want to archive, toggle the button from Off to On to enable it for archiving. Zenodo archives your repository and issues a new DOI each time you create a new GitHub release. Follow the steps at "Creating releases" to create a new one. Publicizing and citing research material with Figshare Academics can use the data management service Figshare to publicize and cite research material. For more information, see Figshare's support site. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Backing up a repository - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Creating, cloning, and archiving repositories / Backing up a repository Backing up a repository mac windows linux all You can use a third-party tool to back up your repository, or you can use the API to download and back up your repository manually. Third-party backup tools A number of self-service tools exist that automate backups of repositories. Unlike archival projects, which archive all public repositories on GitHub and make the data accessible to anyone, backup tools will download data from specific repositories and organize it within a new branch or directory. You can back up all of a repository's Git data (such as project files and commit history), as well as much data from GitHub (such as issues and pull requests), with: github-backup, which backs up any public repository, or all repositories owned by a particular user. GitHub Records Archiver, which backs up all of an organization's public repositories. For information about backups that GitHub makes for security purposes, see "File system and backups." Downloading content manually If you don't want to use a third-party tool, you can download and back up your repositories manually: To download a repository's Git data to your local machine, you'll need to clone the repository. For more information, see "Cloning a repository." You can also download your repository's wiki. For more information, see "Cloning wikis locally to your computer." When you clone a repository or wiki, only Git data, such as project files and commit history, is downloaded. You can use our API to export other elements of your GitHub repository to your local machine: Issues Pull requests Forks Comments Milestones Labels Watchers Stargazers Projects Creating backups of downloaded content Once you have a local version of all the content you want to back up, you can create a zip archive and copy it to an external hard drive and/or upload it to a cloud-based backup service such as Google Drive or DropBox. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Managing files on GitHub - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing files in a repository / Managing files on GitHub Managing files on GitHub mac windows linux all On GitHub, you can create, edit, move, and delete files in a repository. Creating new files You can create new files directly on GitHub in any repository you have write access to. Adding a file to a repository You can upload and commit an existing file to a GitHub repository. Drag and drop a file to any directory in the file tree, or upload files from the repository's main page. Renaming a file You can rename any file in your repositories directly in GitHub. Renaming a file also gives you the opportunity to move the file to a new location. Moving a file to a new location When editing a file, you can choose to move it anywhere within your repository, even if the directory doesn't exist. Editing files in your repository You can edit files directly on GitHub in any of your repositories using the file editor. Editing files in another user's repository When you edit a file in another user's repository, we'll automatically fork the repository and open a pull request for you. Tracing changes in a file Using the blame view you can trace changes to lines in a file and discover how parts of the file evolved over time. Deleting files You can delete any file within your repositories on GitHub. Getting permanent links to files When viewing a file on GitHub, you can press the "y" key to update the URL to a permalink to the exact version of the file you see. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Creating new files - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing files in a repository / Creating new files Creating new files mac windows linux all You can create new files directly on GitHub in any repository you have write access to. When creating a file on GitHub, consider the following: If you try to create a new file in a repository that you don’t have access to, we will fork the project to your user account and help you send a pull request to the original repository after you commit your change. File names created via the web interface can only contain alphanumeric characters and hyphens (-). To use other characters, create and commit the files locally, then push them to the repository on GitHub. Warning: Never git add, commit, or push sensitive information to a remote repository. Sensitive information can include, but is not limited to: Passwords SSH keys AWS access keys API keys Credit card numbers PIN numbers For more information, see "Removing sensitive data from a repository." On GitHub, navigate to the main page of the repository. In your repository, browse to the folder where you want to create a file. Above the file list, click Create new file. In the file name field, type the name and extension for the file. To create subdirectories, type the / directory separator. On the Edit new file tab, add content to the file. To review the new content, click Preview. At the bottom of the page, type a short, meaningful commit message that describes the change you made to the file. Below the commit message fields, decide whether to add your commit to the current branch or to a new branch. If your current branch is master, you should choose to create a new branch for your commit and then create a pull request. Click Propose new file. Further reading "Adding a file to a repository" "Adding a file to a repository using the command line" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Adding a file to a repository - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing files in a repository / Adding a file to a repository Adding a file to a repository mac windows linux all You can upload and commit an existing file to a GitHub repository. Drag and drop a file to any directory in the file tree, or upload files from the repository's main page. Files that you add to a repository via a browser are limited to 25 MB per file. You can add larger files, up to 100 MB each, via the command line. For more information, see "Adding a file to a repository using the command line." Tips: You can upload multiple files to GitHub at the same time. If a repository has any protected branches, you can't edit or upload files in the protected branch using the web interface. On GitHub, navigate to the main page of the repository. Under your repository name, click Upload files. Drag and drop the file or folder you'd like to upload to your repository onto the file tree. At the bottom of the page, type a short, meaningful commit message that describes the change you made to the file. Below the commit message fields, decide whether to add your commit to the current branch or to a new branch. If your current branch is master, you should choose to create a new branch for your commit and then create a pull request. Click Commit changes. Further reading "Adding a file to a repository using the command line" "Creating new files" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Renaming a file - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing files in a repository / Renaming a file Renaming a file mac windows linux all You can rename any file in your repositories directly in GitHub. Renaming a file also gives you the opportunity to move the file to a new location. Tips: If you try to rename a file in a repository that you don’t have access to, we will fork the project to your user account and help you send a pull request to the original repository after you commit your change. File names created via the web interface can only contain alphanumeric characters and hyphens (-). To use other characters, create and commit the files locally and then push them to the repository. Some files, such as images, require that you rename them from the command line. For more information, see "Renaming a file using the command line." In your repository, browse to the file you want to rename. In the upper right corner of the file view, click to open the file editor. In the filename field, change the name of the file to the new filename you want. You can also update the contents of your file at the same time. At the bottom of the page, type a short, meaningful commit message that describes the change you made to the file. Below the commit message fields, decide whether to add your commit to the current branch or to a new branch. If your current branch is master, you should choose to create a new branch for your commit and then create a pull request. Click Propose file change. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Moving a file to a new location - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing files in a repository / Moving a file to a new location Moving a file to a new location mac windows linux all When editing a file, you can choose to move it anywhere within your repository, even if the directory doesn't exist. In addition to changing the file location, you can also update the contents of your file, or give it a new name in the same commit. Tips: If you try to move a file in a repository that you don’t have access to, we'll fork the project to your user account and help you send a pull request to the original repository after you commit your change. Some files, such as images, require that you move them from the command line. For more information, see "Moving a file to a new location using the command line". If a repository has any protected branches, you can't edit or upload files in the protected branch using the web interface. In your repository, browse to the file you want to move. In the upper right corner of the file view, click to open the file editor. In the filename field, change the name of the file using these guidelines: To move the file into a subfolder, type the name of the folder you want, followed by /. Your new folder name becomes a new item in the navigation breadcrumbs. To move the file into a directory above the file's current location, place your cursor at the beginning of the filename field, then either type ../ to jump up one full directory level, or type the backspace key to edit the parent folder's name. At the bottom of the page, type a short, meaningful commit message that describes the change you made to the file. Below the commit message fields, decide whether to add your commit to the current branch or to a new branch. If your current branch is master, you should choose to create a new branch for your commit and then create a pull request. Click Propose file change. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Editing files in your repository - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing files in a repository / Editing files in your repository Editing files in your repository mac windows linux all You can edit files directly on GitHub in any of your repositories using the file editor. Tip: If a repository has any protected branches, you can't edit or upload files in the protected branch using the web interface. Note: GitHub's file editor uses CodeMirror. In your repository, browse to the file you want to edit. In the upper right corner of the file view, click to open the file editor. On the Edit file tab , make any changes you need to the file. Above the new content, click Preview changes. At the bottom of the page, type a short, meaningful commit message that describes the change you made to the file. Below the commit message fields, decide whether to add your commit to the current branch or to a new branch. If your current branch is master, you should choose to create a new branch for your commit and then create a pull request. Click Propose file change. Further reading "Editing files in another user's repository" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Editing files in another user's repository - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing files in a repository / Editing files in another user's repository Editing files in another user's repository mac windows linux all When you edit a file in another user's repository, we'll automatically fork the repository and open a pull request for you. In another user's repository, browse to the folder that contains the file you want to edit. Click the name of the file you want to edit. Above the file content, click . At this point, GitHub forks the repository for you. Make any changes you need to the file. Above the new content, click Preview changes. At the bottom of the page, type a short, meaningful commit message that describes the change you made to the file. Click Propose file change. Type a title and description for your pull request. Click Create pull request. Further reading "Editing files in your repository" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Tracing changes in a file - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing files in a repository / Tracing changes in a file Tracing changes in a file mac windows linux all Using the blame view you can trace changes to lines in a file and discover how parts of the file evolved over time. You can view the line-by-line revision history for an entire file with the blame view, or view the revision history of a single line within a file by clicking . Each time you click , you'll see the previous revision information for that line, including who committed the change and when. Tip: You can also use git blame on the command line to view the revision history of lines within a file. For more information, see Git's git blame documentation. On GitHub, navigate to the main page of the repository. Click to open the file whose line history you want to view. In the upper-right corner of the file view, click Blame to open the blame view. To see earlier revisions of a specific line, or reblame, click until you've found the changes you're interested in viewing. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Deleting files - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing files in a repository / Deleting files Deleting files mac windows linux all You can delete any file within your repositories on GitHub. Tip: If you try to delete a file in a repository that you don’t have access to, we'll fork the project to your user account and help you send a pull request to the original repository after you commit your change. Browse to the file in your repository that you want to delete. At the top of the file, click . At the bottom of the page, type a short, meaningful commit message that describes the change you made to the file. Below the commit message fields, decide whether to add your commit to the current branch or to a new branch. If your current branch is master, you should choose to create a new branch for your commit and then create a pull request. Click Propose file change. Attention: Since Git is a version control system, it always has your back if you need to recover the file later. If you really, really need to completely remove a file from a repository for some reason, such as a sensitive file that was accidentally committed, you should follow the steps in our article about removing sensitive data. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Getting permanent links to files - User Documentation <meta name="Description" content="When viewing a file on GitHub, you can press the "y" key to update the URL to a permalink to the exact version of the file you see. …"> GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing files in a repository / Getting permanent links to files Getting permanent links to files mac windows linux all When viewing a file on GitHub, you can press the "y" key to update the URL to a permalink to the exact version of the file you see. Tip: Press "?" on any page in GitHub to see all available keyboard shortcuts. File views show the latest version on a branch When viewing a file on GitHub, you usually see the version at the current head of a branch. For example: https://github.com/github/hubot/blob/master/README.md refers to GitHub's hubot repository, and shows the master branch's current version of the README.md file. The version of a file at the head of branch can change as new commits are made, so if you were to copy the normal URL, the file contents might not be the same when someone looks at it later. Press y to permalink to a file in a specific commit For a permanent link to the specific version of a file that you see, instead of using a branch name in the URL (i.e. the master part in the example above), put a commit id. This will permanently link to the exact version of the file in that commit. For example: https://github.com/github/hubot/blob/ed25584f5ac2520a6c28547ffd0961c7abd7ea49/README.md replaces master with a specific commit id and the file content will not change. Looking up the commit SHA by hand is inconvenient, however, so as a shortcut you can type y to automatically update the URL to the permalink version. Then you can copy the URL knowing that anyone you share it with will see exactly what you saw. Tip: You can put any identifier that can be resolved to a commit in the URL, including branch names, specific commit SHAs, or tags! Creating a permanent link to a code snippet You can create a permanent link that refers to a code block in a specific version of a file or pull request. Depending on where you paste the permalink, it will render as a code snippet image or a URL. For more information, see "Creating a permanent link to a code snippet." Further reading "Archiving a GitHub repository" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Managing files using the command line - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing files in a repository / Managing files using the command line Managing files using the command line mac windows linux all Using the command line, you can add, rename, and move files in a repository. Adding a file to a repository using the command line You can upload an existing file to a GitHub repository using the command line. Renaming a file using the command line You can use the command line to rename any file in your repository. Moving a file to a new location using the command line You can use the command line to move files within a repository by removing the file from the old location and then adding it in the new location. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Adding a file to a repository using the command line - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing files in a repository / Adding a file to a repository using the command line Adding a file to a repository using the command line mac windows linux all You can upload an existing file to a GitHub repository using the command line. Tip: You can also add an existing file to a repository from the GitHub website. This procedure assumes you've already: Created a repository on GitHub, or have an existing repository owned by someone else you'd like to contribute to Cloned the repository locally on your computer Warning: Never git add, commit, or push sensitive information to a remote repository. Sensitive information can include, but is not limited to: Passwords SSH keys AWS access keys API keys Credit card numbers PIN numbers For more information, see "Removing sensitive data from a repository." On your computer, move the file you'd like to upload to GitHub into the local directory that was created when you cloned the repository. Open TerminalTerminalGit Bash. Change the current working directory to your local repository. Stage the file for commit to your local repository. git add . # Adds the file to your local repository and stages it for commit. To unstage a file, use 'git reset HEAD YOUR-FILE'. Commit the file that you've staged in your local repository. git commit -m "Add existing file" # Commits the tracked changes and prepares them to be pushed to a remote repository. To remove this commit and modify the file, use 'git reset --soft HEAD~1' and commit and add the file again. Push the changes in your local repository to GitHub. git push origin your-branch # Pushes the changes in your local repository up to the remote repository you specified as the origin Further reading "Creating new files" "Adding an existing project to GitHub using the command line" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Renaming a file using the command line - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing files in a repository / Renaming a file using the command line Renaming a file using the command line mac windows linux all You can use the command line to rename any file in your repository. Many files can be renamed directly on GitHub, but some files, such as images, require that you rename them from the command line. This procedure assumes you've already: Created a repository on GitHub, or have an existing repository owned by someone else you'd like to contribute to Cloned the repository locally on your computer Open TerminalTerminalGit Bash. Change the current working directory to your local repository. Rename the file, specifying the old file name and the new name you'd like to give the file. This will stage your change for commit. git mv old_filename new_filename Use git status to check the old and new file names. git status # On branch your-branch # Changes to be committed: # (use "git reset HEAD ..." to unstage) # # renamed: old_filename -> new_filename # Commit the file that you've staged in your local repository. git commit -m "Rename file" # Commits the tracked changes and prepares them to be pushed to a remote repository. To remove this commit and modify the file, use 'git reset --soft HEAD~1' and commit and add the file again. Push the changes in your local repository to GitHub. git push origin your-branch # Pushes the changes in your local repository up to the remote repository you specified as the origin Further reading "Moving a file to a new location using the command line" "Adding a file to a repository using the command line" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Moving a file to a new location using the command line - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing files in a repository / Moving a file to a new location using the command line Moving a file to a new location using the command line mac windows linux all You can use the command line to move files within a repository by removing the file from the old location and then adding it in the new location. Many files can be moved directly on GitHub, but some files, such as images, require that you move them from the command line. This procedure assumes you've already: Created a repository on GitHub, or have an existing repository owned by someone else you'd like to contribute to Cloned the repository locally on your computer On your computer, move the file to a new location within the directory that was created locally on your computer when you cloned the repository. Open TerminalTerminalGit Bash. Use git status to check the old and new file locations. git status # On branch your-branch # Changes not staged for commit: # (use "git add/rm ..." to update what will be committed) # (use "git checkout -- ..." to discard changes in working directory) # # deleted: /old-folder/image.png # # Untracked files: # (use "git add ..." to include in what will be committed) # # /new-folder/image.png # # no changes added to commit (use "git add" and/or "git commit -a") Stage the file for commit to your local repository. This will delete, or git rm, the file from the old location and add, or git add, the file to the new location. git add . # Adds the file to your local repository and stages it for commit. To unstage a file, use 'git reset HEAD YOUR-FILE'. Use git status to check the changes staged for commit. git status # On branch your-branch # Changes to be committed: # (use "git reset HEAD ..." to unstage) # # renamed: /old-folder/image.png -> /new-folder/image.png # Displays the changes staged for commit Commit the file that you've staged in your local repository. git commit -m "Move file to new directory" # Commits the tracked changes and prepares them to be pushed to a remote repository. To remove this commit and modify the file, use 'git reset --soft HEAD~1' and commit and add the file again. Push the changes in your local repository to GitHub. git push origin your-branch # Pushes the changes in your local repository up to the remote repository you specified as the origin Further reading "Renaming a file using the command line" "Adding a file to a repository using the command line" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Rendering and diffing images - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Working with non-code files / Rendering and diffing images Rendering and diffing images mac windows linux all GitHub can display several common image formats, including PNG, JPG, GIF, PSD, and SVG. In addition to simply displaying them, there are several ways to compare differences between versions of those image formats. Viewing images You can directly browse and view images in your GitHub repository: SVGs don't currently support inline scripting or animation. Viewing differences You can visually compare images in three different modes: 2-up, swipe, and onion skin. 2-up 2-up is the default mode; it gives you a quick glimpse of both images. In addition, if the image has changed size between versions, the actual dimension change is displayed. This should make it very apparent when things are resized, such as when assets are upgraded to higher resolutions. Swipe Swipe lets you view portions of your image side by side. Not sure if colors shifted between different versions? Drag the swipe slider over the area in question and compare the pixels for yourself. Onion skin Onion Skin really comes in handy when elements move around by small, hard to notice amounts. Did an icon shift two pixels to the left? Drag the opacity slider back a bit and notice if things move around. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Mapping geoJSON files on GitHub - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Working with non-code files / Mapping geoJSON files on GitHub Mapping geoJSON files on GitHub mac windows linux all GitHub supports rendering geoJSON and topoJSON map files within GitHub repositories. Simply commit the file as you would normally using a .geojson or .topojson extension. Files with a .json extension are also supported, but only if type is set to FeatureCollection, GeometryCollection, or topology. Then, navigate to the path of the geoJSON file on GitHub.com. When you click the paper icon on the right, you'll also see the changes made to that file as part of a commit. Geometry Types Maps on GitHub use Leaflet.js and support all the geometry types outlined in the geoJSON spec (Point, LineString, Polygon, MultiPoint, MultiLineString, MultiPolygon, and GeometryCollection). TopoJSON files should be type "Topology" and adhere to the topoJSON spec. Styling features You can customize the way features are displayed, such as specifying a particular color or adding a descriptive icon, by passing additional metadata within the geoJSON object's properties. The options are: marker-size - small, medium, or large marker-color - valid RGB hex color marker-symbol - an icon ID from the Maki project or a single alphanumeric character (a-z or 0-9). stroke - color of a polygon edge or line (RGB) stroke-opacity - opacity of a polygon edge or line (0.0 - 1.0) stroke-width - width of a polygon edge or line fill - the color of the interior of a polygon (GRB) fill-opacity - the opacity of the interior of a polygon (0.0-1.0) See version 1.1.0 of the open simplestyle spec for more information. Embedding your map elsewhere Want to make your geoJSON map available someplace other than GitHub? Simply modify this template, and place it in any HTML page that supports javascript (e.g., GitHub Pages): <script src="https://embed.github.com/view/geojson/<username>/<repo>/<ref>/<path_to_file>"></script> For example, if your map's URL is github.com/benbalter/dc-wifi-social/blob/master/bars.geojson, your embed code would be: <script src="https://embed.github.com/view/geojson/benbalter/dc-wifi-social/master/bars.geojson"></script> By default, the embedded map 420px x 620px, but you can customize the output by passing height and width variables as parameters at the end, such as ?height=300&width=500. Note: ref can be a branch (like master), or the hash to an individual commit (like 2391ae). Clustering If your map contains a large number of markers (roughly over 750), GitHub will automatically cluster nearby markers at higher zoom levels. Simply click the cluster or zoom in to see individual markers. Something's up with the underlying map The underlying map data (street names, roads, etc.) are driven by OpenStreetMap, a collaborative project to create a free editable map of the world. If you notice something's not quite right, since it's open source, simply sign up and submit a fix. Troubleshooting If you're having trouble rendering geoJSON files, ensure you have a valid geoJSON file by running it through a geoJSON linter. If your points aren't appearing where you'd expect (e.g., in the middle of the ocean), it's likely that the data is in a projection which is currently unsupported. Currently, GitHub only supports the urn:ogc:def:crs:OGC:1.3:CRS84 projection. Additionally, if your .geojson file is especially large (over 10 MB), it is not possible to render within the browser. If that's the case, you'll generally see a message that looks something like this: It may still be possible to render the data by converting the .geojson file to TopoJSON, a compression format that, in some cases, can reduce filesize by up to 80%. Of course, you can always break the file into smaller chunks (such as by state or by year), and store the data as multiple files within the repository. Additional Resources Leaflet.js geojson documentation MapBox marker-styling documentation TopoJSON Wiki Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Working with Jupyter Notebook files on GitHub - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Working with non-code files / Working with Jupyter Notebook files on GitHub Working with Jupyter Notebook files on GitHub mac windows linux all When you add Jupyter Notebook or IPython Notebook files with a .ipynb extension on GitHub, they will render as static HTML files in your repository. The interactive features of the notebook, such as custom JavaScript plots, will not work in your repository on GitHub. For an example, see Linking and Interactions.ipynb. To view your Jupyter notebook with JavaScript content rendered or to share your notebook files with others you can use nbviewer. For an example, see Linking and Interactions.ipynb rendered on nbviewer. To view a fully interactive version of your Jupyter Notebook, you can set up a notebook server locally. For more information, see Jupyter's official documentation. Troubleshooting If you're having trouble rendering Jupyter Notebook files in static HTML, you can convert the file locally on the command line by using the nbconvert command: jupyter nbconvert --to html NOTEBOOK-NAME.ipynb Further reading Jupyter Notebook's GitHub repository Gallery of Jupyter Notebooks Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support 3D File Viewer - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Working with non-code files / 3D File Viewer 3D File Viewer mac windows linux all GitHub can host and render 3D files with the .stl extension. When looking directly at an STL file on GitHub you can: Click and drag to spin the model. Right click and drag to translate the view. Scroll to zoom in and out. Click the different view modes to change the view. Diffs When looking at a commit or set of changes which includes an STL file, you'll be able to see a before and after diff of the file. By default, you'll get a view where everything unchanged is in wireframe. Additions are colored in green, and removed parts are colored in red. You can also select the Revision Slider option, which lets you use a slider at the top of the file to transition between the current and previous revisions. Fixing slow performance If you see this icon in the corner of the viewer, then the WebGL technology is not available on your browser: WebGL is necessary to take advantage of your computer's hardware to its fullest. We recommend you try browsers like Chrome or Firefox, which ship with WebGL enabled. Error: "Unable to display" If your model is invalid, GitHub may not be able to display the file. In addition, files that are larger than 10 MB are too big for GitHub to display. Embedding your model elsewhere To display your 3D file elsewhere on the internet, modify this template and place it on any HTML page that supports JavaScript: <script src="https://embed.github.com/view/3d/<username>/<repo>/<ref>/<path_to_file>"></script> For example, if your model's URL is github.com/skalnik/secret-bear-clip/blob/master/stl/clip.stl, your embed code would be: <script src="https://embed.github.com/view/3d/skalnik/secret-bear-clip/master/stl/clip.stl"></script> By default, the embedded renderer is 420 pixels wide by 620 pixels high, but you can customize the output by passing height and width variables as parameters at the end of the URL, such as ?height=300&width=500. Note: ref can be a branch (like master), or the hash to an individual commit (like 2391ae). Where to find awesome 3D projects on GitHub There are a bunch of excellent 3D projects on GitHub, and more being added every day! Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Rendering CSV and TSV data - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Working with non-code files / Rendering CSV and TSV data Rendering CSV and TSV data mac windows linux all GitHub supports rendering tabular data in the form of .csv (comma-separated) and .tsv (tab-separated) files. When viewed, any .csv or .tsv file committed to a GitHub repository automatically renders as an interactive table, complete with headers and row numbering. By default, we'll always assume the first row is your header row. You can link to a particular row by clicking the row number, or select multiple rows by holding down the shift key. Just copy the URL and send it to a friend. Searching data If you want to find a certain value in your dataset, you can start typing in the search bar directly above the file. The rows will filter automagically: Handling errors Occasionally, you may discover that your CSV or TSV file isn't rendering. In those instances, an error box appears at the bottom of your raw text, suggesting what the error may be. Common errors include: Mismatched column counts. You must have the same number of separators in each row, even if the cell is blank Exceeding the file size. Our rendering only works for files up to 512KB. Anything bigger than that slows down the browser. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Rendering PDF documents - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Working with non-code files / Rendering PDF documents Rendering PDF documents mac windows linux all GitHub supports rendering of PDF documents. Currently, links within PDFs are ignored. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Rendering differences in prose documents - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Working with non-code files / Rendering differences in prose documents Rendering differences in prose documents mac windows linux all Commits and pull requests that include prose documents have the ability to represent those documents with source and rendered views. The source view shows the raw text that has been typed, while the rendered view shows how that text would look once it's rendered on GitHub. For example, this might be the difference between showing **bold** in Markdown, and bold in the rendered view. Prose rendering is supported for rendered documents supported by github/markup: Markdown AsciiDoc Textile ReStructuredText Rdoc Org Creole MediaWiki Pod When you click the paper icon on the right, you'll also see the changes made to that document as part of a commit. Visualizing attribute changes We provide a tooltip describing changes to attributes that, unlike words, would not otherwise be visible in the rendered document. For example, if a link URL changes from one website to another, we'd show a tooltip like this: Commenting on changes Commit comments can only be added to files within the source view, on a line-by-line basis. Linking to headers As with other rendered prose documents, hovering over a header in your document creates a link icon. You can link readers of your rendered prose diff to specific sections. Viewing complex diffs Some pull requests involve a large number of changes with large, complex documents. When the changes take too long to analyze, GitHub can't always produce a rendered view of the changes; you'll see a message similar to this when you click the rendered button: You can still use the source view to analyze and comment on changes. Viewing HTML elements We don't directly support rendered views of commits to HTML documents. Some formats, such as Markdown, let you embed arbitrary HTML in a document. When these documents are shown on GitHub, some of that embedded HTML can be shown in a preview, while some (like an embedded YouTube video) cannot. In general, rendered views of changes to a document containing embedded HTML will show changes to the elements that are supported in GitHub's view of the document. Changes to documents containing embedded HTML should always be reviewed in both the rendered and source views for completeness. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Working with large files - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing Large Files / Working with large files Working with large files mac windows linux all A Git repository contains every version of every file. But for some file types, this is not practical. Multiple revisions of large files increase the clone and fetch times for other users of a repository. Git requires every repository to have as much free space on a hard drive as consumed space at all times. For example, if a repository is 1GB, Git requires 1GB of additional free space to be available. In order to keep your repository manageable for you and your collaborators, we suggest that you keep the following types of files: Code files Versioned assets, such as graphics Large configuration files We suggest removing the following types of files: Database dumps Log files Tip: If you regularly push large files to GitHub, consider introducing Git Large File Storage (Git LFS) as part of your workflow. Git LFS works well with the GitHub Flow and can be used with any large file, regardless of its type. For more information, see "Versioning large files." For more information on managing your repository's size, see "What is my disk quota?". Conditions for large files GitHub will warn you when pushing files larger than 50 MB. You will not be allowed to push files larger than 100 MB. Removing large files from a repository To remove a large file from your repository, you must completely remove it from your local repository and from GitHub. Distributing large binaries Some projects require distributing large files, such as binaries or installers, in addition to distributing source code. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Conditions for large files - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing Large Files / Conditions for large files Conditions for large files mac windows linux all GitHub will warn you when pushing files larger than 50 MB. You will not be allowed to push files larger than 100 MB. Tip: If you regularly push large files to GitHub, consider introducing Git Large File Storage (Git LFS) as part of your workflow. Git LFS works well with the GitHub Flow and can be used with any large file, regardless of its type. For more information, see "Versioning large files." 50 MB push warning When pushing to GitHub, you'll receive a warning or error message if you either add a new file or update an existing file that is larger than 50 MB. The warning will tell you which files are too large: remote: warning: Large files detected. remote: warning: File big_file is 55.00 MB; this is larger than GitHub's recommended maximum file size of 50 MB The push with big_file is received and saved into the repository on GitHub, but you should consider removing the file and the commit entirely. 100 MB push limit If you push a file larger than 100 MB to GitHub, Git will reject the push and tell you which file is too large: remote: warning: Large files detected. remote: error: File giant_file is 123.00 MB; this exceeds GitHub's file size limit of 100 MB This push was rejected because of giant_file. The commits will not be saved into the repository on GitHub. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Removing files from a repository's history - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing Large Files / Removing files from a repository's history Removing files from a repository's history mac windows linux all To remove a large file from your repository, you must completely remove it from your local repository and from GitHub. Warning: These procedures will permanently remove files from the repository on your computer and GitHub. If the file is important, make a local backup copy in a directory outside of the repository. If you added a file in an earlier commit, you need to remove it from your repository history. You can remove files from your repository history using either the BFG Repo-Cleaner or the git filter-branch command. For more information, see "Removing sensitive data from a repository." Removing a file added in the most recent unpushed commit If the file was added with your most recent commit, and you have not pushed to GitHub, you can delete the file and amend the commit: Open TerminalTerminalGit Bash. Change the current working directory to your local repository. To remove the file, enter git rm --cached: git rm --cached giant_file # Stage our giant file for removal, but leave it on disk Commit this change using --amend -CHEAD: git commit --amend -CHEAD # Amend the previous commit with your change # Simply making a new commit won't work, as you need # to remove the file from the unpushed history as well Push your commits to GitHub: git push # Push our rewritten, smaller commit Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Distributing large binaries - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing Large Files / Distributing large binaries Distributing large binaries mac windows linux all Some projects require distributing large files, such as binaries or installers, in addition to distributing source code. If you need to distribute large files within your repository, we recommend that you create releases for your projects on GitHub. Releases allow you to include binary files, such as compiled programs. For more information, visit "Creating releases." We don't limit the total size of your binary release files, nor the bandwidth used to deliver them. However, each individual file must be under 2 GB in size. Tip: If you regularly push large files to GitHub, consider introducing Git Large File Storage (Git LFS) as part of your workflow. Git LFS works well with the GitHub Flow and can be used with any large file, regardless of its type. For more information, see "Versioning large files." Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support What is my disk quota? - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing Large Files / What is my disk quota? What is my disk quota? mac windows linux all GitHub doesn't have any set disk quotas. We try to provide abundant storage for all Git repositories, within reason. Keeping repositories small ensures that our servers are fast and downloads are quick for our users. Tip: If you regularly push large files to GitHub, consider introducing Git Large File Storage (Git LFS) as part of your workflow. Git LFS works well with the GitHub Flow and can be used with any large file, regardless of its type. For more information, see "Versioning large files." File and repository size limitations We recommend repositories be kept under 1GB each. This limit is easy to stay within if large files are kept out of the repository. If your repository exceeds 1GB, you might receive a polite email from GitHub Support requesting that you reduce the size of the repository to bring it back down. In addition, we place a strict limit of files exceeding 100 MB in size. For more information, see "Working with large files." Note: If you add a file to a repository via a browser, the file can be no larger than 25 MB. For more information, see "Adding a file to a repository". Backups Git is not adequately designed to serve as a backup tool. However, there are many solutions specifically designed for performing backups that are worth checking out, including Arq, Carbonite, Mozy and CrashPlan. Database dumps Large SQL files do not play well with version control systems such as Git. If you are looking to provide your developers with the most recent production dataset, we recommend using Dropbox for sharing files like these among your developers. If you are looking to backup your production servers, see the Backups section above. External dependencies Another thing that causes Git repositories to become large and bloated are external dependencies. It's best to leave these files out of the repository and use a package manager instead. Most popular languages come with package managers that can do this for you. Bundler, Node's Package Manager and Maven. They each support using a Git repository directly as well, so you don't need pre-packaged sources. Packaged release versions We don't recommend distributing compiled code and pre-packaged releases within your repository. For more information on sharing large files, see "Distributing large binaries." Changing history of an existing repository If you already have a repository that's quite large, don't fret! You can remove large files from the repository's history to reduce its size. For more information, see "Removing files from a repository's history." Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Versioning large files - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing Large Files / Versioning large files Versioning large files mac windows linux all Git Large File Storage (Git LFS) is an open source extension to Git that allows you to work with large files the same way as other text files. With Git LFS, you and your repository's contributors can clone large files from the Git command line, open pull requests, and comment on the diffs. It's the ideal solution for pushing files to GitHub that are larger than 100 MB. For more information on Git LFS, visit https://git-lfs.github.com. About Git Large File Storage Git LFS lets you store files up to 2 GB in size. Installing Git Large File Storage In order to use Git LFS, you'll need to download and install a new program that's separate from Git. Configuring Git Large File Storage Once Git LFS is installed, you need to associate it with a large file in your repository. Collaboration with Git Large File Storage With Git LFS enabled, you'll be able to fetch, modify, and push large files just as you would expect with any file that Git manages. However, a user that doesn't have Git LFS will experience a different workflow. Moving a file in your repository to Git Large File Storage If you've set up Git LFS, and you have an existing file in your repository that needs to be tracked in Git LFS, you need to first remove it from your repository. Removing files from Git Large File Storage If you've set up Git LFS for your repository, you can remove all files or a subset of files from Git LFS. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support About Git Large File Storage - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing Large Files / About Git Large File Storage About Git Large File Storage mac windows linux all Git LFS lets you store files up to 2 GB in size. Git LFS handles large files by storing references to the file in the repository, but not the actual file itself. To work around Git's architecture, Git LFS creates a pointer file which acts as a reference to the actual file (which is stored somewhere else). GitHub manages this pointer file in your repository. When you clone the repository down, GitHub uses the pointer file as a map to go and find the large file for you. As an analogy, say you walk into a restaurant wearing an enormous coat. You hand your coat over to the attendant, and it's exchanged for a ticket that identifies where the coat is stored. After you finish your meal, you hand your ticket to the attendant, who retrieves your coat from storage and returns it to you. Git LFS works the same way. You can also use Git LFS with GitHub Desktop. For more information about cloning Git LFS repositories in GitHub Desktop, see "Cloning a repository from GitHub to GitHub Desktop." Pointer file format Git LFS's pointer file looks like this: version https://git-lfs.github.com/spec/v1 oid sha256:4cac19622fc3ada9c0fdeadb33f88f367b541f38b89102a3f1261ac81fd5bcb5 size 84977953 It tracks the version of Git LFS you're using, followed by a unique identifier for the file (oid). It also stores the size of the final file. Tip: Git LFS cannot be used with GitHub Pages sites. Further reading "Collaboration with Git Large File Storage" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Installing Git Large File Storage - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing Large Files / Installing Git Large File Storage Installing Git Large File Storage mac windows linux all In order to use Git LFS, you'll need to download and install a new program that's separate from Git. Navigate to git-lfs.github.com and click Download. Alternatively, you can install Git LFS using a package manager: To use Homebrew, run brew install git-lfs. To use MacPorts, run port install git-lfs. If you install Git LFS with Homebrew or MacPorts, skip to step six. On your computer, locate and unzip the downloaded file. Open TerminalTerminalGit Bash. Change the current working directory into the folder you downloaded and unzipped. cd ~/Downloads/git-lfs-1.X.X Note: The file path you use after cd depends on your operating system, Git LFS version you downloaded, and where you saved the Git LFS download. To install the file, run this command: ./install.sh Git LFS initialized. Note: You may have to use sudo ./install.sh to install the file. Verify that the installation was successful: git lfs install Git LFS initialized. If you don't see a message indicating that git lfs install was successful, please contact GitHub Support. Be sure to include the name of your operating system. Navigate to git-lfs.github.com and click Download. Tip: For more information about alternative ways to install Git LFS for Windows, see this Getting started guide. On your computer, locate the downloaded file. Double click on the file called git-lfs-windows-1.X.X.exe, where 1.X.X is replaced with the Git LFS version you downloaded. When you open this file Windows will run a setup wizard to install Git LFS. Open TerminalTerminalGit Bash. Verify that the installation was successful: git lfs install Git LFS initialized. If you don't see a message indicating that git lfs install was successful, please contact GitHub Support. Be sure to include the name of your operating system. Navigate to git-lfs.github.com and click Download. Tip: For more information about alternative ways to install Git LFS for Linux, see this Getting started guide. On your computer, locate and unzip the downloaded file. Open TerminalTerminalGit Bash. Change the current working directory into the folder you downloaded and unzipped. cd ~/Downloads/git-lfs-1.X.X Note: The file path you use after cd depends on your operating system, Git LFS version you downloaded, and where you saved the Git LFS download. To install the file, run this command: ./install.sh Git LFS initialized. Note: You may have to use sudo ./install.sh to install the file. Verify that the installation was successful: git lfs install Git LFS initialized. If you don't see a message indicating that git lfs install was successful, please contact GitHub Support. Be sure to include the name of your operating system. Further reading "Configuring Git Large File Storage" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Configuring Git Large File Storage - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing Large Files / Configuring Git Large File Storage Configuring Git Large File Storage mac windows linux all Once Git LFS is installed, you need to associate it with a large file in your repository. If there are existing files in your repository that you'd like to use GitHub with, you need to first remove them from the repository and then add them to Git LFS locally. For more information, see "Moving a file in your repository to Git LFS." Open TerminalTerminalGit Bash. Change your current working directory to an existing repository you'd like to use with Git LFS. To associate a file type in your repository with Git LFS, enter git lfs track followed by the name of the file extension you want to automatically upload to Git LFS. For example, to associate a .psd file, enter the following command: git lfs track "*.psd" Adding path *.psd Every file type you want to associate with Git LFS will need to be added with git lfs track. This command amends your repository's .gitattributes file and associates large files with Git LFS. Tip: We strongly suggest that you commit your local .gitattributes file into your repository. Relying on a global .gitattributes file associated with Git LFS may cause conflicts when contributing to other Git projects. Add a file to the repository matching the extension you've associated: git add path/to/file.psd Commit the file and push it to GitHub: git commit -m "add file.psd" git push origin master You should see some diagnostic information about your file upload: Sending file.psd 44.74 MB / 81.04 MB 55.21 % 14s 64.74 MB / 81.04 MB 79.21 % 3s Further reading "Collaboration with Git Large File Storage" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Collaboration with Git Large File Storage - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing Large Files / Collaboration with Git Large File Storage Collaboration with Git Large File Storage mac windows linux all With Git LFS enabled, you'll be able to fetch, modify, and push large files just as you would expect with any file that Git manages. However, a user that doesn't have Git LFS will experience a different workflow. If collaborators on your repository don't have Git LFS installed, they won't have access to the original large file. If they attempt to clone your repository, they will only fetch the pointer files, and won't have access to any of the actual data. Tip: To help users without Git LFS enabled, we recommend you set guidelines for repository contributors that describe how to work with large files. For example, you may ask contributors not to modify large files, or to upload changes to a file sharing service like Dropbox or Google Drive. Viewing large files in pull requests GitHub can show any text file within a pull request, as well as several non-text files. For files that GitHub can't render, only the pointer file is shown: In order to view changes made to these large files, check out the pull request locally to review the diff. Pushing large files to forks Pushing large files to forks of a repository count against the parent repository's bandwidth and storage quotas, rather than the quotas of the fork owner. You can push Git LFS objects to public forks if the repository network already has Git LFS objects or you have write access to the root of the repository network. Further reading "Duplicating a repository with Git Large File Storage objects" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Moving a file in your repository to Git Large File Storage - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing Large Files / Moving a file in your repository to Git Large File Storage Moving a file in your repository to Git Large File Storage mac windows linux all If you've set up Git LFS, and you have an existing file in your repository that needs to be tracked in Git LFS, you need to first remove it from your repository. After installing Git LFS and configuring Git LFS tracking, you can move files from Git's regular tracking to Git LFS. Tip: If you get an error that "this exceeds Git LFS's file size limit of 100 MB" when you try to push files to Git, you can use git lfs migrate instead of filter branch or the BFG Repo Cleaner, to move the large file to Git Large File Storage. For more information about the git lfs migrate command, see the Git LFS 2.2.0 release announcement. Remove the file from the repository's Git history using either the filter-branch command or BFG Repo-Cleaner. For detailed information on using these, see "Removing sensitive data from a repository." Configure tracking for your file and push it to Git LFS. For more information on this procedure, see "Configuring Git Large File Storage." Further reading "About Git Large File Storage" "Collaboration with Git Large File Storage" "Installing Git Large File Storage" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Removing files from Git Large File Storage - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing Large Files / Removing files from Git Large File Storage Removing files from Git Large File Storage mac windows linux all If you've set up Git LFS for your repository, you can remove all files or a subset of files from Git LFS. Moving a single file Remove the file from the repository's Git history using either the filter-branch command or BFG Repo-Cleaner. For detailed information on using these, see "Removing sensitive data from a repository." Navigate to your .gitattributes file. Note: Your .gitattributes file is generally saved within your local repository. In some cases, you may have created a global .gitattributes file that contains all of your Git LFS associations. Find and remove the associated Git LFS tracking rule within the .gitattributes file. Save and exit the .gitattributes file. Moving all files within a Git LFS repository Remove the files from the repository's Git history using either the filter-branch command or BFG Repo-Cleaner. For detailed information on using these, see "Removing sensitive data from a repository." Optionally, to uninstall Git LFS in the repository, run: git lfs uninstall For Git LFS versions below 1.1.0, run: $ git lfs uninit Git LFS objects in your repository After you move files from Git LFS to regular Git tracking, the Git LFS objects still exist on the remote storage and will continue to count toward your Git LFS storage quota. To remove Git LFS objects from a repository, delete and recreate the repository. When you delete a repository, any associated issues, stars, and forks are also deleted. Note: If you moved a single file and have other Git LFS objects that you'd like to keep in your repository, after deleting and recreating your repository, reconfigure your Git LFS-associated files. Further reading "About Git Large File Storage" "Collaboration with Git Large File Storage" "Installing Git Large File Storage" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Managing storage and bandwidth usage - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing Large Files / Managing storage and bandwidth usage Managing storage and bandwidth usage mac windows linux all You can track storage and bandwidth usage when you use Git LFS to manage large files in your repositories. About storage and bandwidth usage All personal and organization accounts using Git LFS receive 1 GB of free storage and 1 GB a month of free bandwidth. If the bandwidth and storage quotas are not enough, you can choose to purchase an additional quota for Git LFS. Viewing storage and bandwidth usage for a personal account Your personal account's Billing page lists your monthly bandwidth quota and remaining storage for Git LFS. Viewing storage and bandwidth usage for an organization Your organization's Billing page lists your monthly bandwidth quota and remaining storage for Git LFS. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support About storage and bandwidth usage - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing Large Files / About storage and bandwidth usage About storage and bandwidth usage mac windows linux all All personal and organization accounts using Git LFS receive 1 GB of free storage and 1 GB a month of free bandwidth. If the bandwidth and storage quotas are not enough, you can choose to purchase an additional quota for Git LFS. Git LFS is available for every repository on GitHub, whether or not your account or organization has a paid plan. Tracking storage and bandwidth use When you commit and push a change to a file tracked with Git LFS, a new version of the entire file is pushed and the total file size is counted against the repository owner's storage limit. When you download a file tracked with Git LFS, the total file size is counted against the repository owner's bandwidth limit. Git LFS uploads do not count against the bandwidth limit. For example: If you push a 500 MB file to Git LFS, you'll use 500 MB of your allotted storage and none of your bandwidth. If you make a 1 byte change and push the file again, you'll use another 500 MB of storage and no bandwidth, bringing your total usage for these two pushes to 1 GB of storage and zero bandwidth. If you download a 500 MB file that's tracked with LFS, you'll use 500 MB of the repository owner's allotted bandwidth. If a collaborator pushes a change to the file and you pull the new version to your local repository, you'll use another 500 MB of bandwidth, bringing the total usage for these two downloads to 1 GB of bandwidth. Tips: Bandwidth and storage usage only count against the repository owner's quotas. In forks, bandwidth and storage usage count against the root of the repository network. Anyone with write access to a repository can push files to Git LFS without affecting their personal bandwidth and storage quotas or purchasing data packs. Forking and pulling a repository counts against the parent repository's bandwidth limit. Unused bandwidth doesn't roll over month-to-month. Storage quota If you use more than 1 GB of storage without purchasing a data pack, you can still clone repositories with large assets, but you will only retrieve the pointer files, and you will not be able to push new files back up. Bandwidth quota If you use more than 1 GB of bandwidth per month without purchasing a data pack, Git LFS support is disabled on your account until the next month. Purchasing additional storage and bandwidth Additional storage and bandwidth is offered in a single data pack. One data pack costs $5 per month, and provides a monthly quota of 50 GB for bandwidth and 50 GB for storage. You can purchase as many data packs as you need. For example, if you need 150 GB of storage, you'd buy three data packs. Purchasing data packs for Git LFS is independent of any other paid plan on GitHub. Downgrading storage and bandwidth If you downgrade your number of additional data packs, your changes will take effect on your next billing date. Further reading "Viewing storage and bandwidth usage for a personal account" "Purchasing additional storage and bandwidth for a personal account" "Downgrading storage and bandwidth for a personal account" "Viewing storage and bandwidth usage for an organization" "Purchasing additional storage and bandwidth for an organization" "Downgrading storage and bandwidth for an organization" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Viewing storage and bandwidth usage for a personal account - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing Large Files / Viewing storage and bandwidth usage for a personal account Viewing storage and bandwidth usage for a personal account mac windows linux all Your personal account's Billing page lists your monthly bandwidth quota and remaining storage for Git LFS. Tips: Bandwidth and storage usage only count against the repository owner's quotas. In forks, bandwidth and storage usage count against the root of the repository network. Anyone with write access to a repository can push files to Git LFS without affecting their personal bandwidth and storage quotas or purchasing data packs. Forking and pulling a repository counts against the parent repository's bandwidth limit. Unused bandwidth doesn't roll over month-to-month. In the upper-right corner of any page, click your profile photo, then click Settings. In your user settings sidebar, click Billing. In the Data section, the Bandwidth bar shows how much bandwidth you've consumed for the month, while the Storage bar shows your remaining amount of storage. Further reading "About storage and bandwidth usage" "Purchasing additional storage and bandwidth for a personal account" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Viewing storage and bandwidth usage for an organization - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing Large Files / Viewing storage and bandwidth usage for an organization Viewing storage and bandwidth usage for an organization mac windows linux all Your organization's Billing page lists your monthly bandwidth quota and remaining storage for Git LFS. Tips: Only organization members with the owner or billing manager role can access or change billing settings for your organization. For more information, see "Permission levels for an organization." Bandwidth and storage usage only count against the repository owner's quotas. In forks, bandwidth and storage usage count against the root of the repository network. Anyone with write access to a repository can push files to Git LFS without affecting their personal bandwidth and storage quotas or purchasing data packs. Forking and pulling a repository counts against the parent repository's bandwidth limit. Unused bandwidth doesn't roll over month-to-month. In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click Settings. In your organization's Settings sidebar, click Billing. In the Data section, the Bandwidth bar shows how much bandwidth you've consumed for the month, while the Storage bar shows your remaining amount of storage. If your organization's repositories don't contain any LFS objects, then your organization's storage and bandwidth usage is zero, and the Bandwidth and Storage bars are not shown. Further reading "About storage and bandwidth usage" "Purchasing additional storage and bandwidth for an organization" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Changing a commit message - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Commits / Changing a commit message Changing a commit message mac windows linux all If a commit message contains unclear, incorrect, or sensitive information, you can amend it locally and push a new commit with a new message to GitHub. Rewriting the most recent commit message You can change the most recent commit message using the git commit --amend command. In Git, the text of the commit message is part of the commit. Changing the commit message will change the commit ID--i.e., the SHA1 checksum that names the commit. Effectively, you are creating a new commit that replaces the old one. Commit has not been pushed online If the commit only exists in your local repository and has not been pushed to GitHub, you can amend the commit message with the git commit --amend command. On the command line, navigate to the repository that contains the commit you want to amend. Type git commit --amend and press Enter. In your text editor, edit the commit message and save the commit. The new commit and message will appear on GitHub the next time you push. You can change the default text editor for Git by changing the core.editor setting. For more information, see "Basic Client Configuration" in the Git manual. Amending older or multiple commit messages If you have already pushed the commit to GitHub, you will have to force push a commit with an amended message. We strongly discourage force pushing, since this changes the history of your repository. If you force push, people who have already cloned your repository will have to manually fix their local history. For more information, see "Recovering from upstream rebase" in the Git manual. Amending the message of the most recently pushed commit Follow the steps above to amend the commit message. Use the push --force command to force push over the old commit. git push --force example-branch Amending the message of older or multiple commit messages If you need to amend the message for multiple commits or an older commit, you can use interactive rebase, then force push to change the commit history. On the command line, navigate to the repository that contains the commit you want to amend. Use the git rebase -i HEAD~n command to display a list of the last n commits in your default text editor. git rebase -i HEAD~3 # Displays a list of the last 3 commits on the current branch The list will look similar to the following: pick e499d89 Delete CNAME pick 0c39034 Better README pick f7fde4a Change the commit message but push the same commit. # Rebase 9fdb3bd..f7fde4a onto 9fdb3bd # # Commands: # p, pick = use commit # r, reword = use commit, but edit the commit message # e, edit = use commit, but stop for amending # s, squash = use commit, but meld into previous commit # f, fixup = like "squash", but discard this commit's log message # x, exec = run command (the rest of the line) using shell # # These lines can be re-ordered; they are executed from top to bottom. # # If you remove a line here THAT COMMIT WILL BE LOST. # # However, if you remove everything, the rebase will be aborted. # # Note that empty commits are commented out Replace pick with reword before each commit message you want to change. pick e499d89 Delete CNAME reword 0c39034 Better README reword f7fde4a Change the commit message but push the same commit. Save and close the commit list file. In each resulting commit file, type the new commit message, save the file, and close it. Force-push the amended commits. git push --force For more information on interactive rebase, see "Interactive mode" in the Git manual. As before, amending the commit message will result in a new commit with a new ID. However, in this case, every commit that follows the amended commit will also get a new ID because each commit also contains the id of its parent. If you have included sensitive information in a commit message, force pushing a commit with an amended commit may not remove the original commit from GitHub. The old commit will not be a part of a subsequent clone; however, it may still be cached on GitHub and accessible via the commit ID. You must contact GitHub Support with the old commit ID to have it purged from the remote repository. Further reading "Signing commits using GPG" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Commit exists on GitHub but not in my local clone - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Commits / Commit exists on GitHub but not in my local clone Commit exists on GitHub but not in my local clone mac windows linux all Sometimes a commit will be viewable on GitHub, but will not exist in your local clone of the repository. When you use git show to view a specific commit on the command line, you may get a fatal error. For example, you may receive a bad object error locally: git show 1095ff3d0153115e75b7bca2c09e5136845b5592 fatal: bad object 1095ff3d0153115e75b7bca2c09e5136845b5592 However, when you view the commit on GitHub, you'll be able to see it without any problems: github.com/$account/$repository/commit/1095ff3d0153115e75b7bca2c09e5136845b5592 There are several possible explanations: The local repository is out of date. The branch that contains the commit was deleted, so the commit is no longer referenced. Someone force pushed over the commit. The local repository is out of date Your local repository may not have the commit yet. To get information from your remote repository to your local clone, use git fetch: git fetch remote This safely copies information from the remote repository to your local clone without making any changes to the files you have checked out. You can use git fetch upstream to get information from a repository you've forked, or git fetch origin to get information from a repository you've only cloned. Tip: For more information, read about managing remotes and fetching data in the Pro Git book. The branch that contained the commit was deleted If a collaborator on the repository has deleted the branch containing the commit or has force pushed over the branch, the missing commit may have been orphaned (i.e. it cannot be reached from any reference) and therefore will not be fetched into your local clone. Fortunately, if any collaborator has a local clone of the repository with the missing commit, they can push it back to GitHub. They need to make sure the commit is referenced by a local branch and then push it as a new branch to GitHub. Let's say that the person still has a local branch (call it B) that contains the commit. This might be tracking the branch that was force pushed or deleted and they simply haven't updated yet. To preserve the commit, they can push that local branch to a new branch (call it recover-B) on GitHub. For this example, let's assume they have a remote named upstream via which they have push access to github.com/$account/$repository. The other person runs: git branch recover-B B # Create a new local branch referencing the commit git push upstream B:recover-B # Push local B to new upstream branch, creating new reference to commit Now, you can run: git fetch upstream recover-B # Fetch commit into your local repository. Avoid force pushes Avoid force pushing to a repository unless absolutely necessary. This is especially true if more than one person can push to the repository. Further reading "Working with Remotes" from the Pro Git book "Data Recovery" from the Pro Git book Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Commit branch and tag labels - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Commits / Commit branch and tag labels Commit branch and tag labels mac windows linux all You can easily see what branch a commit is in by looking at the labels beneath the commit on the commit page. If your commit is not on the default branch, an indicator will show the branches which contain the commit. If the commit is part of an unmerged pull request, it will show a link. Once the commit is on the default branch, any tags that contain the commit will be shown and the default branch will be the only branch listed. Further reading "Signing commits using GPG" "Signing tags using GPG" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Why are my commits linked to the wrong user? - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Commits / Why are my commits linked to the wrong user? Why are my commits linked to the wrong user? mac windows linux all GitHub uses the email address in the commit header to link the commit to a GitHub user. If your commits are being linked to another user, or not linked to a user at all, you may need to change your local Git configuration settings, add an email address to your account email settings, or do both. Note: If your commits are linked to another user, that does not mean the user can access your repository. A user can only access a repository you own if you add them as a collaborator or add them to a team that has access to the repository. Commits are linked to another user If your commits are linked to another user, that means the user has added the email address in your local Git configuration settings to their GitHub account. In this case, you can change the email in your local Git configuration settings and add the new email address to your GitHub account to link future commits to your account. To change the email address in your local Git configuration, follow the steps in "Setting your commit email address in Git". If you work on multiple machines, you will need to change this setting on each one. Add the email address from step 2 to your account settings by following the steps in "Adding an email address to your GitHub account". Commits you make from this point forward will be linked to your account. Commits are not linked to any user If your commits are not linked to any user, we will display the grey Octocat logo beside them: To check the email address used for those commits and connect commits to your account, take the following steps: Navigate to the commit by clicking the commit message link. To read a message about why the commit is not linked, hover over the blue to the right of the username. Unrecognized author (with email address) If you see this message with an email address, it means the address has not been added to your account settings. To link your commits, add the email address to your GitHub email settings. Unrecognized author (no email address) If you see this message without an email address, it means you used a generic email address that can't be added to your email settings. You will need to set your commit email address in Git, then add the new address to your GitHub email settings to link your future commits. Old commits will not be linked. Invalid email This means the email address in your local Git configuration settings is either blank or not formatted as an email address. You will need to set your commit email address in Git, then add the new address to your GitHub email settings to link your future commits. Old commits will not be linked. If your local Git configuration contained a generic email address, or an email address that was already attached to another user's account, then your previous commits will not be linked to your account. While Git does allow you to change the email address used for previous commits, we strongly discourage this, especially in a shared repository. For more information, see "Changing author info". Further reading "Searching commits" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Why are my commits in the wrong order? - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Commits / Why are my commits in the wrong order? Why are my commits in the wrong order? mac windows linux all If you rewrite your commit history via git rebase or a force push, you may notice that your commit sequence is out of order when opening a pull request. GitHub emphasizes Pull Requests as a space for discussion. All aspects of it--comments, references, and commits--are represented in a chronological order. Rewriting your Git commit history while performing rebases alters the space-time continuum, which means that commits may not be represented the way you expect them to in the GitHub interface. If you always want to see commits in order, we recommend not using git rebase. However, rest assured that nothing is broken when you see things outside of a chronological order! Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Comparing commits across time - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Commits / Comparing commits across time Comparing commits across time mac windows linux all Every repository contains a Compare view, which allows you to compare the state of your repository across branches, tags, commits, time periods, and more. The compare view provides you with the same diff tooling that the Pull Request view does. To get to the compare view, append /compare to your repository's path. We'll demonstrate the power of Compare by looking at the compare page for a fork of the Linguist repo, which is at https://github.com/octocat/linguist/compare/master...octocat:master. Every repository's Compare view contains two drop down menus: base and compare. base should be considered the starting point of your comparison, and compare is the endpoint. During a comparison, you can always change your base and compare points by clicking on Edit. Comparing branches The most common use of Compare is to compare branches, such as when you're starting a new Pull Request. You'll always be taken to the branch comparison view when starting a new Pull Request. To compare branches, you can select a branch name from the compare drop down menu at the top of the page. Here's an example of a comparison between two branches. Comparing tags Similarly, you can compare across tags made for project releases. Comparing against tags is a great way to assemble release notes between different versions of your project. Instead of typing a branch name, type the name of your tag in the compare drop down menu. Here's an example of a comparison between two tags. Comparing commits You can also compare two arbitrary commits in your repository. Comparisons between commits are made by providing either the full SHA hash or the short seven-character code. Here's an example of a comparison between two commits. Comparing across forks You can compare your base repository and any forked repository. This is the view that's presented when a user performs a Pull Request to a project. To compare branches on different repositories, preface the branch names with user names. For example, by specifying octocat:master for base and octo-org:master for compare, you can compare the master branch of the repositories respectively owned by octocat and octo-org. Here's an example of a comparison between two repositories. Comparisons across time Comparisons can be created for arbitrary time periods, like one month or two weeks. To define a time period, type the branch name, followed by a @, and then the date wrapped between a { } notation. For example, typing master@{2weeks} into the base dropdown menu compares the current master branch against the master branch as it was two weeks prior. Here's an example of a comparison between two time periods. You can also specify a specific date to compare against. Date formatting must follow the ISO8601 standard, which is YYYY-MM-DD (year-month-day). Here's an example comparing a branch from 2016-07-22 against that same branch several days later. Comparisons across commits As a shortcut, Git uses the ^ notation to mean "one commit prior." You can use this notation to compare a single commit or branch against its immediate predecessors. For example, 96d29b7^^^^^ indicates five commits prior to 96d29b7, because there are five ^ marks. Typing 96d29b7^^^^^ in the base branch and 96d29b7 in the compare branch compares the five commits made before 96d29b7 with the 96d29b7 commit. Here's an example of a comparison using the ^ notation. Further reading "Changing the base branch of a pull request" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Differences between commit views - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Commits / Differences between commit views Differences between commit views mac windows linux all On GitHub, there are, essentially, two different ways to see the commit history of a repository: By navigating directly to the commits page of a repository By clicking on a file, then selecting History, to get to the commit history for a specific file From time to time, you may notice that these two commit views show different information. That is, the history for a single file may omit commits found on the repository's commit history. In essence, Git has several different ways of showing the history of a repository. When Git shows the history of a single file, it "simplifies" history by omitting commits that did not change the file. But rather than look at every commit to decide whether it touched the file, git will omit a whole branch if that branch, when merged, did not impact the final contents of the file. Any commits on that branch that touched the file will not be shown. For a file's commit history, GitHub explicitly follows this simple strategy, for two reasons: It makes the history simpler by removing commits that did not actually contribute to the final result ( e.g., if a side branch made a change and then reverted it, or if a side branch contains a messy version of some changes that were cherry-picked and cleaned up) It's significantly more efficient to compute, as we can avoid looking at whole side-branches of the history that did not impact the file Of course, this truncated view might not always contain the information you're after. Sometimes, you do want to know about failed experiments, or messy history, or even be finding out what went wrong in a questionable merge. As mentioned above, Git does have many ways of viewing history, and GitHub provides a view with more information on a repository's commits page. For more information on how Git considers commit history, you can read up on the "History Simplification" section of the git log help article. Further reading "Signing commits using GPG" "Searching commits" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Getting started with searching on GitHub - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Searching for information on GitHub / Getting started with searching on GitHub Getting started with searching on GitHub mac windows linux all About searching on GitHub You can use our powerful search tools to find what you're looking for among the millions of repositories, users, and lines of code on GitHub. Understanding the search syntax When searching GitHub, you can construct queries that match specific numbers and words. Troubleshooting search queries If you encounter unexpected results while searching on GitHub, you can troubleshoot by reviewing common problems and limitations. Sorting search results You can sort GitHub search results using the Sort menu, or by adding a sort qualifier to your query. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support About searching on GitHub - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Searching for information on GitHub / About searching on GitHub About searching on GitHub mac windows linux all You can use our powerful search tools to find what you're looking for among the millions of repositories, users, and lines of code on GitHub. To search on GitHub, type what you're looking for into the search field at the top of any page, or into the search fields on the search or advanced search page. At the top of repository pages, the search field will be scoped to the current repository. To remove the repository scoping and search all of GitHub, type a backspace in the search field to delete "This repository." You can search the following types of information across all public GitHub repositories, and all private GitHub repositories you have access to: Repositories Issues Code Commits Users Wikis Note: You must be logged in to search for code across all public repositories. GitHub Pages sites are not searchable on GitHub. However you can search the source content if it exists in the default branch of a repository, using code search. After running a search on GitHub, you can sort the results, or further refine them by clicking one of the languages in the sidebar. Under the hood, we use an ElasticSearch cluster to index projects every time a change is pushed to GitHub. Issues and pull requests are indexed when they are created or modified. Advanced search The advanced search page provides a visual interface for constructing search queries. You can filter your searches by a variety of factors, such as the number of stars or number of forks a repository has. As you fill in the advanced search fields, your query will automatically be constructed in the top search bar. Further reading "Understanding the search syntax" "Searching on GitHub" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Understanding the search syntax - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Searching for information on GitHub / Understanding the search syntax Understanding the search syntax mac windows linux all When searching GitHub, you can construct queries that match specific numbers and words. Query for values greater or less than another value You can use >, >=, <, and <= to search for values that are greater than, greater than or equal to, less than, and less than or equal to another value. Query Example >n cats stars:>1000 matches repositories with the word "cats" that have more than 1000 stars. >=n cats topics:>=5 matches repositories with the word "cats" that have 5 or more topics. <n cats size:<10000 matches code with the word "cats" in files that are smaller than 10 KB. <=n cats stars:<=50 matches repositories with the word "cats" that have 50 or fewer stars. You can also use range queries to search for values that are greater than or equal to, or less than or equal to, another value. Query Example n..* cats stars:10..* is equivalent to stars:>=10 and matches repositories with the word "cats" that have 10 or more stars. *..n cats stars:*..10 is equivalent to stars:<=10 and matches repositories with the word "cats" that have 10 or fewer stars. Query for values between a range You can use the range syntax n..n to search for values within a range, where the first number n is the lowest value and the second is the highest value. Query Example n..n cats stars:10..50 matches repositories with the word "cats" that have between 10 and 50 stars. Query for dates You can search for dates that are earlier or later than another date, or that fall within a range of dates, by using >, >=, <, <=, and range queries. Date formatting must follow the ISO8601 standard, which is YYYY-MM-DD (year-month-day). Query Example >YYYY-MM-DD cats created:>2016-04-29 matches issues with the word "cats" that were created after April 29, 2016. >=YYYY-MM-DD cats created:>=2017-04-01 matches issues with the word "cats" that were created on or after April 1, 2017. <YYYY-MM-DD cats pushed:<2012-07-05 matches code with the word "cats" in repositories that were pushed to before July 5, 2012. <=YYYY-MM-DD cats created:<=2012-07-04 matches issues with the word "cats" that were created on or before July 4, 2012. YYYY-MM-DD..YYYY-MM-DD cats pushed:2016-04-30..2016-07-04 matches repositories with the word "cats" that were pushed to between the end of April and July of 2016. YYYY-MM-DD..* cats created:2012-04-30..* matches issues created after April 30th, 2012 containing the word "cats." *..YYYY-MM-DD cats created:*..2012-04-30 matches issues created before July 4th, 2012 containing the word "cats." You can also add optional time information THH:MM:SS+00:00 after the date, to search by the hour, minute, and second. That's T, followed by HH:MM:SS (hour-minutes-seconds), and a UTC offset (+00:00). Query Example YYYY-MM-DDTHH:MM:SS+00:00 cats created:2017-01-01T01:00:00+07:00..2017-03-01T15:30:15+07:00 matches issues created between January 1, 2017 at 1 a.m. with a UTC offset of 07:00 and March 1, 2017 at 3 p.m. with a UTC offset of 07:00. YYYY-MM-DDTHH:MM:SSZ cats created:2016-03-21T14:11:00Z..2016-04-07T20:45:00Z matches issues created between March 21, 2016 at 2:11pm and April 7, 2106 at 8:45pm. Exclude certain results You can exclude results containing a certain word, using the NOT syntax. The NOT operator can only be used for string keywords. It does not work for numerals or dates. Query Example NOT hello NOT world matches repositories that have the word "hello" but not the word "world." Another way you can narrow down search results is to exclude certain subsets. You can prefix any search qualifier with a - to exclude all results that are matched by that qualifier. Query Example -QUALIFIER cats stars:>10 -language:javascript matches repositories with the word "cats" that have more than 10 stars but are not written in JavaScript. mentions:defunkt -org:github matches issues mentioning @defunkt that are not in repositories in the GitHub organization Use quotation marks for queries with whitespace If your search query contains whitespace, you will need to surround it with quotation marks. For example: cats NOT "hello world" matches repositories with the word "cats" but not the words "hello world." build label:"bug fix" matches issues with the word "build" that have the label "bug fix." Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Troubleshooting search queries - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Searching for information on GitHub / Troubleshooting search queries Troubleshooting search queries mac windows linux all If you encounter unexpected results while searching on GitHub, you can troubleshoot by reviewing common problems and limitations. Potential timeouts Some queries are computationally expensive for our search infrastructure to execute. To keep search fast for everyone, we limit how long any individual query can run. In rare situations when a query exceeds the time limit, search returns all matches that were found prior to the timeout and informs you that a timeout occurred: Reaching a timeout does not necessarily mean that search results are incomplete. It just means that the query was discontinued before it searched through all possible data. Limitations on query length There are some limits to the length of the queries when searching across GitHub: Queries longer than 256 characters are not supported You can't construct a query using more than five AND, OR, or NOT operators Specific search types, such as code search, might have additional limitations. Check the documentation for these search types for more information. Further reading "About searching on GitHub" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Sorting search results - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Searching for information on GitHub / Sorting search results Sorting search results mac windows linux all You can sort GitHub search results using the Sort menu, or by adding a sort qualifier to your query. Use the Sort menu to sort results by relevance, number of stars, number of forks, and how recently the items were updated. To sort by interactions, reactions, author date, committer date, or how recently the items were updated, you can add a sort qualifier to your search query. Sort by interactions The sort:interactions qualifier sorts by the highest combined number of reactions and comments. Qualifier Example sort:interactions or sort:interactions-desc org:github sort:interactions matches issues in repositories owned by GitHub, sorted by the highest combined number of reactions and comments. sort:interactions-asc org:github sort:interactions-asc matches issues in repositories owned by GitHub, sorted by the lowest combined number of reactions and comments. Sort by reactions The sort:reactions qualifier sorts by the number or type of reactions. Qualifier Example sort:reactions or sort:reactions-desc org:github sort:reactions matches issues in repositories owned by GitHub, sorted by the highest number of reactions. sort:reactions-asc org:github sort:reactions-asc matches issues in repositories owned by GitHub, sorted by ascending number of reactions (the fewest to the most). sort:reactions-reaction org:github sort:reactions-+1 matches issues in repositories owned by GitHub, sorted by most thumbs up () reactions. org:github sort:reactions--1 matches issues in repositories owned by GitHub, sorted by most thumbs down () reactions. org:github sort:reactions-smile matches issues in repositories owned by GitHub, sorted by most laugh () reactions. org:github sort:reactions-tada matches issues in repositories owned by GitHub, sorted by most hurray () reactions. org:github sort:reactions-heart matches issues in repositories owned by GitHub, sorted by most heart () reactions. Sort by author date The sort:author-date qualifier sorts by descending or ascending author date. Qualifier Example sort:author-date or sort:author-date-desc feature org:github sort:author-date matches commits containing the word "feature" in repositories owned by GitHub, sorted by descending author date. sort:author-date-asc feature org:github sort:author-date-asc matches commits containing the word "feature" in repositories owned by GitHub, sorted by ascending author date. Sort by committer date The sort:committer-date qualifier sorts by descending or ascending committer date. Qualifier Example sort:committer-date or sort:committer-date-desc feature org:github sort:committer-date matches commits containing the word "feature" in repositories owned by GitHub, sorted by descending committer date. sort:committer-date-asc feature org:github sort:committer-date-asc matches commits containing the word "feature" in repositories owned by GitHub, sorted by ascending committer date. Sort by updated date The sort:updated qualifier sorts by how recently the items were updated. Qualifier Example sort:updated or sort:updated-desc feature sort:updated matches repositories containing the word "feature," sorted by most recently updated date. sort:updated-asc feature sort:updated-asc matches repositories containing the word "feature," sorted by least recently updated date. Further reading About searching on GitHub Sorting issues and pull requests Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Searching on GitHub - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Searching for information on GitHub / Searching on GitHub Searching on GitHub mac windows linux all Finding files on GitHub You can search for a file in a repository using the file finder. To search for a file in multiple repositories on GitHub, use the filename code search qualifier. Searching repositories You can search for repositories by using search qualifiers in any combination to narrow your search results. Searching code You can search for code by using search qualifiers in any combination to narrow your search results. Searching commits You can search commits by using search qualifiers in any combination to narrow your search results. Searching issues and pull requests You can search issues and pull requests by using search qualifiers in any combination to narrow your search results. Searching users You can search for users by using search qualifiers in any combination to narrow your search results. Searching wikis You can search wikis by using search qualifiers in any combination to narrow your search results. Searching in forks By default, forks are not shown in search results. You can choose to include them in repository searches, and in code searches if they meet certain criteria. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Finding files on GitHub - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Searching for information on GitHub / Finding files on GitHub Finding files on GitHub mac windows linux all You can search for a file in a repository using the file finder. To search for a file in multiple repositories on GitHub, use the filename code search qualifier. Tips: File finder results exclude some directories like build, log, tmp, and vendor. To search for files within these directories, use the filename code search qualifier. You can also open the file finder by pressing t on your keyboard. For more information, see "Using keyboard shortcuts." On GitHub, navigate to the main page of the repository. Under your repository name, click Find file. In the search field, type the name of the file you'd like to find. In the list of results, click the file you wanted to find. Further reading "About searching on GitHub" "Searching code" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Searching repositories - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Searching for information on GitHub / Searching repositories Searching repositories mac windows linux all You can search for repositories by using search qualifiers in any combination to narrow your search results. To include forks in the search results, you will need to add fork:true or fork:only to your query. For more information, see "Searching in forks." Tips: For a list of search syntaxes that you can add to any search qualifier to further improve your results, see "Understanding the search syntax". Use quotations around multi-word search terms. For example, if you want to search for issues with the label "In progress," you'd search for label:"in progress". Search is not case sensitive. Scope the search fields The in qualifier limits what fields are searched. With this qualifier you can restrict the search to just the repository name, description, README, or any combination of these. Without the qualifier, only the name and description are searched. Qualifier Example in:name jquery in:name matches repositories with "jquery" in their name. in:description jquery in:name,description matches repositories with "jquery" in their name or description. in:readme jquery in:readme matches repositories mentioning "jquery" in their README file. Search based on the size of a repository The size qualifier finds repositories that match a certain size (in kilobytes), using greater than, less than, and range qualifiers. Qualifier Example size:n size:1000 matches repositories that are 1 MB exactly. size:>=30000 matches repositories that are at least 30 MB. size:<50 matches repositories that are smaller than 50 KB. size:50..120 matches repositories that are between 50 KB and 120 KB. Search based on whether a repository is private or public You can filter your search based on whether a repository is private or public. Qualifier Example is:private is:private pages matches private repositories you have access to and that contain the word "pages." is:public is:public org:github matches repositories owned by GitHub that are public. Search based on whether a repository is a mirror You can search repositories based on whether or not they're a mirror and are hosted elsewhere. Qualifier Example mirror:true mirror:true GNOME matches repositories that are mirrors and contain the word "GNOME." mirror:false mirror:false GNOME matches repositories that are not mirrors and contain the word "GNOME." Search based on whether a repository is archived You can search repositories based on whether or not they're archived. Qualifier Example archived:true archived:true GNOME matches repositories that are archived and contain the word "GNOME." archived:false archived:false GNOME matches repositories that are not archived and contain the word "GNOME." Search based on the number of forks The forks qualifier specifies the number of forks a repository should have, using greater than, less than, and range qualifiers. Qualifier Example forks:n forks:5 matches repositories with only five forks. forks:>=205 matches repositories with at least 205 forks. forks:<90 matches repositories with fewer than 90 forks. forks:10..20 matches repositories with 10 to 20 forks. Search based on when a repository was created or last updated You can filter repositories based on time of creation or time of last update. For repository creation, you can use the created qualifier; to find out when a repository was last updated, you'll want to use the pushed qualifier. The pushed qualifier will return a list of repositories, sorted by the most recent commit made on any branch in the repository. Both take a date as a parameter. Date formatting must follow the ISO8601 standard, which is YYYY-MM-DD (year-month-day). You can also add optional time information THH:MM:SS+00:00 after the date, to search by the hour, minute, and second. That's T, followed by HH:MM:SS (hour-minutes-seconds), and a UTC offset (+00:00). Dates support greater than, less than, and range qualifiers. Qualifier Example created:YYYY-MM-DD webos created:<2011-01-01 matches repositories with the word "webos" that were created before 2011. pushed:YYYY-MM-DD css pushed:>2013-02-01 matches repositories with the word "css" that were pushed to after January 2013. case pushed:>=2013-03-06 fork:only matches repositories with the word "case" that were pushed to on or after March 6th, 2013, and that are forks. Search within a user's or organization's repositories To grab a list of a user's or organization's repositories, you can use the user or org qualifier. Qualifier Example user:USERNAME user:defunkt forks:>100 matches repositories from @defunkt that have more than 100 forks. org:ORGNAME org:github matches repositories from GitHub. Search by repository topic You can find all of the repositories that are classified with a particular topic. Qualifier Example topic:TOPIC topic:jekyll matches repositories that have been classified with the topic "jekyll." Search based on the number of topics a repository has You can find repositories by the number of applied topics, using the topics qualifier along with greater than, less than, and range qualifiers. Qualifier Example topics:n topics:5 matches repositories that have five topics. topics:>3 matches repositories that have more than three topics. Search by license You can search repositories by their license. You must use a license keyword to filter repositories by a particular license or license family. Qualifier Example license:LICENSE_KEYWORD license:apache-2.0 matches repositories that are licensed under Apache License 2.0. Search based on the main language of a repository You can also search repositories based on what language they're written in. Qualifier Example language:LANGUAGE rails language:javascript matches repositories with the word "rails" that are written in JavaScript. Search based on the number of stars a repository has You can search repositories based on the number of stars a repository has, using greater than, less than, and range qualifiers Qualifier Example stars:n stars:500 matches repositories with exactly 500 stars. stars:10..20 matches repositories 10 to 20 stars, that are smaller than 1000 KB. stars:>=500 fork:true language:php matches repositories with the at least 500 stars, including forked ones, that are written in PHP. Further reading "Sorting search results" "Searching in forks" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Searching code - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Searching for information on GitHub / Searching code Searching code mac windows linux all You can search for code by using search qualifiers in any combination to narrow your search results. Code in forks is only searchable if the fork has more stars than the parent repository. To include forks with more stars than their parent in the search results, you will need to add fork:true or fork:only to your query. For more information, see "Searching in forks." Tips: For a list of search syntaxes that you can add to any search qualifier to further improve your results, see "Understanding the search syntax". Use quotations around multi-word search terms. For example, if you want to search for issues with the label "In progress," you'd search for label:"in progress". Search is not case sensitive. Note: You must be logged in to search for code across all public repositories. Considerations for code search Due to the complexity of searching code, there are a few restrictions on how searches are performed: Only the default branch is indexed for code search. In most cases, this will be the master branch. Forks with fewer stars than the parent repository are not indexed for code search. For more information, see "Searching in forks." Only files smaller than 384 KB are searchable. Only repositories with fewer than 500,000 files are searchable. Logged in users can search all public repositories while anonymous searches must include a limit on org:, user:, or repo:. Except with filename searches, you must always include at least one search term when searching source code. For example, searching for language:javascript is not valid, while amazing language:javascript is. At most, search results can show two fragments from the same file, but there may be more results within the file. You can't use the following wildcard characters as part of your search query: . , : ; / \ ` ' " = * ! ? # $ & + ^ | ~ < > ( ) { } [ ]. The search will simply ignore these symbols. Scope the search fields The in qualifier limits what fields are searched. With this qualifier, you can restrict your search to the source code, the file path, or both. Without the qualifier, only the file contents are searched. Qualifier Example in:file octocat in:file matches code where "octocat" appears in the file contents. in:path octocat in:path matches code where "octocat" appears in the path name. octocat in:file,path matches code where "octocat" appears in the file contents or the path name. Search by language You can search for code based on what language it's written in. Qualifier Example language:LANGUAGE element language:xml size:100 matches code with the word "element" that's marked as being XML and has exactly 100 bytes. display language:scss matches code with the word "display," that's marked as being SCSS. org:mozilla language:markdown matches code from all @mozilla's repositories that's marked as Markdown. Search by the source code file size The size qualifier uses greater than, less than, and range qualifiers to filter results based on the byte size of the file in which the code is found. Qualifier Example size:n function size:>10000 language:python matches code with the word "function," written in Python, in files that are larger than 10 KB. Search by the location of a file within the repository By including the path qualifier, you specify that resulting source code must appear at a specific location in a repository. Subfolders are considered during the search, so be as specific as possible. You can also use path:/ to restrict the search results to the root level of the project. Qualifier Example path:PATH/TO/DIRECTORY console path:app/public language:javascript matches JavaScript files with the word "console" in an app/public directory or its subdirectories (even if they reside in app/public/js/form-validators). path:DIRECTORY form path:cgi-bin language:perl matches Perl files with the word "form" in a cgi-bin directory. path:/ octocat filename:readme path:/ matches files named readme with the word "octocat" located at the root level of a repository. Search by filename You can use the filename qualifier if there's a specific file you're looking for. Qualifier Example filename:FILENAME filename:linguist matches files named "linguist." filename:.vimrc commands matches .vimrc files with the word "commands." filename:test_helper path:test language:ruby matches Ruby files named test_helper within the test directory. Search by the file extension The extension qualifier matches code files with a certain file extension. Qualifier Example extension:EXTENSION form path:cgi-bin extension:pm matches code with the word "form," under cgi-bin, with the .pm file extension. icon size:>200000 extension:css matches files larger than 200 KB that end in .css and have the word "icon." Search within a user's or organization's repositories To grab a list of code from all repositories owned by a certain user or organization, you can use the user or org qualifier. For getting a list of code from a specific repository, you can use the repo qualifier. Qualifier Example user:USERNAME user:defunkt extension:rb matches code from @defunkt that ends in .rb. org:ORGNAME org:github extension:js matches code from GitHub that ends in .js. repo:USERNAME/REPOSITORY repo:mozilla/shumway extension:as matches code from @mozilla's shumway project that ends in .as. Further reading "Sorting search results" "Searching in forks" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Searching commits - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Searching for information on GitHub / Searching commits Searching commits mac windows linux all You can search commits by using search qualifiers in any combination to narrow your search results. Tips: For a list of search syntaxes that you can add to any search qualifier to further improve your results, see "Understanding the search syntax". Use quotations around multi-word search terms. For example, if you want to search for issues with the label "In progress," you'd search for label:"in progress". Search is not case sensitive. Note: When you search for commits, only the default branch of a repository is searched. In most cases, this will be the master branch. Search within commit messages You can find commits that contain particular words in the message. For example, fix typo matches commits containing the words "fix" and "typo." Search by author or committer You can find commits by a particular user with the author or committer qualifiers. Qualifier Example author:USERNAME author:defunkt matches commits authored by @defunkt. committer:USERNAME committer:defunkt matches commits committed by @defunkt. The author-name and committer-name qualifiers match commits by the name of the author or committer. Qualifier Example author-name:NAME author-name:wanstrath matches commits with "wanstrath" in the author name. committer-name:NAME committer-name:wanstrath matches commits with "wanstrath" in the committer name. The author-email and committer-email qualifiers match commits by the author's or committer's full email address. Qualifier Example author-email:EMAIL author-email:chris@github.com matches commits authored by chris@github.com. committer-email:EMAIL committer-email:chris@github.com matches commits committed by chris@github.com. Search within a user or organization's repositories To find commits from all repositories owned by a certain user or organization, use the user or org qualifier. To find commits from a specific repository, use the repo qualifier. Qualifier Example user:USERNAME gibberish user:defunkt matches commit messages with the word "gibberish" in repositories owned by @defunkt. org:ORGNAME test org:github matches commit messages with the word "test" in repositories owned by @github. repo:USERNAME/REPO language repo:defunkt/gibberish matches commit messages with the word "language" in @defunkt's "gibberish" repository. Search by authored or committed date Use the author-date and committer-date qualifiers to match commits authored or committed within the specified date range. Dates support greater than, less than, and range qualifiers. Qualifier Example author-date:YYYY-MM-DD author-date:<2016-01-01 matches commits authored before 2016-01-01. committer-date:YYYY-MM-DD committer-date:>2016-01-01 matches commits committed after 2016-01-01. Filter merge commits The merge qualifier filters merge commits. Qualifier Example merge:true merge:true matches merge commits. merge:false merge:false matches non-merge commits. Search by hash The hash qualifier matches commits with the specified SHA-1 hash. Qualifier Example hash:HASH hash:124a9a0ee1d8f1e15e833aff432fbb3b02632105 matches commits with the hash 124a9a0ee1d8f1e15e833aff432fbb3b02632105. Search by parent The parent qualifier matches commits whose parent has the specified SHA-1 hash. Qualifier Example parent:HASH parent:124a9a0ee1d8f1e15e833aff432fbb3b02632105 matches children of commits with the hash 124a9a0ee1d8f1e15e833aff432fbb3b02632105. Search by tree The tree qualifier matches commits with the specified SHA-1 git tree hash. Qualifier Example tree:HASH tree:99ca967 matches commits that refer to the tree hash 99ca967. Filter public or private repositories The is qualifier matches public or private commits. Qualifier Example is:public is:public matches public commits. is:private is:private matches private commits. Further reading "Sorting search results" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Searching issues and pull requests - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Searching for information on GitHub / Searching issues and pull requests Searching issues and pull requests mac windows linux all You can search issues and pull requests by using search qualifiers in any combination to narrow your search results. Tips: For a list of search syntaxes that you can add to any search qualifier to further improve your results, see "Understanding the search syntax". Use quotations around multi-word search terms. For example, if you want to search for issues with the label "In progress," you'd search for label:"in progress". Search is not case sensitive. Search issues or pull requests By default, GitHub search will return both issues and pull requests. However, you can restrict search results to just issues or pull requests using the type or is qualifier. Qualifier Example type:pr cat type:pr matches pull requests with the word "cat." type:issue github commenter:defunkt type:issue matches issues that contain the word "github," and have a comment by @defunkt. is:pr event is:pr matches pull requests with the word "event." is:issue is:issue label:bug is:closed matches closed issues with the label "bug." Scope the search fields The in qualifier limits what fields are searched. With this qualifier you can restrict the search to just the title, body, comments, or any combination of these. Without the qualifier, the title, body, and comments are searched. Qualifier Example in:title warning in:title matches issues with "warning" in their title. in:body error in:title,body matches issues with "error" in their title or body. in:comments shipit in:comments matches issues mentioning "shipit" in their comments. Search inside public and private repositories If you're searching across all of GitHub, it can be helpful to filter your results based on whether the repository is public or private. You can do this with is:private and is:public. Qualifier Example is:public is:public matches issues and pull requests in all public repositories. is:private is:private cupcake matches issues and pull requests that contain the word "cupcake" in private repositories you have access to. Search within archived repositories The archived qualifier filters your results based on whether an issue or pull request is in an archived repository. Qualifier Example archived:true archived:true GNOME matches issues and pull requests that contain the word "GNOME" in archived repositories you have access to. archived:false archived:false GNOME matches issues and pull requests that contain the word "GNOME" in unarchived repositories you have access to. Search by the author of an issue or pull request The author qualifier finds issues and pull requests created by a certain user or integration account. Qualifier Example author:USERNAME cool author:gjtorikian matches issues and pull requests with the word "cool" that were created by @gjtorikian. bootstrap in:body author:mdo matches issues written by @mdo that contain the word "bootstrap" in the body. author:app/USERNAME author:app/robot matches issues created by the integration account named "robot." Search by the assignee of an issue or pull request The assignee qualifier finds issues and pull requests that are assigned to a certain user. You cannot search for issues and pull requests that have any assignee, however, you can search for issues and pull requests that have no assignee. Qualifier Example assignee:USERNAME assignee:vmg repo:libgit2/libgit2 matches issues and pull requests in libgit2's project libgit2 that are assigned to @vmg. Search by a mentioned user within an issue or pull request The mentions qualifier finds issues that mention a certain user. Qualifier Example mentions:USERNAME resque mentions:defunkt matches issues with the word "resque" that mention @defunkt. Search by a commenter within an issue or pull request The commenter qualifier finds issues that contain a comment from a certain user. Qualifier Example commenter:USERNAME github commenter:defunkt org:github matches issues in repositories owned by GitHub, that contain the word "github," and have a comment by @defunkt. Search by a user that's involved within an issue or pull request You can use the involves qualifier for finding issues that in some way involve a certain user. The involves qualifier is just a logical OR between the author, assignee, mentions and commenter qualifiers for the same user. In other words, this qualifier finds issues that were either created by a certain user, assigned to that user, mention that user, or were commented on by that user. Qualifier Example involves:USERNAME involves:defunkt involves:jlord matches issues either @defunkt or @jlord are involved in. NOT bootstrap in:body involves:mdo matches issues @mdo is involved in that do not contain the word "bootstrap" in the body. Search by a team that's mentioned within an issue or pull request For organizations and teams you belong to, you can use the team qualifier to find issues or pull requests that @mention a certain team within that organization. Replace these sample names with your organization and team name to perform a search. Qualifier Example team:ORGNAME/TEAMNAME team:jekyll/owners matches issues where the @jekyll/owners team is mentioned. team:myorg/ops is:open is:pr matches open pull requests where the @myorg/ops team is mentioned. Search based on whether an issue or pull request is open or closed You can filter issues and pull requests based on whether they're open or closed using the state or is qualifier. Qualifier Example state:open libraries state:open mentions:vmg matches open issues that mention @vmg with the word "libraries." state:closed design state:closed in:body matches closed issues with the word "design" in the body. is:open performance is:open is:issue matches open issues with the word "performance." is:closed android is:closed matches closed issues and pull requests with the word "android." Search by the labels on an issue You can narrow your results by labels, using the label qualifier. Since issues can have multiple labels, you can list a separate qualifier for each issue. Qualifier Example label:LABEL label:"help wanted" language:ruby matches issues with the label "help wanted" that are in Ruby repositories. broken in:body -label:bug label:priority matches issues with the word "broken" in the body, that lack the label "bug", but do have the label "priority." label:bug label:resolved matches issues with the labels "bug" and "resolved." Search by milestone on an issue or pull request The milestone qualifier finds issues or pull requests that are a part of a milestone within a repository. Qualifier Example milestone:MILESTONE milestone:"overhaul" matches issues that are in a milestone named "overhaul." milestone:"bug fix" matches issues that are in a milestone named "bug fix." Search by project board You can use the project qualifier to find issues that are associated with a specific project board in a repository or organization. You must search project boards by the project board number. You can find the project board number at the end of a project board's URL. Qualifier Example project:PROJECT_BOARD project:github/57 matches issues owned by GitHub that are associated with the organization's project board 57. project:REPOSITORY/PROJECT_BOARD project:github/linguist/1 matches issues that are associated with project board 1 in @github's linguist repository. Search by missing metadata on an issue or pull request You can scope issues and pull requests to those missing certain metadata using the no qualifier. That metadata includes: Labels Milestones Assignees Projects Qualifier Example no:label priority no:label matches issues and pull requests with the word "priority" that also don't have any labels. no:milestone sprint no:milestone type:issue matches issues not associated with a milestone containing the word "sprint." no:assignee important no:assignee language:java type:issue matches issues not associated with an assignee, containing the word "important," and in Java repositories. no:project build no:project matches issues not associated with a project board, containing the word "build." Search by the main language of a repository You can choose to search for issues within repositories that match a certain language with the language qualifiers. Qualifier Example language:LANGUAGE language:ruby state:open matches open issues that are in Ruby repositories. Search based on commit status You can filter pull requests based on the status of the commits. This is especially useful if you are using the Status API or a CI service. Qualifier Example status:pending language:go status:pending matches pull requests opened into Go repositories where the status is pending. status:success is:open status:success finally in:body matches open pull requests with the word "finally" in the body with a successful status. status:failure created:2015-05-01..2015-05-30 status:failure matches pull requests opened on May 2015 with a failed status. Search based on branch names You can filter pull requests based on the branch they came from (the "head" branch) or the branch they are merging into (the "base" branch). Qualifier Example head:HEAD_BRANCH head:change is:closed is:unmerged matches pull requests opened from branch names containing the word "change" that are closed. base:BASE_BRANCH base:gh-pages matches pull requests that are being merged into the gh-pages branch. Search based on when an issue or pull request was created or last updated You can filter issues based on times of creation, or when they were last updated. For issue creation, you can use the created qualifier; to find out when an issue was last updated, you'll want to use the updated qualifier. Both take a date as a parameter. Date formatting must follow the ISO8601 standard, which is YYYY-MM-DD (year-month-day). You can also add optional time information THH:MM:SS+00:00 after the date, to search by the hour, minute, and second. That's T, followed by HH:MM:SS (hour-minutes-seconds), and a UTC offset (+00:00). Dates support greater than, less than, and range qualifiers. Qualifier Example created:YYYY-MM-DD language:c# created:<2011-01-01 state:open matches open issues that were created before 2011 in repositories written in C#. updated:YYYY-MM-DD weird in:body updated:>=2013-02-01 matches issues with the word "weird" in the body that were updated after February 2013. Search based on whether a pull request is merged or unmerged You can filter pull requests based on whether they're merged or unmerged using the is qualifier. Qualifier Example is:merged bugfix is:pr is:merged matches merged pull requests with the word "bugfix." is:unmerged error is:unmerged matches closed issues and pull requests with the word "error." Search based on when a pull request was merged You can filter pull requests based on when they were merged, using the merged qualifier. This qualifier takes a date as its parameter. Date formatting must follow the ISO8601 standard, which is YYYY-MM-DD (year-month-day). You can also add optional time information THH:MM:SS+00:00 after the date, to search by the hour, minute, and second. That's T, followed by HH:MM:SS (hour-minutes-seconds), and a UTC offset (+00:00). Dates support greater than, less than, and range qualifiers. Qualifier Example merged:YYYY-MM-DD language:javascript merged:<2011-01-01 matches pull requests in JavaScript repositories that were merged before 2011. fast in:title language:ruby merged:>=2014-05-01 matches pull requests in Ruby with the word "fast" in the title that were merged after May 2014. Search based on when an issue or pull request was closed You can filter issues and pull requests based on when they were closed, using the closed qualifier. This qualifier takes a date as its parameter. Date formatting must follow the ISO8601 standard, which is YYYY-MM-DD (year-month-day). You can also add optional time information THH:MM:SS+00:00 after the date, to search by the hour, minute, and second. That's T, followed by HH:MM:SS (hour-minutes-seconds), and a UTC offset (+00:00). Dates support greater than, less than, and range qualifiers. Qualifier Example closed:YYYY-MM-DD language:swift closed:>2014-06-11 matches issues and pull requests in Swift that were closed after June 11, 2014. data in:body closed:<2012-10-01 matches issues and pull requests with the word "data" in the body that were closed before October 2012. Search by the number of comments an issue or pull request has You can use the comments qualifier along with greater than, less than, and range qualifiers to search by the number of comments. Qualifier Example comments:n state:closed comments:>100 matches closed issues with more than 100 comments. comments:500..1000 matches issues with comments ranging from 500 to 1,000. Search within a user's or organization's repositories To grab a list of issues from all repositories owned by a certain user or organization, you can use the user or org qualifier. For getting a list of issues from a specific repository, you can use the repo qualifier. Qualifier Example user:USERNAME user:defunkt ubuntu matches issues with the word "ubuntu" from repositories owned by @defunkt. org:ORGNAME org:github matches issues in repositories owned by the GitHub organization. repo:USERNAME/REPOSITORY repo:mozilla/shumway created:<2012-03-01 matches issues from @mozilla's shumway project that were created before March 2012. Search by the commit SHAs within a pull request If you know the specific SHA hash of a commit, you can use it to search for pull requests that contain that SHA. The SHA syntax must be at least seven characters. Qualifier Example SHA e1109ab matches pull requests with a commit SHA that starts with e1109ab. 0eff326d6213c is:merged matches merged pull requests with a commit SHA that starts with 0eff326d6213c. Search pull requests by review status You can filter pull requests based on their review status (none, required, approved, changes requested, or required), by reviewer, and by requested reviewer. Qualifier Example review:none type:pr review:none matches pull requests that have not been reviewed. review:required type:pr review:required matches pull requests that require a review before they can be merged. review:approved type:pr review:approved matches pull requests that a reviewer has approved. review:changes_requested type:pr review:changes_requested matches pull requests in which a reviewer has asked for changes. reviewed-by:USERNAME type:pr reviewed-by:gjtorikian matches pull requests reviewed by a particular person. review-requested:USERNAME type:pr review-requested:benbalter matches pull requests where a specific person is requested for review. Requested reviewers are no longer listed in the search results after they review a pull request. If the requested person is on a team that is requested for review, then review requests for that team will also appear in the search results. team-review-requested:TEAMNAME type:pr review-requested:atom/design matches pull requests that have review requests from the team atom/design. Requested reviewers are no longer listed in the search results after they review a pull request. Further reading "Sorting search results" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Searching users - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Searching for information on GitHub / Searching users Searching users mac windows linux all You can search for users by using search qualifiers in any combination to narrow your search results. Tips: For a list of search syntaxes that you can add to any search qualifier to further improve your results, see "Understanding the search syntax". Use quotations around multi-word search terms. For example, if you want to search for issues with the label "In progress," you'd search for label:"in progress". Search is not case sensitive. Search for users or organizations By default, searching users will return both personal and organizations. However, you can use the type qualifier to restrict search results to personal accounts or organizations only. Qualifier Example type:user mike in:name created:<2011-01-01 type:user matches personal accounts named "mike" that were created before 2011. type:org data in:email type:org matches organizations with the word "data" in their email. Scope the search fields The in qualifier limits what fields are searched. With this qualifier you can restrict the search to the username, public email, full name, or any combination of these. Without the qualifier, only the username and email address are searched. For privacy reasons, you cannot search by email domain name. Qualifier Example in:login kenya in:login matches users with the word "kenya" in their username. in:fullname bolton in:fullname matches users whose real name contains the word "bolton." in:email data in:email matches users with the word "data" in their email. Search based on the number of repositories a user has You can filter users based on the number of repositories they have, using the repos qualifier and greater than, less than, and range qualifiers. Qualifier Example repos:n repos:>9000 matches users whose repository count is over 9,000. bert repos:10..30 matches users with the word "bert" in their username or real name who own 10 to 30 repositories. Search based on the location where a user resides You can choose to filter users by the location indicated in their profile. Qualifier Example location:LOCATION repos:1 location:iceland matches users with exactly one repository that live in Iceland. Search based on the languages of a user's repositories You can search for users that own repositories that match a certain language via the language qualifiers. Qualifier Example language:LANGUAGE language:javascript location:russia matches users in Russia with a majority of their repositories written in JavaScript. jenny language:javascript in:fullname matches users with JavaScript repositories whose full name contains the word "jenny." Search based on when a user joined GitHub You can filter users based on when they joined with the created qualifier. This takes a date as its parameter. Date formatting must follow the ISO8601 standard, which is YYYY-MM-DD (year-month-day). You can also add optional time information THH:MM:SS+00:00 after the date, to search by the hour, minute, and second. That's T, followed by HH:MM:SS (hour-minutes-seconds), and a UTC offset (+00:00). Dates support greater than, less than, and range qualifiers. Qualifier Example created:YYYY-MM-DD created:<2011-01-01 matches users that joined before 2011. created:>=2013-05-11 matches users that joined at or after May 11th, 2013. created:2013-03-06 location:london matches users that joined on March 6th, 2013, who list their location as London. created:2010-01-01..2011-01-01 john in:login matches users that joined between 2010 and 2011 with the word "john" in their username. Search based on the number of followers a user has You can filter users based on the number of followers that they have, using the followers qualifier with greater than, less than, and range qualifiers. Qualifier Example followers:n followers:>=1000 matches users with 1,000 or more followers. sparkle followers:1..10 matches users with between 1 and 10 followers, with the word "sparkle" in their name. Further reading "Sorting search results" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Searching wikis - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Searching for information on GitHub / Searching wikis Searching wikis mac windows linux all You can search wikis by using search qualifiers in any combination to narrow your search results. Tips: For a list of search syntaxes that you can add to any search qualifier to further improve your results, see "Understanding the search syntax". Use quotations around multi-word search terms. For example, if you want to search for issues with the label "In progress," you'd search for label:"in progress". Search is not case sensitive. Search within a user or organization's repositories To find wiki pages from all repositories owned by a certain user or organization, use the user or org qualifier. To find wiki pages from a specific repository, use the repo qualifier. Qualifier Example user:USERNAME user:defunkt matches wiki pages from repositories owned by @defunkt. org:ORGNAME org:github matches wikis in repositories owned by the GitHub organization. repo:USERNAME/REPOSITORY repo:defunkt/gibberish matches wiki pages from @defunkt's "gibberish" repository. Search within a wiki page title or body text The in qualifier limits the search to the wiki page title or body text. Without the qualifier, both the title and body text are searched. Qualifier Example in:title usage in:title matches wiki page titles with the word "usage." in:body installation in:body matches wiki pages with the word "installation" in their main body text. Search by last updated date The updated qualifier matches wiki pages that were last updated within the specified date range. Dates support greater than, less than, and range qualifiers. Qualifier Example updated:YYYY-MM-DD usage updated:>2016-01-01 matches wiki pages with the word "usage" that were last updated after 2016-01-01. Further reading "Sorting search results" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Searching in forks - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Searching for information on GitHub / Searching in forks Searching in forks mac windows linux all By default, forks are not shown in search results. You can choose to include them in repository searches, and in code searches if they meet certain criteria. To show forks in repository search results, add fork:true or fork:only to your query. Forks are only indexed for code search when they have more stars than the parent repository. You will not be able to search the code in a fork that has less stars than its parent. To show forks with more stars than the parent repository in code search results, add fork:true or fork:only to your query. The fork:true qualifier finds all results that match your search query, including forks. The fork:only qualifier finds only forks that match your search query. Qualifier Example fork:true github fork:true matches all repositories containing the word "github," including forks. android language:java fork:true matches code with the word "android" that's written in Java, in both forks and regular repositories. fork:only github fork:only matches all fork repositories containing the word "github." forks:>500 fork:only matches repositories with more than 500 forks, and only returns those that are forks. Further reading "About forks" "About searching on GitHub" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Using keyboard shortcuts - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Keyboard Shortcuts / Using keyboard shortcuts Using keyboard shortcuts mac windows linux all Nearly every page on GitHub has a keyboard shortcut to perform actions faster. Typing ? in GitHub brings up a dialog box that lists the keyboard shortcuts available for that page. You can use these keyboard shortcuts to perform actions across the site without using your mouse to navigate. Below is a list of some of the available keyboard shortcuts. Site wide shortcuts Keyboard Shortcut Description s Focus the search bar g n Go to your notifications Repositories Keyboard Shortcut Description g c Go to the Code tab g i Go to the Issues tab g p Go to the Pull requests tab g b Go to the Projects tab g w Go to the Wiki tab Source code editing Keyboard Shortcut Description control f or command f Start searching in file editor control g or command g Find next shift control g or shift command g Find previous shift control f or command option f Replace shift control r or shift command option f Replace all alt g Jump to line control z or command z Undo control y or command y Redo For more keyboard shortcuts, see the CodeMirror documentation. Source code browsing Keyboard Shortcut Description t Activates the file finder l Jump to a line in your code w Switch to a new branch or tag y Expand a URL to its canonical form i Show or hide comments on diffs b Open blame view Comments Keyboard Shortcut Description control b or command b Inserts Markdown formatting for bolding text control i or command i Inserts Markdown formatting for italicizing text control k or command k Inserts Markdown formatting for creating a link control shift p or command shift p Toggles between the Write and Preview comment tabs control enter Submits a comment Issue and pull request lists Keyboard Shortcut Description c Create an issue / Focus the issues search bar u Filter by author l Filter by or edit labels m Filter by or edit milestones a Filter by or edit assignee r Quote the selected text in your reply o or enter Open issue Issues and pull requests Keyboard Shortcut Description q Request a reviewer m Set a milestone l Apply a label a Set an assignee Changes in pull requests Keyboard Shortcut Description c Open the list of commits in the pull request t Open the list of changed files in the pull request j Move selection down in the list k Move selection up in the list Project boards Moving a column Keyboard Shortcut Description enter or space Start moving the focused column escape Cancel the move in progress enter Complete the move in progress ← or h Move column to the left command ← or command h or control ← or control h Move column to the leftmost position → or l Move column to the right command → or command l or control → or control l Move column to the rightmost position Moving a card Keyboard Shortcut Description enter or space Start moving the focused card escape Cancel the move in progress enter Complete the move in progress ↓ or j Move card down command ↓ or command j or control ↓ or control j Move card to the bottom of the column ↑ or k Move card up command ↑ or command k or control ↑ or control k Move card to the top of the column ← or h Move card to the bottom of the column on the left shift ← or shift h Move card to the top of the column on the left command ← or command h or control ← or control h Move card to the bottom of the leftmost column command shift ← or command shift h or control shift ← or control shift h Move card to the top of the leftmost column → Move card to the bottom of the column on the right shift → or shift l Move card to the top of the column on the right command → or command l or control → or control l Move card to the bottom of the rightmost column command shift → or command shift l or control shift → or control shift l Move card to the bottom of the rightmost column Notifications Keyboard Shortcut Description e or I or y Mark as read shift m Mute thread Network Graph Keyboard Shortcut Description ← or h Scroll left → or l Scroll right ↑ or k Scroll up ↓ or j Scroll down shift ← or shift h Scroll all the way left shift → or shift l Scroll all the way right shift ↑ or shift k Scroll all the way up shift ↓ or shift j Scroll all the way down Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support About pull requests - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Collaborating with issues and pull requests / About pull requests About pull requests mac windows linux all Pull requests let you tell others about changes you've pushed to a repository on GitHub. Once a pull request is opened, you can discuss and review the potential changes with collaborators and add follow-up commits before the changes are merged into the repository. Note: When working with pull requests, keep the following in mind: If you're working in the shared repository model, we recommend that you use a topic branch for your pull request. While you can send pull requests from any branch or commit, with a topic branch you can push follow-up commits if you need to update your proposed changes. When pushing commits to a pull request, don't force push. Force pushing can corrupt your pull request. After initializing a pull request, you'll see a review page that shows a high-level overview of the changes between your branch (the compare branch) and the repository's base branch. You can add a summary of the proposed changes, review the changes made by commits, add labels, milestones, and assignees, and @mention individual contributors or teams. For more information, see "Creating a pull request." Once you've created a pull request, you can push commits from your topic branch to add them to your existing pull request. These commits will appear in chronological order within your pull request and the changes will be visible in the "Files changed" tab. Other contributors can review your proposed changes, add review comments, contribute to the pull request discussion, and even add commits to the pull request. After you're happy with the proposed changes, you can merge the pull request. If you're working in a shared repository model, the proposed changes will be merged from the head branch to the base branch that was specified in the pull request. You can close corresponding issues using a keyword in your pull request or commit message. For more information, see "Closing issues using keywords." Tip: You can squash commits when merging a pull request to gain a more streamlined view of changes. For more information, see "About pull request merges." Further reading "Commenting on a pull request" "Merging a pull request" "Closing a pull request" "Deleting unused branches" "About pull request merges" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support GitHub flow - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Collaborating with issues and pull requests / GitHub flow GitHub flow mac windows linux all At GitHub, we use our products every day and have developed a workflow to collaborate on projects. To make it work for teams regardless of their size or technical expertise, we made sure each step in our workflow can be completed within a web-based interface. Following the GitHub flow Create a branch from the repository. Create, edit, rename, move, or delete files. Send a pull request from your branch with your proposed changes to kick off a discussion. Make changes on your branch as needed. Your pull request will update automatically. Merge the pull request once the branch is ready to be merged. Tidy up your branches using the delete button in the pull request or on the branches page. Further reading The illustrated guide to "Understanding the GitHub Flow" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support About collaborative development models - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Collaborating with issues and pull requests / About collaborative development models About collaborative development models mac windows linux all The way you use pull requests depends on the type of development model you use in your project. There are two main types of development models with which you'd use pull requests. In the fork and pull model, anyone can fork an existing repository and push changes to their personal fork without needing access to the source repository. The changes can be pulled into the source repository by the project maintainer. When you open a pull request proposing changes from your fork's branch to a branch in the source (upstream) repository, you can allow anyone with push access to the upstream repository to make changes to your pull request. This model is popular with open source projects as it reduces the amount of friction for new contributors and allows people to work independently without upfront coordination. Tip: For more information on open source, specifically how to create and grow an open source project, we've created Open Source Guides that will help you foster a healthy open source community. In the shared repository model, collaborators are granted push access to a single shared repository and topic branches are created when changes need to be made. Pull requests are useful in this model as they initiate code review and general discussion about a set of changes before the changes are merged into the main development branch. This model is more prevalent with small teams and organizations collaborating on private projects. Further reading "About pull requests" "Creating a pull request from a fork" "Allowing changes to a pull request branch created from a fork" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support About conversations on GitHub - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Collaborating with issues and pull requests / About conversations on GitHub About conversations on GitHub mac windows linux all You can discuss specific projects and changes, as well as broader projects or team goals, using different types of discussions on GitHub. Discussions on GitHub You can create and participate in issues, pull requests, and team discussions, depending on the type of conversation you'd like to have. Issues are useful for discussing specific details of a project such as bug reports and planned improvements. For more information, see "About issues." Pull requests allow you to comment directly on proposed changes. For more information, see "About pull requests" and "Commenting on a pull request." On your team's page, you can use team discussions for conversations that span across projects or repositories and don't belong in a specific issue or pull request. Instead of opening an issue in a repository to discuss an idea, you can include the entire team by having a conversation in a team discussion. For more information, see "About team discussions." Reacting to ideas in comments You can show your support or dissent for an idea a conversation. When you add a reaction to a comment or the body of a team discussion, issue, or pull request, people subscribed to the conversation won't receive a notification. Following contribution guidelines Before you open an issue or pull request, check to see if the repository has contributing guidelines. The CONTRIBUTING.md file includes information about how the repository maintainer would like you to contribute ideas to the project. Similar to contributing guidelines, the repository maintainer may have included a template for information to include in an issue or pull request. Completing the prompts from the template may help you get a better response from maintainers. Further reading "Helping people contribute to your project" "Moderating comments and conversations" "Writing on GitHub" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Working with forks - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Collaborating with issues and pull requests / Working with forks Working with forks mac windows linux all Forks are often used in open source development on GitHub. About forks A fork is a copy of a repository that you manage. Forks let you make changes to a project without affecting the original repository. You can fetch updates from or submit changes to the original repository with pull requests. Syncing a fork Sync a fork of a repository to keep it up-to-date with the upstream repository. Configuring a remote for a fork You must configure a remote that points to the upstream repository in Git to sync changes you make in a fork with the original repository. This also allows you to sync changes made in the original repository with the fork. Merging an upstream repository into your fork If you don't have push (write) access to an upstream repository, then you can pull commits from that repository into your own fork. Allowing changes to a pull request branch created from a fork For greater collaboration, you can allow commits on branches you've created from forks. Permission to commit to your forked branches is limited to those with push access to the upstream repository of the fork. What happens to forks when a repository is deleted or changes visibility? This article explains how deleting your repository or changing its visibility affects that repository's forks. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support About forks - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Collaborating with issues and pull requests / About forks About forks mac windows linux all A fork is a copy of a repository that you manage. Forks let you make changes to a project without affecting the original repository. You can fetch updates from or submit changes to the original repository with pull requests. Any user or organization on GitHub can fork a repository. Forking a repository is similar to copying another repository, with two major differences: You can use a pull request to suggest changes from your fork to the original repository, also known as the upstream repository. You can bring changes from the upstream repository to your local fork by synchronizing your fork with the upstream repository. Deleting a fork does not delete the original upstream repository. In fact, you can make any changes you want to your fork--add collaborators, rename files, generate GitHub Pages--with no effect on the original. In open source projects, forks are often used to iterate on ideas or changes before they are offered back to the upstream repository for everyone to benefit from. When you make changes in your fork and open a pull request that compares your work to the upstream repository, you can give anyone with push access to the upstream repository permission to push changes to your pull request branch. This speeds up collaboration by allowing repository maintainers the ability to make commits or run tests locally to your pull request branch from a fork before merging. Private forks inherit the permissions structure of the upstream or parent repository. For example, if the upstream repository is private and gives read/write access to a team, then the same team will have read/write access to any forks of the private upstream repository. This helps owners of private repositories maintain control over their code. Further reading "About collaborative development models" "Creating a pull request from a fork" Open Source Guides Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Configuring a remote for a fork - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Collaborating with issues and pull requests / Configuring a remote for a fork Configuring a remote for a fork mac windows linux all You must configure a remote that points to the upstream repository in Git to sync changes you make in a fork with the original repository. This also allows you to sync changes made in the original repository with the fork. Open TerminalTerminalGit Bash. List the current configured remote repository for your fork. git remote -v origin https://github.com/YOUR_USERNAME/YOUR_FORK.git (fetch) origin https://github.com/YOUR_USERNAME/YOUR_FORK.git (push) Specify a new remote upstream repository that will be synced with the fork. git remote add upstream https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git Verify the new upstream repository you've specified for your fork. git remote -v origin https://github.com/YOUR_USERNAME/YOUR_FORK.git (fetch) origin https://github.com/YOUR_USERNAME/YOUR_FORK.git (push) upstream https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git (fetch) upstream https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git (push) Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Syncing a fork - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Collaborating with issues and pull requests / Syncing a fork Syncing a fork mac windows linux all Sync a fork of a repository to keep it up-to-date with the upstream repository. Before you can sync your fork with an upstream repository, you must configure a remote that points to the upstream repository in Git. Open TerminalTerminalGit Bash. Change the current working directory to your local project. Fetch the branches and their respective commits from the upstream repository. Commits to master will be stored in a local branch, upstream/master. git fetch upstream remote: Counting objects: 75, done. remote: Compressing objects: 100% (53/53), done. remote: Total 62 (delta 27), reused 44 (delta 9) Unpacking objects: 100% (62/62), done. From https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY * [new branch] master -> upstream/master Check out your fork's local master branch. git checkout master Switched to branch 'master' Merge the changes from upstream/master into your local master branch. This brings your fork's master branch into sync with the upstream repository, without losing your local changes. git merge upstream/master Updating a422352..5fdff0f Fast-forward README | 9 ------- README.md | 7 ++++++ 2 files changed, 7 insertions(+), 9 deletions(-) delete mode 100644 README create mode 100644 README.md If your local branch didn't have any unique commits, Git will instead perform a "fast-forward": git merge upstream/master Updating 34e91da..16c56ad Fast-forward README.md | 5 +++-- 1 file changed, 3 insertions(+), 2 deletions(-) Tip: Syncing your fork only updates your local copy of the repository. To update your fork on GitHub, you must push your changes. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Merging an upstream repository into your fork - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Collaborating with issues and pull requests / Merging an upstream repository into your fork Merging an upstream repository into your fork mac windows linux all If you don't have push (write) access to an upstream repository, then you can pull commits from that repository into your own fork. Open TerminalTerminalGit Bash. Change the current working directory to your local project. Check out the branch you wish to merge to. Usually, you will merge into master. git checkout master Pull the desired branch from the upstream repository. This method will retain the commit history without modification. git pull https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git BRANCH_NAME If there are conflicts, resolve them. For more information, see "Addressing merge conflicts". Commit the merge. Review the changes and ensure they are satisfactory. Push the merge to your GitHub repository. git push origin master Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Allowing changes to a pull request branch created from a fork - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Collaborating with issues and pull requests / Allowing changes to a pull request branch created from a fork Allowing changes to a pull request branch created from a fork mac windows linux all For greater collaboration, you can allow commits on branches you've created from forks. Permission to commit to your forked branches is limited to those with push access to the upstream repository of the fork. Only pull request creators can give upstream repository maintainers, or those with push access to the upstream repository, permission to make commits to their pull request's compare branch. To learn more about upstream repositories, see "About forks." Pull request creators can give these permissions on each of their pull requests when they initially create a pull request from a fork or after they have created the pull request. You can set commit permissions when you first create a pull request from a fork. For more information, see "Creating a pull request from a fork." Additionally, you can modify an existing pull request to let repository maintainers make commits to your branch. Enabling repository maintainer permissions on existing pull requests On GitHub, navigate to the main page of the upstream repository of your pull request. Under the upstream repository name, click Pull requests. In the list of pull requests, navigate to the pull request that you'd like to allow commits on. In the the right sidebar of your pull request, select Allow edits from maintainers. You can change these permissions at any time by unselecting this option. Further reading "Committing changes to a pull request branch created from a fork" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support What happens to forks when a repository is deleted or changes visibility? - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Collaborating with issues and pull requests / What happens to forks when a repository is deleted or changes visibility? What happens to forks when a repository is deleted or changes visibility? mac windows linux all This article explains how deleting your repository or changing its visibility affects that repository's forks. Warning: If you remove a person’s access to a private repository, any of their forks of that private repository are deleted. Local clones of the private repository are retained. If a team's access to a private repository is revoked or a team with access to a private repository is deleted, and team members do not have access to the repository through another team, private forks of the repository will be deleted. You are responsible for ensuring that people who have lost access to a repository delete any confidential information or intellectual property. Organization owners can disable the ability to fork a specific private repository or to fork any private repository in an organization. For more information, see "Allowing people to fork a private repository owned by your organization" and "Allowing people to fork private repositories in your organization." Deleting a private repository When you delete a private repository, all of its private forks are also deleted. Deleting a public repository When you delete a public repository, one of the existing public forks is chosen to be the new parent repository. All other repositories are forked off of this new parent and subsequent pull requests go to this new parent. Private forks and permissions Private forks inherit the permissions structure of the upstream or parent repository. For example, if the upstream repository is private and gives read/write access to a team, then the same team will have read/write access to any forks of the private upstream repository. This helps owners of private repositories maintain control over their code. Changing a public repository to a private repository If a public repository is made private, its public forks are split off into a new network. As with deleting a public repository, one of the existing public forks is chosen to be the new parent repository and all other repositories are forked off of this new parent. Subsequent pull requests go to this new parent. In other words, a public repository's forks will remain public in their own separate repository network even after the parent repository is made private. This allows the fork owners to continue to work and collaborate without interruption. If public forks were not moved into a separate network in this way, the owners of those forks would need to get the appropriate access permissions to pull changes from and submit pull requests to the (now private) parent repository—even though they didn't need those permissions before. Deleting the private repository If a public repository is made private and then deleted, its public forks will continue to exist in a separate network. Changing a private repository to a public repository If a private repository is made public, each of its private forks is turned into a standalone private repository and becomes the parent of its own new repository network. Private forks are never automatically made public because they could contain sensitive commits that shouldn't be exposed publicly. If you own a private fork that has been converted into a standalone private repository and you have the free plan, the repository will be locked. To access the repository again, you can upgrade to a paid plan or make the repository public. For more information, see: "Unlocking a locked personal account" "Changing your personal account's billing plan" "Upgrading your organization's billing plan" Deleting the public repository If a private repository is made public and then deleted, its private forks will continue to exist as standalone private repositories in separate networks. Further reading "About forks" "Allowing people to fork a private repository owned by your organization" "Allowing people to fork private repositories in your organization" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Collaborating on repositories with code quality features enabled - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Collaborating with issues and pull requests / Collaborating on repositories with code quality features enabled Collaborating on repositories with code quality features enabled mac windows linux all Workflow quality features like statuses, protected branches, and required status checks help collaborators make contributions that meet conditions set by organization and repository administrators. About statuses Statuses let you know if your commits meet the conditions set for the repository you're contributing to. Working with protected branches If you're working on a protected branch, you won't be able to make irrevocable changes to the branch. You can enable required status checks on the protected branch that will prevent you from merging the pull request until all of the required checks pass. You can also enable required pull request reviews on the protected branch that will prevent you from merging the pull request until it's been approved. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support About statuses - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Collaborating with issues and pull requests / About statuses About statuses mac windows linux all Statuses let you know if your commits meet the conditions set for the repository you're contributing to. Statuses are based on external processes, such as continuous integration builds, which run for each commit you make. You can see the pending, passing, or failing statuses for each commit in your pull request. You can see the overall status of the last commit to a branch on your repository's branches page or in your repository's list of pull requests. Organization owners and users with push access to a repository can create statuses with GitHub's API. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Working with protected branches - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Collaborating with issues and pull requests / Working with protected branches Working with protected branches mac windows linux all If you're working on a protected branch, you won't be able to make irrevocable changes to the branch. You can enable required status checks on the protected branch that will prevent you from merging the pull request until all of the required checks pass. You can also enable required pull request reviews on the protected branch that will prevent you from merging the pull request until it's been approved. You can see if your pull request can be merged at the bottom of the pull request's Conversation tab. If you're working on a branch with protections enabled by a repository administrator, you won't be able to delete or force push to the branch. If the protected branch has required status checks enabled, you won't be able to merge changes into the branch until all of the required CI tests pass. If the protected branch has required pull request reviews enabled, you won't be able to merge changes into the branch until all requirements in the pull request review policy have been met. Note: If you're a repository owner or administrator, you can merge pull requests on branches that have required pull request reviews enabled even if the pull request hasn't been approved. If the branch has required review from a code owner enabled, and a pull request modifies code that has an owner, a code owner must approve the PR before it can be merged. Further reading "About required status checks" "About required reviews for pull requests" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Proposing changes to your work with pull requests - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Collaborating with issues and pull requests / Proposing changes to your work with pull requests Proposing changes to your work with pull requests mac windows linux all After you add changes to a topic branch or fork, you can open a pull request to ask your collaborators or the repository administrator to review your changes before merging them into the project. About branches Branches are used to propose changes to GitHub projects. Creating and deleting branches within your repository Pull requests let you tell others about changes you've pushed to a repository on GitHub. Once a pull request is opened, you can discuss and review the potential changes with collaborators and add follow-up commits before the changes are merged into the repository. About comparing branches in pull requests Pull requests display diffs to compare the changes you made in your topic branch against the base branch that you want to merge your changes into. Creating a pull request Create a pull request to propose and collaborate on changes to a repository. These changes are proposed in a branch, which ensures that the master branch only contains finished and approved work. Creating a pull request from a fork If you've forked a repository and made changes to the fork, you can ask that the upstream repository accept your changes by creating a pull request. Requesting a pull request review After you create a pull request, you can ask a specific person to review the changes you've proposed. If you're an organization member, you can also request a specific team to review your changes. Changing the base branch of a pull request After a pull request is opened, you can change the base branch to compare the changes in the pull request against a different branch. Committing changes to a pull request branch created from a fork You can commit changes on a pull request branch that was created from a fork of your repository with permission from the pull request creator. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support About branches - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Collaborating with issues and pull requests / About branches About branches mac windows linux all Branches are used to propose changes to GitHub projects. Tip: You must have write access to a repository to create a branch and open a pull request. For more information, see "Access permissions on GitHub." A branch is a parallel version of the main line of development in the repository, or the default branch (usually master). Use branches to: Develop features Fix bugs Safely experiment with new ideas Once you're satisfied with the changes in your branch, you can open a pull request between your branch (the head branch) and the default branch (the base branch). Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Creating and deleting branches within your repository - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Collaborating with issues and pull requests / Creating and deleting branches within your repository Creating and deleting branches within your repository mac windows linux all You can create or delete branches directly on GitHub. On GitHub, navigate to the main page of the repository. Click the branch selector menu. Type a unique name for your new branch. Press Enter. Deleting a branch On GitHub, navigate to the main page of the repository. Above the list of files, click NUMBER branches. Scroll to the branch that you want to delete, then click . Further reading "About branches" "Viewing branches in your repository" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support About comparing branches in pull requests - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Collaborating with issues and pull requests / About comparing branches in pull requests About comparing branches in pull requests mac windows linux all Pull requests display diffs to compare the changes you made in your topic branch against the base branch that you want to merge your changes into. Note: When creating your pull request, you can change the base branch that you're comparing your changes against. For more information, see "Creating a pull request." You can view proposed changes in a pull request in the Files changed tab. The diff shows a comparison between the tip of the head branch and the commit at which the head was last synced with the base branch. Rather than viewing the commits themselves, you can view the proposed changes as they'll appear in the files once the pull request is merged. The files appear in alphabetical order within the Files changed tab. Additions to the files appear in green and are prefaced by a + sign while content that has been removed appears in red and is prefaced by a - sign. You can choose to view the diff in either a unified view, where the modified content appears in a linear view, or a split view, where old content appears on one side and new content appears on the other side. You can also choose to view either the source or the rich diff. Viewing the rich diff lets you see a preview of how the changes will look once the pull request is merged. Tip: If you're having a hard time understanding the context of a change, you can click View in the Files changed tab to view the whole file with the proposed changes. Further reading "About pull requests" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Creating a pull request - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Collaborating with issues and pull requests / Creating a pull request Creating a pull request mac windows linux all Create a pull request to propose and collaborate on changes to a repository. These changes are proposed in a branch, which ensures that the master branch only contains finished and approved work. Pull requests can only be opened if there are differences between your branch and the upstream branch. You can specify which branch you'd like to merge your changes into when you create your pull request. If you don't have write access to the repository where you'd like to create a pull request, you must create a fork, or copy, of the repository first. For more information, see "Creating a pull request from a fork" and "About forks." You can close corresponding issues using a keyword in your pull request or commit message. For more information, see "Closing issues using keywords." Changing the branch range and destination repository By default, pull requests are based on the parent repository's default branch. If the default parent repository isn't correct, you can change both the parent repository and the branch with the drop-down lists. You can also swap your head and base branches with the drop-down lists to establish diffs between reference points. References here must be branch names in your GitHub repository. When thinking about branches, remember that the base branch is where changes should be applied, the head branch contains what you would like to be applied. When you change the base repository, you also change notifications for the pull request. Everyone that can push to the base repository will receive an email notification and see the new pull request in their dashboard the next time they sign in. When you change any of the information in the branch range, the Commit and Files changed preview areas will update to show your new range. Tips: Using the compare view, you can set up comparisons across any timeframe. Project maintainers can add a pull request template for a repository. Templates include prompts for information the project's maintainers prefer to see in the body of a pull request. Creating the pull request On GitHub, navigate to the main page of the repository. In the "Branch" menu, choose the branch that contains your commits. To the right of the Branch menu, click New pull request. Use the base branch dropdown menu to select the branch you'd like to merge your changes into, then use the compare branch drop-down menu to choose the topic branch you made your changes in. Type a title and description for your pull request. Click Create pull request. Tip: After you create a pull request, you can ask a specific person to review your proposed changes. For more information, see "Requesting a pull request review." After your pull request has been reviewed, it can be merged into the repository. Further reading "Creating a pull request from a fork" "Changing the base branch of a pull request" "Adding issues and pull requests to a project board from the sidebar" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Creating a pull request from a fork - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Collaborating with issues and pull requests / Creating a pull request from a fork Creating a pull request from a fork mac windows linux all If you've forked a repository and made changes to the fork, you can ask that the upstream repository accept your changes by creating a pull request. You can open a pull request to the upstream repository from any branch or commit in your fork. We recommend that you make changes in a topic branch, so that you can push followup commits if you receive feedback on your pull request. You also have the option to give the upstream repository's maintainers the ability to make commits on your topic branch to update your pull request. If your pull request compares your topic branch with a branch in the upstream repository as the base branch, then your topic branch is also called the compare branch of the pull request. For more information about pull request branches, including examples, see "Creating a Pull Request." Navigate to the original repository you created your fork from. To the right of the Branch menu, click New pull request. On the Compare page, click compare across forks. Confirm that the base fork is the repository you'd like to merge changes into. Use the base branch drop-down menu to select the branch of the upstream repository you'd like to merge changes into. Use the head fork drop-down menu to select your fork, then use the compare branch drop-down menu to select the branch you made your changes in. Type a title and description for your pull request. If you do not want to allow anyone with push access to the upstream repository to make changes to your PR, unselect Allow edits from maintainers. Click Create pull request. Tip: After you create a pull request, you can ask a specific person to review your proposed changes. For more information, see "Requesting a pull request review." Further reading "Working with forks" "Creating a pull request" "Allowing changes to a pull request branch created from a fork" "Committing changes to a pull request branch created from a fork" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Requesting a pull request review - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Collaborating with issues and pull requests / Requesting a pull request review Requesting a pull request review mac windows linux all After you create a pull request, you can ask a specific person to review the changes you've proposed. If you're an organization member, you can also request a specific team to review your changes. Repository owners and collaborators can request a pull request review from anyone with read access to the repository. Organization members can also request a pull request review from teams with read access to the repository. The requested reviewer or team will receive a notification that you asked them to review the pull request. Note: Pull request authors can't request reviews unless they are either a repository owner or collaborator with write access to the repository. You can request a review from either a suggested or specific person. Suggested reviewers are based on git blame data. If you request a review, other people with read access to the repository can still review your pull request. If the requested reviewer does not submit a review, and the pull request meets the repository's mergeability requirements, you can still merge the pull request. Under your repository name, click Pull requests. In the list of pull requests, click the pull request that you'd like to ask a specific person or a team to review. To request a review from a suggested person, in the right sidebar under Reviewers, click Request. If you do not want a review from a suggested person, in the right sidebar next to Reviewers, click . Type the username of the person or the name of the team you're asking to review your changes, then click their team name or username to request a review. Further reading "About pull request reviews" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Changing the base branch of a pull request - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Collaborating with issues and pull requests / Changing the base branch of a pull request Changing the base branch of a pull request mac windows linux all After a pull request is opened, you can change the base branch to compare the changes in the pull request against a different branch. Warning: When you change the base branch of your pull request, some commits may be removed from the timeline. Review comments may also become outdated, as the line of code that the comment referenced may no longer be part of the changes in the pull request. Under your repository name, click Pull requests. In the "Pull Requests" list, click the pull request you'd like to modify. Next to the pull request's title, click Edit. In the base branch drop-down menu, select the base branch you'd like to compare changes against. Read the information about changing the base branch and click Change base. Further reading "Creating a pull request" "About pull requests" "Reviewing proposed changes in a pull request" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Committing changes to a pull request branch created from a fork - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Collaborating with issues and pull requests / Committing changes to a pull request branch created from a fork Committing changes to a pull request branch created from a fork mac windows linux all You can commit changes on a pull request branch that was created from a fork of your repository with permission from the pull request creator. You can only make commits on pull request branches that: are opened in a repository that you have push access to and that were created from a fork of that repository have permission granted from the pull request creator don't have branch restrictions that will prevent you from committing Only the user who created the pull request can give you permission to push commits to their branch. For more information, see "Allowing changes to a pull request branch created from a fork." Note: You can also make commits to a pull request branch from a fork of your repository through GitHub by creating your own copy (or fork) of the fork of your repository and committing changes to the same head branch that the original pull request changes were created on. For some general guidelines, see "Creating a pull request from a fork." On GitHub, navigate to the main page of the fork (or copy of your repository) where the pull request branch was created. Under the fork's repository name, click Clone or download. In the Clone with HTTPs section, click to copy the clone URL for the repository. Open TerminalTerminalGit Bash. Tip: If you prefer to clone the fork using GitHub Desktop, then see "Cloning a repository to GitHub Desktop." Change the current working directory to the location where you want to download the cloned directory. cd open-source-projects Type git clone, and then paste the URL you copied in Step 3. git clone https://github.com/USERNAME/FORK-OF-THE-REPOSITORY Press Enter. Your local clone will be created. git clone https://github.com/USERNAME/FORK-OF-THE-REPOSITORY Cloning into `FORK-OF-THE-REPOSITORY`... remote: Counting objects: 10, done. remote: Compressing objects: 100% (8/8), done. remove: Total 10 (delta 1), reused 10 (delta 1) Unpacking objects: 100% (10/10), done. Tip: The error message "fatal: destination path 'REPOSITORY-NAME' already exists and is not an empty directory" means that your current working directory already contains a repository with the same name. To resolve the error, you must clone the fork in a different directory. Navigate into your new cloned repository. cd FORK-OF-THE-REPOSITORY Switch branches to the compare branch of the pull request where the original changes were made. If you navigate to the original pull request, you'll see the compare branch at the top of the pull request. In this example, the compare branch is test-branch: $ git checkout test-branch Tip: For more information about pull request branches, including examples, see "Creating a Pull Request." At this point, you can do anything you want with this branch. You can push new commits to it, run some local tests, or merge other branches into it, including master. Make modifications as you like. After you commit your changes to the head branch of the pull request you can push your changes up to the original pull request directly. In this example, the head branch is test-branch: git push origin test-branch Counting objects: 32, done. Delta compression using up to 8 threads. Compressing objects: 100% (26/26), done. Writing objects: 100% (29/29), 74.94 KiB | 0 bytes/s, done. Total 29 (delta 8), reused 0 (delta 0) To https://github.com/USERNAME/FORK-OF-THE-REPOSITORY.git 12da2e9..250e946 test-branch -> test-branch Your new commits will be reflected on the original pull request on GitHub. Further Reading "About forks" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Addressing merge conflicts - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Collaborating with issues and pull requests / Addressing merge conflicts Addressing merge conflicts mac windows linux all If your changes have merge conflicts with the base branch, you must address the merge conflicts before you can merge your pull request's changes. About merge conflicts Git can often resolve differences between merged branches. Usually, the changes are on different lines, or even in different files, which makes the merge simple for computers to understand. However, sometimes there are competing changes that Git needs your help with to decide which changes to incorporate in the final merge. Often, merge conflicts happen when people make different changes to the same line of the same file, or when one person edits a file and another person deletes the same file. You must resolve the conflict before you can merge the branches. Resolving a merge conflict on GitHub You can resolve simple merge conflicts that involve competing line changes on GitHub. Resolving a merge conflict using the command line You can resolve merge conflicts using the command line and a text editor. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support About merge conflicts - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Collaborating with issues and pull requests / About merge conflicts About merge conflicts mac windows linux all Git can often resolve differences between merged branches. Usually, the changes are on different lines, or even in different files, which makes the merge simple for computers to understand. However, sometimes there are competing changes that Git needs your help with to decide which changes to incorporate in the final merge. Often, merge conflicts happen when people make different changes to the same line of the same file, or when one person edits a file and another person deletes the same file. You must resolve the conflict before you can merge the branches. If you have a merge conflict between your compare branch and base branch on GitHub, you can view the files with conflicting changes above the Merge pull request button, which will be deactivated. You cannot merge your pull request branch on GitHub until you resolve the merge conflict. To resolve the merge conflict, you must manually select the changes that you want to keep in the final merge on the command line or on GitHub. You can only resolve the merge conflict on GitHub, if your merge conflict is caused by competing line changes, such as when people make different changes to the same line of the same file on different branches in your Git repository. For all other merge conflicts, you must resolve the merge conflict locally on the command line. If you have a merge conflict on the command line, you cannot push your local changes to GitHub until you resolve the merge conflict locally on your computer. If you try merging branches on the command line that have a merge conflict, you'll get an error message. git merge BRANCH-NAME Auto-merging styleguide.md CONFLICT (content): Merge conflict in styleguide.md Automatic merge failed; fix conflicts and then commit the result Further reading "About pull request merges" "About pull requests" "Resolving a merge conflict using the command line" "Resolving a merge conflict on GitHub" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Resolving a merge conflict on GitHub - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Collaborating with issues and pull requests / Resolving a merge conflict on GitHub Resolving a merge conflict on GitHub mac windows linux all You can resolve simple merge conflicts that involve competing line changes on GitHub. You can only resolve the merge conflict on GitHub, if your merge conflict is caused by competing line changes, such as when people make different changes to the same line of the same file on different branches in your Git repository. For all other merge conflicts, you must resolve the merge conflict locally on the command line. Under your repository name, click Pull requests. In the "Pull Requests" list, click the pull request with a merge conflict that you'd like to resolve. Near the bottom of your pull request, click Resolve conflicts. Tip: If the Resolve conflicts button is deactivated, your pull request's merge conflict is too complex to resolve on GitHub. You must resolve the merge conflict using another Git client like Atom's Git integration or the command line. For more information see "Resolving a merge conflict using the command line." Decide if you want to keep only your branch's changes, keep only the other branch's changes, or make a brand new change, which may incorporate changes from both branches. Delete the conflict markers <<<<<<<, =======, >>>>>>> and make the changes you want in the final merge. If you have more than one merge conflict in your file, scroll down to the next set of conflict markers and repeat steps four and five to resolve your merge conflict. Once you've resolved all the conflicts in the file, click Mark as resolved. If you have more than one file with a conflict, select the next file you want to edit on the left side of the page under "conflicting files" and repeat steps four through seven until you've resolved all of your pull request's merge conflicts. Once you've resolved all your merge conflicts, click Commit merge. This merges the entire base branch into your head branch. To merge your pull request, click Merge pull request. For more information about other pull request merge options, see "Merging a pull request." Further reading "About pull request merges" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Resolving a merge conflict using the command line - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Collaborating with issues and pull requests / Resolving a merge conflict using the command line Resolving a merge conflict using the command line mac windows linux all You can resolve merge conflicts using the command line and a text editor. Merge conflicts may occur if competing changes are made to the same line of a file or when a file is deleted that another person is attempting to edit. For information on how to resolve these situations, see "Competing line change merge conflicts and "Removed file merge conflicts." Competing line change merge conflicts To resolve a merge conflict caused by competing line changes, you must choose which changes to incorporate from the different branches in a new commit. For example, if you and another person both edited the file styleguide.md on the same lines in different branches of the same Git repository, you'll get a merge conflict error when you try to merge these branches. You must resolve this merge conflict with a new commit before you can merge these branches. Open TerminalTerminalGit Bash. Navigate into the local Git repository that has the merge conflict. cd REPOSITORY-NAME Generate a list of the files affected by the merge conflict. In this example, the file styleguide.md has a merge conflict. git status # On branch branch-b # You have unmerged paths. # (fix conflicts and run "git commit") # # Unmerged paths: # (use "git add ..." to mark resolution) # # both modified: styleguide.md # no changes added to commit (use "git add" and/or "git commit -a") Open your favorite text editor, such as Atom, and navigate to the file that has merge conflicts. To see the beginning of the merge conflict in your file, search the file for the conflict marker <<<<<<<. When you open the file in your text editor, you'll see the changes from the HEAD or base branch after the line <<<<<<< HEAD. Next, you'll see =======, which divides your changes from the changes in the other branch, followed by >>>>>>> BRANCH-NAME. In this example, one person wrote "open an issue" in the base or HEAD branch and another person wrote "ask your question in IRC" in the compare branch or branch-a. If you have questions, please <<<<<<< HEAD open an issue ======= ask your question in IRC. >>>>>>> branch-a Decide if you want to keep only your branch's changes, keep only the other branch's changes, or make a brand new change, which may incorporate changes from both branches. Delete the conflict markers <<<<<<<, =======, >>>>>>> and make the changes you want in the final merge. In this example, both changes are incorporated into the final merge: If you have questions, please open an issue or ask in our IRC channel if it's more urgent. Add or stage your changes. git add . Commit your changes with a comment. git commit -m "Resolved merge conflict by incorporating both suggestions." You can now merge the branches on the command line or push your changes to your remote repository on GitHub and merge your changes in a pull request. Removed file merge conflicts To resolve a merge conflict caused by competing changes to a file, where a person deletes a file in one branch and another person edits the same file, you must choose whether to delete or keep the removed file in a new commit. For example, if you edited a file, such as README.md, and another person removed the same file in another branch in the same Git repository, you'll get a merge conflict error when you try to merge these branches. You must resolve this merge conflict with a new commit before you can merge these branches. Open TerminalTerminalGit Bash. Navigate into the local Git repository that has the merge conflict. cd REPOSITORY-NAME Generate a list of the files affected by the merge conflict. In this example, the file README.md has a merge conflict. git status # On branch master # Your branch and 'origin/master' have diverged, # and have 1 and 2 different commits each, respectively. # (use "git pull" to merge the remote branch into yours) # You have unmerged paths. # (fix conflicts and run "git commit") # # Unmerged paths: # (use "git add/rm ..." as appropriate to mark resolution) # # deleted by us: README.md # # no changes added to commit (use "git add" and/or "git commit -a") Open your favorite text editor, such as Atom, and navigate to the file that has merge conflicts. Decide if you want keep the removed file. You may want to view the latest changes made to the removed file in your text editor. To add the removed file back to your repository: git add README.md To remove this file from your repository: git rm README.md README.md: needs merge rm 'README.md' Commit your changes with a comment. git commit -m "Resolved merge conflict by keeping README.md file." [branch-d 6f89e49] Merge branch 'branch-c' into branch-d You can now merge the branches on the command line or push your changes to your remote repository on GitHub and merge your changes in a pull request. Further reading "About merge conflicts" "Checking out pull requests locally" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Reviewing changes in pull requests - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Collaborating with issues and pull requests / Reviewing changes in pull requests Reviewing changes in pull requests mac windows linux all After a pull request has been opened, you can review and discuss the set of proposed changes. About pull request reviews Reviews allow collaborators to comment on the changes proposed in pull requests, approve the changes, or request further changes before the pull request is merged. Repository administrators can require that all pull requests are approved before being merged. Reviewing proposed changes in a pull request In a pull request, you can review and discuss commits, changed files, and the differences (or "diff") between the files in the base and compare branches. Finding changed methods and functions in a pull request You can quickly find proposed changes to a method or function in a pull request in .go, .js, .ts, .py, and .rb files. Commenting on a pull request After you open a pull request in a repository, collaborators or team members can comment on the comparison of files between the two specified branches, or leave general comments on the project as a whole. Viewing a pull request review You can view all of the comments made in a single pull request review. Approving a pull request with required reviews If your repository requires reviews, a repository administrator or collaborator with write access must approve each pull request before it can be merged. Dismissing a pull request review If your repository requires reviews, you can dismiss pull request reviews that are no longer valid or are unable to be approved by the reviewer. Checking out pull requests locally When someone sends you a pull request from a fork or branch of your repository, you may want to merge it locally to resolve a merge conflict or to test and verify the changes on your local computer before merging on GitHub. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support About pull request reviews - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Collaborating with issues and pull requests / About pull request reviews About pull request reviews mac windows linux all Reviews allow collaborators to comment on the changes proposed in pull requests, approve the changes, or request further changes before the pull request is merged. Repository administrators can require that all pull requests are approved before being merged. After a pull request is opened, anyone with read access can review and comment on the changes it proposes. Repository owners and collaborators can request a pull request review from a specific person. Organization members can also request a pull request review from a team with read access to the repository. Reviews allow for discussion of proposed changes and help ensure that the changes meet the repository's contributing guidelines and other quality standards. You can define which individuals or teams own certain types or areas of code in a CODEOWNERS file. When a pull request modifies code that has a defined owner, that individual or team will automatically be requested as a reviewer. A review has three possible statuses: Comment: Submit general feedback without explicitly approving the changes or requesting additional changes. Approve: Submit feedback and approve merging the changes proposed in the pull request. Request changes: Submit feedback that must be addressed before the pull request can be merged. Tips: If required reviews are enabled and a collaborator with write, admin, or owner access to the repository submits a review requesting changes, the pull request cannot be merged until the same collaborator submits another review approving the changes in the pull request. Repository owners and administrators can merge a pull request even if it hasn't received an approved review, or if a reviewer who requested changes has left the organization or is unavailable. If both required reviews and stale review dismissal are enabled and a code-modifying commit is pushed to the branch of an approved pull request, the approval is dismissed. The pull request must be reviewed and approved again before it can be merged. When several open pull requests each have a head branch pointing to the same commit, you won’t be able to merge them if one or both have a pending or rejected review. You can view all of the reviews a pull request has received in the Conversation timeline, and you can see reviews by repository owners and collaborators in the pull request's merge box. Tip: You can find a pull request where you or a team you're a member of is requested for review with the search qualifier review-requested:[USERNAME] or team-review-requested:[TEAMNAME]. For more information, see "Searching issues and pull requests." Required reviews Repository administrators can require that all pull requests receive at least one approved review from someone with write or admin permissions or from a designated code owner before they're merged into a protected branch. For more information, see "About protected branches." When required reviews are enabled, anyone with access to the repository can approve changes in a pull request. However, to merge your pull request you need someone who has write or admin permissions in the repository to approve your pull request's changes in their review. If review is required from a designated code owner and the pull request affects code that has a designated owner, approval from that owner is required. For more information, see "About required reviews for pull requests." Tip: If necessary, people with admin or write access to a repository can dismiss a pull request review. For more information, see "Dismissing a pull request review." Further reading "Reviewing proposed changes in a pull request" "Enabling required reviews for pull requests" "Viewing a pull request review" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Reviewing proposed changes in a pull request - User Documentation <meta name="Description" content="In a pull request, you can review and discuss commits, changed files, and the differences (or "diff") between the files in the base and compare branches. …"> GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Collaborating with issues and pull requests / Reviewing proposed changes in a pull request Reviewing proposed changes in a pull request mac windows linux all In a pull request, you can review and discuss commits, changed files, and the differences (or "diff") between the files in the base and compare branches. When you're reviewing a pull request, you can choose to leave individual comments on specific changes. When you've finished reviewing the proposed changes, you can submit an overall review with a summary comment to approve the pull request or request additional changes. Tip: You can find a pull request where you or a team you're a member of is requested for review with the search qualifier review-requested:[USERNAME] or team-review-requested:[TEAMNAME]. For more information, see "Searching issues and pull requests." Starting a review Under your repository name, click Pull requests. In the list of pull requests, click the pull request you'd like to review. On the pull request, click Files changed. Hover over the line of code where you'd like to add a comment, and click the blue comment icon. In the comment window, type your comment. When you're done, click Start a review. If you have already started a review, you can click Add review comment. Before you submit your review, your line comments are pending and only visible to you. You can edit pending comments anytime before you submit your review. To cancel a pending review, including all of its pending comments, scroll down to the end of the timeline on the Conversation tab, then click Cancel review. Submitting your review After you've finished reviewing the proposed changes in the pull request, submit your review. On the pull request, click Files changed. Above the changed code, click Review changes. Type a comment summarizing your feedback on the proposed changes. Select the type of review you'd like to leave: Select Comment to leave general feedback without explicitly approving the changes or requesting additional changes. Select Approve to submit your feedback and approve merging the changes proposed in the pull request. Select Request changes to submit feedback that must be addressed before the pull request can be merged. Click Submit review. Tips: If required reviews are enabled and a collaborator with write, admin, or owner access to the repository submits a review requesting changes, the pull request cannot be merged until the same collaborator submits another review approving the changes in the pull request. Repository owners and administrators can merge a pull request even if it hasn't received an approved review, or if a reviewer who requested changes has left the organization or is unavailable. If both required reviews and stale review dismissal are enabled and a code-modifying commit is pushed to the branch of an approved pull request, the approval is dismissed. The pull request must be reviewed and approved again before it can be merged. When several open pull requests each have a head branch pointing to the same commit, you won’t be able to merge them if one or both have a pending or rejected review. Further reading "About pull request reviews" "About required reviews for pull requests" "Approving a pull request with required reviews" "Commenting on a pull request" "Filtering pull requests by review status" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Finding changed methods and functions in a pull request - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Collaborating with issues and pull requests / Finding changed methods and functions in a pull request Finding changed methods and functions in a pull request mac windows linux all You can quickly find proposed changes to a method or function in a pull request in .go, .js, .ts, .py, and .rb files. Anyone with read access to a repository can see a summary list of the functions and methods changes in certain files of a pull request. The summary list of methods and functions is created from these supported file types: Go JavaScript (includes Typescript, Flow, and other types of JavaScript) Python Ruby Under your repository name, click Pull requests. In the list of pull requests, click the pull request where you'd like to find the changed functions and methods. On the pull request, click Files changed. To see a summary list of the changed functions and methods, click Jump to.... Select the changed function or method from the drop-down menu. You can also enter the name of the function or method to filter results. Note: If you don't see the functions or methods you expected, confirm that your code compiles and doesn't contain errors. Only functions and methods changed in this pull request and found in .go, .js, .ts, .py, and .rb files appear in the drop-down menu. You'll be redirected to the first line of the function or method you selected. Further reading "About comparing branches in a pull request" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Commenting on a pull request - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Collaborating with issues and pull requests / Commenting on a pull request Commenting on a pull request mac windows linux all After you open a pull request in a repository, collaborators or team members can comment on the comparison of files between the two specified branches, or leave general comments on the project as a whole. You can comment on a pull request's Conversation tab to leave general comments, questions, or props. You can also comment on specific sections of a file on a pull request's Files changed tab in the form of individual line comments or as part of a pull request review. Adding line comments is a great way to discuss questions about implementation, or provide feedback to the author. For more information on adding line comments to a pull request review, see "Reviewing proposed changes in a pull request." Note: If you reply to a pull request via email, your comment will be added on the Conversation tab and will not be part of a pull request review. To reply to an existing line comment, you'll need to navigate to the comment on either the Conversation tab or Files changed tab and add an additional line comment below it. Tips: Pull request comments support the same formatting as regular comments on GitHub, such as @mentions, emoji, and references. You can add reactions to comments in pull requests in the Files changed tab. Adding line comments to a pull request Under your repository name, click Pull requests. In the list of pull requests, click the pull request where you'd like to leave line comments. On the pull request, click Files changed. Hover over the line of code where you'd like to add a comment, and click the blue comment icon. In the comment window, type your comment. When you're done, click Add single comment. Anyone watching the pull request or repository will receive a notification of your comment. Further reading "Creating a permanent link to a code snippet" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Viewing a pull request review - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Collaborating with issues and pull requests / Viewing a pull request review Viewing a pull request review mac windows linux all You can view all of the comments made in a single pull request review. You can find a pull request where you or a team you're a member of is requested for review with the search qualifier review-requested:[USERNAME] or team-review-requested:[TEAMNAME]. For more information, see "Searching issues and pull requests." When you view a full review, you'll see the same version of the pull request as the reviewer did at the time of the review. Under your repository name, click Pull requests. In the list of pull requests, click the pull request you'd like to review. On the "Conversation" tab, scroll to the review you'd like to see, then click View changes. Further reading "About pull request reviews" "Reviewing proposed changes in a pull request" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Approving a pull request with required reviews - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Collaborating with issues and pull requests / Approving a pull request with required reviews Approving a pull request with required reviews mac windows linux all If your repository requires reviews, a repository administrator or collaborator with write access must approve each pull request before it can be merged. You can comment on a pull request, approve the changes, or request improvements before approving. For more information, see "About required reviews for pull requests" and "Reviewing proposed changes in a pull request." You can find a pull request where you or a team you're a member of is requested for review with the search qualifier review-requested:[USERNAME] or team-review-requested:[TEAMNAME]. For more information, see "Searching issues and pull requests." Tip: If a pull request you approved has changed significantly, you can dismiss your review. The pull request will need a new review before it can be merged. For more information, see "Dismissing a pull request review." Under your repository name, click Pull requests. In the list of pull requests, click the pull request you'd like to review. On the pull request, click Files changed. Review the changes in the pull request, and optionally, comment on specific lines. Above the changed code, click Review changes. Type a comment summarizing your feedback on the proposed changes. Select Approve to approve merging the changes proposed in the pull request. Click Submit review. Tips: If required reviews are enabled and a collaborator with write, admin, or owner access to the repository submits a review requesting changes, the pull request cannot be merged until the same collaborator submits another review approving the changes in the pull request. Repository owners and administrators can merge a pull request even if it hasn't received an approved review, or if a reviewer who requested changes has left the organization or is unavailable. If both required reviews and stale review dismissal are enabled and a code-modifying commit is pushed to the branch of an approved pull request, the approval is dismissed. The pull request must be reviewed and approved again before it can be merged. When several open pull requests each have a head branch pointing to the same commit, you won’t be able to merge them if one or both have a pending or rejected review. Further reading "About required reviews for pull requests" "Reviewing proposed changes in a pull request" "Commenting on a pull request" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Dismissing a pull request review - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Collaborating with issues and pull requests / Dismissing a pull request review Dismissing a pull request review mac windows linux all If your repository requires reviews, you can dismiss pull request reviews that are no longer valid or are unable to be approved by the reviewer. If a person who requested changes isn't available to give an approved review, or if a pull request has changed significantly since it was reviewed, repository administrators or people with write access can dismiss a review. This changes the status of the review to a review comment. When you dismiss a review, you must add a comment explaining why you dismissed it. Your comment will be added to the pull request conversation. You can find a pull request where you or a team you're a member of is requested for review with the search qualifier review-requested:[USERNAME] or team-review-requested:[TEAMNAME]. For more information, see "Searching issues and pull requests." Under your repository name, click Pull requests. In the list of pull requests, click the pull request you'd like to review. On the "Conversation" tab, scroll to the review you'd like to see, then click Dismiss review. Type your reason for dismissing the review, then click Dismiss review. Further reading "About pull request reviews" "Reviewing proposed changes in a pull request" "About required reviews for pull requests" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Checking out pull requests locally - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Collaborating with issues and pull requests / Checking out pull requests locally Checking out pull requests locally mac windows linux all When someone sends you a pull request from a fork or branch of your repository, you may want to merge it locally to resolve a merge conflict or to test and verify the changes on your local computer before merging on GitHub. Note: You can ask the person who created the pull request to allow anyone with push access to the upstream repository to push commits to their pull request to help their work merge faster. For more information, see "Allowing changes to a pull request branch created from a fork." Modifying an active pull request locally Under your repository name, click Pull requests. In the list of pull requests, click the pull request you'd like to merge. Near the bottom of the pull request, in the merge box, click command line instructions. Follow the sequence of steps to bring down the proposed pull request. Modifying an inactive pull request locally An inactive pull request is one whose owner has either stopped responding, or, more likely, has deleted their fork. If a fork was deleted, the pull request can still be merged. However, if you want to make changes to a pull request and the author is not responding, you'll need to perform some additional steps to update the pull request. Once a pull request is opened, GitHub stores all of the changes online for you. In other words, commits in a pull request are available in a repository even before the PR is merged. That means you can fetch an open pull request and recreate it as your own. Anyone can work with a previously opened pull request to continue working on it, test it out, or even open a new pull request with additional changes. However, only collaborators with push access can merge pull requests. Under your repository name, click Issues or Pull requests. In the "Pull Requests" list, click the pull request you'd like to merge. Find the ID number of the inactive pull request. This is the sequence of digits right after the pull request's title. Open TerminalTerminalGit Bash. Fetch the reference to the pull request based on its ID number, creating a new branch in the process. git fetch origin pull/ID/head:BRANCHNAME Switch to the new branch that's based on this pull request: [master] $ git checkout BRANCHNAME Switched to a new branch 'BRANCHNAME' At this point, you can do anything you want with this branch. You can run some local tests, or merge other branches into it, including master. Make modifications as you see fit! When you're ready, you can push the new branch up: [pull-inactive-pull-request] $ git push origin BRANCHNAME Counting objects: 32, done. Delta compression using up to 8 threads. Compressing objects: 100% (26/26), done. Writing objects: 100% (29/29), 74.94 KiB | 0 bytes/s, done. Total 29 (delta 8), reused 0 (delta 0) To https://github.com/username/repository.git * [new branch] BRANCHNAME -> BRANCHNAME Create a new pull request with your new branch. Error: Failed to push some refs The remote refs/pull/ namespace is read-only. If you try to push any commits there, you'll see this error: ! [remote rejected] HEAD -> refs/pull/1/head (deny updating a hidden ref) error: failed to push some refs to 'git@github.local:USERNAME/REPOSITORY.git' Tip: When you remove or rename a remote reference, your local refs/pull/origin/ namespace will not be affected by calls to git-remote. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Incorporating changes from a pull request - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Collaborating with issues and pull requests / Incorporating changes from a pull request Incorporating changes from a pull request mac windows linux all You can propose changes to your work on GitHub through pull requests. Learn how to create, manage, and merge pull requests. About pull request merges You can merge pull requests by retaining all the commits in a feature branch, squashing all commits into a single commit, or by rebasing individual commits from the head branch onto the base branch. Merging a pull request Merge a pull request into the upstream branch when work is completed. Anyone with push access to the repository can complete the merge. Closing a pull request You may choose to close a pull request without merging it into the upstream branch. This can be handy if the changes proposed in the branch are no longer needed, or if another solution has been proposed in another branch. Reverting a pull request You can revert a pull request after it's been merged to the upstream branch. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support About pull request merges - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Collaborating with issues and pull requests / About pull request merges About pull request merges mac windows linux all You can merge pull requests by retaining all the commits in a feature branch, squashing all commits into a single commit, or by rebasing individual commits from the head branch onto the base branch. When you click the default Merge pull request option on a pull request on GitHub, all commits from the feature branch are added to the base branch in a merge commit. The pull request is merged using the --no-ff option. To merge pull requests, you must have write permissions in the repository. Squash and merge your pull request commits When you select the Squash and merge option on a pull request on GitHub, the pull request's commits are squashed into a single commit. Instead of seeing all of a contributor's individual commits from a topic branch, the commits are combined into one commit and merged into the default branch. Pull requests with squashed commits are merged using the fast-forward option. To squash and merge pull requests, you must have write permissions in the repository, and the repository must allow squash merging. You can use squash and merge to create a more streamlined Git history in your repository. Work-in-progress commits are helpful when working on a feature branch, but they aren’t necessarily important to retain in the Git history. If you squash these commits into one commit while merging to the default branch, you can retain the original changes with a clear Git history. Rebase and merge your pull request commits When you select the Rebase and merge option on a pull request on GitHub, all commits from the topic branch (or head branch) are added onto the base branch individually without a merge commit. Pull requests with rebased commits are merged using the fast-forward option. To rebase and merge pull requests, you must have write permissions in the repository, and the repository must allow rebase merging. The rebase and merge behavior on GitHub deviates slightly from git rebase. Rebase and merge on GitHub will always update the committer information and create new commit SHAs, whereas git rebase outside of GitHub does not change the committer information when the rebase happens on top of an ancestor commit. For more information about git rebase, see the "Git rebase" chapter from the Pro Git book. For a visual representation of git rebase, see The "Git Branching - Rebasing" chapter from the Pro Git book. You aren't able to automatically rebase and merge on GitHub when: The pull request has merge conflicts. Rebasing the commits from the base branch into the head branch runs into conflicts. Rebasing the commits is considered "unsafe," such as when a rebase is possible without merge conflicts but would produce a different result than a merge would. If you still want to rebase the commits but can't rebase and merge automatically on GitHub you must: Rebase the topic branch (or head branch) onto the base branch locally on the command line Resolve any merge conflicts on the command line. Force-push the rebased commits to the pull request's topic branch (or remote head branch). Anyone with write permissions in the repository, can then merge the changes using the rebase and merge button on GitHub. Further reading "About pull requests" "Addressing merge conflicts" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Merging a pull request - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Collaborating with issues and pull requests / Merging a pull request Merging a pull request mac windows linux all Merge a pull request into the upstream branch when work is completed. Anyone with push access to the repository can complete the merge. If the pull request does not have any merge conflicts, you can merge it on GitHub. If the pull request does have merge conflicts, or if you'd like to test the changes before merging, you can check out the pull request locally and merge it using the command line. If you decide you don't want the changes in a topic branch to be merged to the upstream branch, you can close the pull request without merging. Required reviews Repository administrators can require that all pull requests receive at least one approved review from someone with write or admin permissions or from a designated code owner before they're merged into a protected branch. For more information, see "About protected branches." When required reviews are enabled, anyone with access to the repository can approve changes in a pull request. However, to merge your pull request you need someone who has write or admin permissions in the repository to approve your pull request's changes in their review. If review is required from a designated code owner and the pull request affects code that has a designated owner, approval from that owner is required. If a person who requested changes isn't available to give an approved review, or if a pull request has changed significantly since it was reviewed, repository administrators or people with write access can dismiss a review. For more information, see "Dismissing a pull request review." After all required reviewers have approved a pull request, you won't be able to merge it if there are other open pull requests with pending or rejected reviews and those pull requests have a head branch pointing to the same commit. Someone with write or admin permissions will need to approve or dismiss the blocking review on the other pull requests before you can merge. Merging a pull request on GitHub Under your repository name, click Pull requests. In the "Pull Requests" list, click the pull request you'd like to merge. Depending on the merge options enabled for your repository, you can: Merge all of the commits into the base branch by clicking Merge pull request. If the Merge pull request option is not shown, then click the merge drop down menu and select Create a merge commit. Squash the commits into one commit by clicking the merge drop down menu, selecting Squash and merge and then clicking the Squash and merge button. Rebase the commits individually onto the base branch by clicking the merge drop down menu, selecting Rebase and merge and then clicking the Rebase and merge button. Note: Rebase and merge will always update the committer information and create new commit SHAs. For more information, see "About pull request merges." If you clicked Merge pull request or Squash and merge in step 3, type a commit message, or accept the default message. Under the commit message box, click Confirm merge or Confirm squash and merge. If you clicked Rebase and merge in step 3, click Confirm rebase and merge. Optionally, delete the branch. This keeps the list of branches in your repository tidy. Pull requests are merged using the --no-ff option, except for pull requests with squashed or rebased commits, which are merged using the fast-forward option. You can close corresponding issues using a keyword in your pull request or commit message. For more information, see "Closing issues using keywords." Further reading "Reverting a pull request" "Syncing your branch" using GitHub Desktop "About pull request merges" "Addressing merge conflicts" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Closing a pull request - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Collaborating with issues and pull requests / Closing a pull request Closing a pull request mac windows linux all You may choose to close a pull request without merging it into the upstream branch. This can be handy if the changes proposed in the branch are no longer needed, or if another solution has been proposed in another branch. Tip: If you opened a pull request with the wrong base branch, rather than closing it out and opening a new one, you can instead change the base branch. For more information, see "Changing the base branch of a pull request." Under your repository name, click Pull requests. In the "Pull Requests" list, click the pull request you'd like to close. At the bottom of the pull request, below the comment box, click Close pull request. Optionally, delete the branch. This keeps the list of branches in your repository tidy. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Reverting a pull request - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Collaborating with issues and pull requests / Reverting a pull request Reverting a pull request mac windows linux all You can revert a pull request after it's been merged to the upstream branch. Reverting a pull request on GitHub creates a new pull request that contains one revert of the merge commit from the original merged pull request. Note: You may need to use Git to manually revert the individual commits if: Reverting the pull request causes merge conflicts The original pull request was not originally merged on GitHub (for example, using a fast-forward merge on the command line) Under your repository name, click Pull requests. In the "Pull Requests" list, click the pull request you'd like to revert. Near the bottom of the pull request, click Revert. Merge the resulting pull request. For more information, see "Merging a pull request." Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Helping people contribute to your project - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Building a strong community / Helping people contribute to your project Helping people contribute to your project mac windows linux all Repository maintainers can set contributing guidelines to help collaborators make meaningful, useful contributions to a project. Viewing your community profile Repository maintainers can review their public repository's community profile to learn how they can help grow their community and support contributors. Setting guidelines for repository contributors To help your project contributors do good work, you can add a file with contribution guidelines to your project repository's root, docs, or .github folder. Then, whenever someone opens a pull request or creates an issue, they will see a link to that file. Adding a code of conduct to your project Adopt a code of conduct to define community standards, signal a welcoming and inclusive project, and outline procedures for handling abuse. Adding support resources to your project You can create a SUPPORT file to let people know about ways to get help with your project. Adding a license to a repository You can include an open source license in your repository to make it easier for other people to contribute. Creating an issue template for your repository When you add an issue template to your repository, project contributors will automatically see the template's contents in the issue form body. Templates customize and standardize the information you'd like included when contributors open issues. Creating a pull request template for your repository When you add a pull request template to your repository, project contributors will automatically see the template's contents in the pull request form body. Templates customize and standardize the information you'd like included when contributors create pull requests. Helping new contributors find your project with labels Apply the help wanted and good first issue labels to issues in your repository to highlight opportunities for people to contribute to your project. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Viewing your community profile - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Building a strong community / Viewing your community profile Viewing your community profile mac windows linux all Repository maintainers can review their public repository's community profile to learn how they can help grow their community and support contributors. As a repository maintainer, use the community profile checklist to see if your project meets the Open Source Guide's recommended community standards. Adopting these standards helps people use and contribute to your project more effectively. If you don't have a file named README, CODE_OF_CONDUCT, LICENSE, or CONTRIBUTING in the root of your repository, you can click Add to: draft a README. preview and edit a code of conduct template. draft some contributing guidelines. preview and edit a license template. Accessing your Community Profile On GitHub, navigate to the main page of the repository. Under your repository name, click Insights. In the left sidebar, click Community. Further reading "Editing files in your repository" Open Source Guides "Setting guidelines for repository contributors" "Adding a code of conduct to your project" "Adding a license to a repository" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Setting guidelines for repository contributors - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Building a strong community / Setting guidelines for repository contributors Setting guidelines for repository contributors mac windows linux all To help your project contributors do good work, you can add a file with contribution guidelines to your project repository's root, docs, or .github folder. Then, whenever someone opens a pull request or creates an issue, they will see a link to that file. For the repository owner, contribution guidelines are a way to communicate how people should contribute. For contributors, the guidelines help them verify that they're submitting well-formed pull requests and opening useful issues. For both owners and contributors, contribution guidelines save time and hassle caused by improperly created pull requests or issues that have to be rejected and re-submitted. Tip: Repository maintainers can set specific guidelines for issues by creating an issue template or pull request template for a repository. Adding a CONTRIBUTING file On GitHub, navigate to the main page of the repository. Above the file list, click Create new file. Decide whether to store your contributing guidelines in your repository's root, docs, or .github directory. Then, in the filename field, type the name and extension for the file. Contributing guidelines filenames are not case sensitive, and can have an extension such as .md or .txt. To make your contributing guidelines visible in the repository's root directory, type CONTRIBUTING. To make your contributing guidelines visible in the repository's docs directory, type docs/ to create the new directory, then CONTRIBUTING. In the new file, add contribution guidelines. These could include: Steps for creating good issues or pull requests. Links to external documentation, mailing lists, or a code of conduct. Community and behavioral expectations. At the bottom of the page, type a short, meaningful commit message that describes the change you made to the file. Below the commit message fields, decide whether to add your commit to the current branch or to a new branch. If your current branch is master, you should choose to create a new branch for your commit and then create a pull request. Click Propose new file. Examples of contribution guidelines If you're stumped, here are some good examples of contribution guidelines: The Atom editor contribution guidelines. The Ruby on Rails contribution guidelines. The Open Government contribution guidelines. Further reading The Open Source Guides' section "Starting an Open Source Project" "Adding a license to a repository" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Adding a code of conduct to your project - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Building a strong community / Adding a code of conduct to your project Adding a code of conduct to your project mac windows linux all Adopt a code of conduct to define community standards, signal a welcoming and inclusive project, and outline procedures for handling abuse. A code of conduct defines standards for how to engage in a community. It signals an inclusive environment that respects all contributions. It also outlines procedures for addressing problems between members of your project's community. For more information on why a code of conduct defines standards and expectations for how to engage in a community, see the Open Source Guide. Before adopting a code of conduct for your project: Research different codes of conduct designed for open source projects. Choose one that reflects your community's standards. Consider carefully whether you are willing and able to enforce it. Adding a code of conduct manually GitHub provides templates for common codes of conduct to help you quickly add a code of conduct to your project. If the code of conduct you want to use isn't available in the list, you can paste the contents of the code of conduct that you have selected into the text area of the CODE_OF_CONDUCT.md file and commit the file to your branch. Be sure to follow the attribution guidelines from the source of your code of conduct as needed. Add the CODE_OF_CONDUCT.md file to the root, docs/, or .github/ folder. Adding a code of conduct using a template On GitHub, navigate to the main page of the repository. Above the file list, click Create new file. In the file name field, type CODE_OF_CONDUCT.md. Click Choose a code of conduct template. On the left side of the page, select a code of conduct to preview and add to your project. On the right side of the page, complete the fields to populate the selected code of conduct with the appropriate information. Click Review and submit. Review the contents of the code of conduct that's in the text area. At the bottom of the page, type a short, meaningful commit message that describes the change you made to the file. Below the commit message fields, decide whether to add your commit to the current branch or to a new branch. If your current branch is master, you should choose to create a new branch for your commit and then create a pull request. Click Propose new file. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Adding support resources to your project - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Building a strong community / Adding support resources to your project Adding support resources to your project mac windows linux all You can create a SUPPORT file to let people know about ways to get help with your project. To direct people to specific support resources, you can add a SUPPORT file to your repository's root, docs, or .github folder. Then, whenever someone creates an issue in your repository, they will see a link to your project's SUPPORT file. Tip: To help people find your support guidelines, you can link to your SUPPORT file from other places in your repository, such as your README file. Adding support resources to your project On GitHub, navigate to the main page of the repository. Above the file list, click Create new file. In the file name field, type SUPPORT.md (with all caps). On the Edit new file tab, add information about how people can get support for your project. To review your SUPPORT file, click Preview. At the bottom of the page, type a short, meaningful commit message that describes the change you made to the file. Below the commit message fields, decide whether to add your commit to the current branch or to a new branch. If your current branch is master, you should choose to create a new branch for your commit and then create a pull request. Click Propose new file. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Adding a license to a repository - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Building a strong community / Adding a license to a repository Adding a license to a repository mac windows linux all You can include an open source license in your repository to make it easier for other people to contribute. If you include a detectable license in your repository, people who visit your repository will see it at the top of the repository page. To read the entire license file, click the license name. Open source licenses enable others to freely use, change, and distribute the project in your repository. For more information on repository licenses, see "Licensing a repository." Including an open source license in your repository On GitHub, navigate to the main page of the repository. Above the file list, click Create new file. In the file name field, type LICENSE or LICENSE.md (with all caps). To the right of the file name field, click Choose a license template. On the left side of the page, under "Add a license to your project," review the available licenses, then select a license from the list. Click Review and submit. At the bottom of the page, type a short, meaningful commit message that describes the change you made to the file. Below the commit message fields, decide whether to add your commit to the current branch or to a new branch. If your current branch is master, you should choose to create a new branch for your commit and then create a pull request. Click Commit new file. Further reading "Setting guidelines for repository contributors" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Creating an issue template for your repository - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Building a strong community / Creating an issue template for your repository Creating an issue template for your repository mac windows linux all When you add an issue template to your repository, project contributors will automatically see the template's contents in the issue form body. Templates customize and standardize the information you'd like included when contributors open issues. Contributors and users can use templates to create issues according to the repository's contribution guidelines. For more information, see "Setting guidelines for repository contributors." You can store your issue template in the repository's visible root directory, the docs folder, or the hidden .github directory. Issue template filenames are not case sensitive, and can have an extension such as .md or .txt. Tip: You must create your template in your repository's default branch. Templates created in other branches are not available for collaborators to use. Adding an issue template On GitHub, navigate to the main page of the repository. Above the file list, click Create new file. In the file name field: To make your issue template visible in the repository's root directory, type the name of your issue_template. For example, issue_template.md. To make your issue template visible in the repository's docs directory, type docs/ followed by the name of your issue_template. For example, docs/issue_template.md, To store your file in a hidden directory, type .github/ followed by the name of your issue_template. For example, .github/issue_template.md. In the body of the new file, add your issue template. This could include: Expected behavior and actual behavior. Steps to reproduce the problem. Specifications like the version of the project, operating system, or hardware. At the bottom of the page, type a short, meaningful commit message that describes the change you made to the file. Below the commit message fields, decide whether to add your commit to the current branch or to a new branch. If your current branch is master, you should choose to create a new branch for your commit and then create a pull request. Click Propose new file. Further reading "Creating an issue" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Creating a pull request template for your repository - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Building a strong community / Creating a pull request template for your repository Creating a pull request template for your repository mac windows linux all When you add a pull request template to your repository, project contributors will automatically see the template's contents in the pull request form body. Templates customize and standardize the information you'd like included when contributors create pull requests. Contributors can use templates to describe the proposed changes in their pull requests according to the repository's contributing guidelines. For more information, see "Setting guidelines for repository contributors." Tip: You must create your template in your repository's default branch. Templates created in other branches are not available for collaborators to use. Adding a pull request template On GitHub, navigate to the main page of the repository. Above the file list, click Create new file. Decide whether to store your pull request template in your repository's root, docs, or .github directory. Then, in the filename field, type the name and extension for the file. Pull request template filenames are not case sensitive, and can have an extension such as .md or .txt. To make your pull request template visible in the repository's root directory, type PULL_REQUEST_TEMPLATE. To make your pull request template visible in the repository's docs directory, type docs/ to create the new directory, then PULL_REQUEST_TEMPLATE. In the new file, add your pull request template. This could include: A reference to a related issue in your repository. A description of the changes proposed in the pull request. @mentions of the person or team responsible for reviewing proposed changes. At the bottom of the page, type a short, meaningful commit message that describes the change you made to the file. Below the commit message fields, decide whether to add your commit to the current branch or to a new branch. If your current branch is master, you should choose to create a new branch for your commit and then create a pull request. Click Propose new file. Further reading "Creating a pull request" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Helping new contributors find your project with labels - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Building a strong community / Helping new contributors find your project with labels Helping new contributors find your project with labels mac windows linux all Apply the help wanted and good first issue labels to issues in your repository to highlight opportunities for people to contribute to your project. You can apply these labels to issues in your public repository so that people can find them when searching by labels. For more information about searching by labels, see "Searching issues and pull requests." On GitHub, navigate to the main page of the repository. Under your repository name, click Issues. Select the checkbox next to the items you want to apply a label to. In the upper-right corner, click Label, then start typing help wanted or good first issue. Click the label's name to associate it with the selected items. Further reading "About labels" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Collaborating with your team - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Building a strong community / Collaborating with your team Collaborating with your team mac windows linux all Within an organization, your team can work together across projects using team discussions. About team discussions Your team can plan together, update one another, or talk about any topic you'd like in discussion posts on your team's page in an organization. Creating a team discussion Any organization member can create a public team discussion post. To create a private team discussion post, you must be a member of the team or an organization owner. Editing or deleting a team discussion Organization members can edit or delete discussions on a team's page. If you're an organization member, you can edit or delete the discussion. Pinning a team discussion You can pin important discussions to your organization's team pages for easy reference, and unpin discussions that are no longer relevant. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support About team discussions - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Building a strong community / About team discussions About team discussions mac windows linux all Your team can plan together, update one another, or talk about any topic you'd like in discussion posts on your team's page in an organization. On your team's page, you can use team discussions for conversations that span across projects or repositories and don't belong in a specific issue or pull request. Instead of opening an issue in a repository to discuss an idea, you can include the entire team by having a conversation in a team discussion. Any organization member can post on your team's page or participate in a public discussion. Private posts are only visible to team members and organization owners, and public posts are visible to all members of the organization. You can link to any team discussion to reference it elsewhere. You can pin important posts to your team's page for quick reference later. For more information, see "Pinning a team discussion." Notifications for team discussions When someone posts or replies to a public discussion on a team's page, members of the team and members of any child teams receive email or web notifications. When someone posts or replies to a private discussion on a team's page, only members of the team receive notifications. Tip: Depending on your notification settings, you'll receive updates by email, the web notifications page on GitHub, or both. For more information, see "About email notifications" and "About web notifications." By default, if your username is mentioned in a team discussion, you'll receive notifications for the post mentioning your username and any replies to that post. Also, by default, if you reply to a post, you will receive notifications for other replies to the post. To turn off notifications for team discussions, you can unsubscribe to a specific discussion post or change your notification settings to unwatch or completely ignore a specific team's discussions. You can subscribe to notifications for a specific discussion post even if you're unwatching that team's discussions. For more information, see: "Subscribing to and unsubscribing from conversations." "Watching and unwatching team discussions" "Nested teams" Further reading "About conversations on GitHub" "About teams" "Creating a team discussion" "Editing or deleting a team discussion" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Creating a team discussion - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Building a strong community / Creating a team discussion Creating a team discussion mac windows linux all Any organization member can create a public team discussion post. To create a private team discussion post, you must be a member of the team or an organization owner. Private posts are only visible to team members and organization owners, and public posts are visible to all members of the organization. For more information, see "About team discussions." In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click Teams. On the Teams tab, click the name of the team. At the top of the team's page, click Discussions. Type a team discussion title and a comment to start a conversation. Optionally, select whether you want your post to be private or public using the drop-down menu. Click Comment. Further reading "About team discussions" "Editing or deleting a team discussion" "Pinning a team discussion" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Editing or deleting a team discussion - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Building a strong community / Editing or deleting a team discussion Editing or deleting a team discussion mac windows linux all Organization members can edit or delete discussions on a team's page. If you're an organization member, you can edit or delete the discussion. In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click Teams. On the Teams tab, click the name of the team. At the top of the team's page, click Discussions. Click next to the team discussion you want to edit or delete. Click Edit. Optionally, click Delete. Modify the team discussion title and comment as needed, and click Update comment. Further reading "About team discussions" "Creating a team discussion" "Pinning a team discussion" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Pinning a team discussion - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Building a strong community / Pinning a team discussion Pinning a team discussion mac windows linux all You can pin important discussions to your organization's team pages for easy reference, and unpin discussions that are no longer relevant. In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click Teams. On the Teams tab, click the name of the team. At the top of the team's page, click Discussions. Click next to the team discussion you want to pin. You can also unpin a discussion by clicking the icon. Further reading "About team discussions" "Creating a team discussion" "Editing or deleting a team discussion" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Moderating comments and conversations - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Building a strong community / Moderating comments and conversations Moderating comments and conversations mac windows linux all Moderating conversations creates a welcoming community for all contributors to your project by promoting healthy collaboration and de-escalating conflict. You can apply your community's code of conduct to discussions by editing and deleting comments and locking conversations. Editing a comment People with write access to a repository can edit comments on issues, pull requests, and commits. Organization owners, team maintainers, and the comment author can edit a comment on a team page. Deleting a comment People with write access to a repository can delete comments on issues, pull requests, and commits. Organization owners, team maintainers, and the comment author can delete a comment on a team page. Locking conversations Repository owners and collaborators, and people with write access to a repository, can lock conversations on issues, pull requests, and commits permanently or temporarily to defuse a heated interaction. Further reading "Helping people contribute to your project" "Encouraging positive contributions in your organization" "Encouraging positive contributions to your project" "Reporting abuse or spam" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Editing a comment - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Building a strong community / Editing a comment Editing a comment mac windows linux all People with write access to a repository can edit comments on issues, pull requests, and commits. Organization owners, team maintainers, and the comment author can edit a comment on a team page. It's appropriate to edit a comment and remove content that doesn't contribute to the conversation and violates your community's code of conduct or GitHub's Community Guidelines. When you edit a comment, note the location that the content was removed from and optionally, the reason for removing it. The edited dropdown at the top of the comment contains a history of edits showing the user and timestamp for each edit. Navigate to the comment you'd like to edit. In the upper-right corner of the comment, click . In the comment window, delete the content you'd like to remove, then type [REDACTED] to replace it. At the bottom of the comment, type a note indicating that you have edited the comment, and optionally, why you edited the comment. Click Update comment. Further reading "Helping people contribute to your project" "Deleting a comment" "Locking conversations" "Encouraging positive contributions in your organization" "Encouraging positive contributions to your project" "Reporting abuse or spam" "Limiting interactions with your repository" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Deleting a comment - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Building a strong community / Deleting a comment Deleting a comment mac windows linux all People with write access to a repository can delete comments on issues, pull requests, and commits. Organization owners, team maintainers, and the comment author can delete a comment on a team page. Deleting a comment is your last resort as a moderator. It's appropriate to delete a comment if the entire comment adds no constructive content to a conversation and violates your community's code of conduct or GitHub's Community Guidelines. If a comment contains some constructive content that adds to the conversation in the issue or pull request, you can edit the comment instead. Note: The initial comment (or body) of an issue or pull request can't be deleted. Instead, you can edit issue and pull request bodies to remove unwanted content. For more information, see "Editing a comment." Navigate to the comment you'd like to delete. In the upper-right corner of the comment, click . Optionally, write a comment noting that you deleted a comment and why. Further reading "Helping people contribute to your project" "Editing a comment" "Locking conversations" "Encouraging positive contributions in your organization" "Encouraging positive contributions to your project" "Reporting abuse or spam" "Limiting interactions with your repository" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Locking conversations - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Building a strong community / Locking conversations Locking conversations mac windows linux all Repository owners and collaborators, and people with write access to a repository, can lock conversations on issues, pull requests, and commits permanently or temporarily to defuse a heated interaction. It's appropriate to lock a conversation when the entire conversation is not constructive or violates your community's code of conduct or GitHub's Community Guidelines. When you lock a conversation, you can also specify a reason, which is publicly visible. While a conversation is locked, only people with write access and repository owners and collaborators can add comments. Optionally, write a comment explaining why you're locking the conversation. In the right margin of the issue or pull request, or above the comment box on the commit page, click Lock conversation. Optionally, choose a reason for locking the conversation. Read the information about locking conversations and click Lock conversation on this issue, Lock conversation on this pull request, or Lock conversation on this commit. When you're ready to unlock the conversation, click Unlock conversation. Further reading "Helping people contribute to your project" "Editing a comment" "Deleting a comment" "Encouraging positive contributions in your organization" "Encouraging positive contributions to your project" "Reporting abuse or spam" "Limiting interactions with your repository" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Encouraging positive contributions to your project - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Building a strong community / Encouraging positive contributions to your project Encouraging positive contributions to your project mac windows linux all To build a positive environment for contributors and manage the community around your project, you can block and unblock a user from your personal account and lock conversations within issues and pull requests. Limiting interactions with your repository You can temporarily restrict certain users from commenting, opening issues, or creating pull requests in your public repository to enforce a period of limited activity. Blocking a user from your personal account You can block a user to deny them access to your activity and repositories, and to prevent them from sending you notifications. Viewing users you've blocked from your personal account You can view a list of all users you've blocked from your personal account. Unblocking a user from your personal account If you've mended fences with a GitHub user you've blocked, you can unblock their account. Reporting abuse or spam You can report behavior that violates GitHub's Community Guidelines or Terms of Service to GitHub Support. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Limiting interactions with your repository - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Building a strong community / Limiting interactions with your repository Limiting interactions with your repository mac windows linux all You can temporarily restrict certain users from commenting, opening issues, or creating pull requests in your public repository to enforce a period of limited activity. People with owner or admin access to a repository can limit activity to certain users and restrict all other users from interacting with your repository for 24 hours. After 24 hours, users' regular repository permissions are restored. You can temporarily disable interactions from all users with accounts created in the last 24 hours, or from users who are not prior contributors or collaborators for the repository. On GitHub, navigate to the main page of the repository. Under your repository name, click Settings. Under "Temporary interaction limits", select one or more categories of users. To limit access to users with accounts more than 24 hours old, select Limit to existing users. To limit access to users who have previously committed to the repository's master branch, select Limit to prior contributors. To limit access to people with push access to the repository, select Limit to repository collaborators. Further reading "Reporting abuse or spam" "Managing an individual's access to an organization repository" "Permission levels for a user account repository" "Repository permission levels for an organization" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Blocking a user from your personal account - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Building a strong community / Blocking a user from your personal account Blocking a user from your personal account mac windows linux all You can block a user to deny them access to your activity and repositories, and to prevent them from sending you notifications. You can block a user in your account settings or from the user's profile. The user will not get notified when you block them. If you want to avoid contributing to the same project as someone you've blocked, you can choose to display a warning on any repositories with prior contributions from a blocked user. Tip: If you're blocking a user because of a heated conversation, consider locking the conversation so only collaborators can comment. When you block a user: The user stops following you The user stops watching your repositories The user's stars and issue assignments are removed from your repositories The user is removed as a collaborator on your repositories You're removed as a collaborator on their repositories After you've blocked a user, they cannot: Send you any notifications, including by @mentioning your username Follow you or see your content in their activity feed Invite you as a collaborator on their repositories Cross-reference your repositories in comments Fork, watch, or star your repositories In repositories you own, blocked users also cannot: Open issues or send pull requests Comment on issues, pull requests, or commits Add or edit wiki pages Blocking a user in your account settings In the upper-right corner of any page, click your profile photo, then click Settings. In your user settings sidebar, click Blocked users. Under "Block a user", type the username of the user you'd like to block, then click Block user. Optionally, to display a warning when you visit a repository where a blocked user is a contributor, select Warn me when a blocked user is a prior contributor to a repository. Blocking a user from their profile page Visit the user's profile page. In the left sidebar, under the user's profile picture, click Block or report user. Click Block user. Contact GitHub Support if you're being harassed. GitHub does not tolerate abuse. For more information on GitHub's policies, see our Terms of Service and Community Guidelines. Further reading "Viewing users you've blocked from your personal account" "Unblocking a user from your personal account" "Blocking a user from your organization" "Unblocking a user from your organization" "Reporting abuse or spam" "Limiting interactions with your repository" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Viewing users you've blocked from your personal account - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Building a strong community / Viewing users you've blocked from your personal account Viewing users you've blocked from your personal account mac windows linux all You can view a list of all users you've blocked from your personal account. In the upper-right corner of any page, click your profile photo, then click Settings. In your user settings sidebar, click Blocked users. Under "Blocked users", review the list of users you've blocked from your account. Further reading "Blocking a user from your personal account" "Unblocking a user from your personal account" "Viewing users who are blocked from your organization" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Unblocking a user from your personal account - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Building a strong community / Unblocking a user from your personal account Unblocking a user from your personal account mac windows linux all If you've mended fences with a GitHub user you've blocked, you can unblock their account. When you unblock a user, they'll be able to invite you to be a collaborator to their repositories. If they @mention you anywhere on GitHub, you'll receive notifications. In repositories you own, the user will be able to collaborate normally. You can unblock a user in your account settings or from the user's profile page. Unblocking a user in your account settings In the upper-right corner of any page, click your profile photo, then click Settings. In your user settings sidebar, click Blocked users. Under "Blocked users", next to the user you'd like to unblock, click Unblock. Unblocking a user from their profile page Visit the user's profile page. In the left sidebar, under the user's profile picture, click Unblock or report user. Click Unblock user. Tip: Settings that were removed when you blocked the user, such as collaborator status, stars, and follows, are not restored when you unblock the user. Further reading "Blocking a user from your personal account" "Blocking a user from your organization" "Unblocking a user from your organization" "Reporting abuse or spam" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Reporting abuse or spam - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Building a strong community / Reporting abuse or spam Reporting abuse or spam mac windows linux all You can report behavior that violates GitHub's Community Guidelines or Terms of Service to GitHub Support. Visit the user's profile page. In the left sidebar, under the user's profile picture, click Block or report user. Click Report abuse. Complete the contact form to tell GitHub Support about the user's behavior, then click Send request. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Inviting collaborators to a personal repository - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing Repository Collaborators / Inviting collaborators to a personal repository Inviting collaborators to a personal repository mac windows linux all You can invite users to become collaborators to your personal repository. Repositories owned by an organization can grant more granular access. For more information, see "Access permissions on GitHub." Note: GitHub limits the number of people who can be added to a repository within a 24-hour period. If you exceed this limit, either wait 24 hours or create an organization. Ask for the username of the person you're inviting as a collaborator. If they don't have a username yet, they can sign up for GitHub. On GitHub, navigate to the main page of the repository. Under your repository name, click Settings. In the left sidebar, click Collaborators. Under "Collaborators", start typing the collaborator's username. Select the collaborator's username from the drop-down menu. Click Add collaborator. The user will receive an email inviting them to the repository. Once they accept your invitation, they will have collaborator access to your repository. Further reading "Removing a collaborator from a personal repository" "Removing yourself from a collaborator's repository" "Organizing members into teams" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Removing a collaborator from a personal repository - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing Repository Collaborators / Removing a collaborator from a personal repository Removing a collaborator from a personal repository mac windows linux all When you remove a collaborator from your project, they lose read/write access to your repository. If the repository is private and the person has created a fork, then that fork is also deleted. Deleting forks of private repositories While forks of private repositories are deleted when a collaborator is removed, the person will still retain any local clones of your repository. Removing collaborator permissions from a person contributing to a repository On GitHub, navigate to the main page of the repository. Under your repository name, click Settings. In the left sidebar, click Collaborators & teams. Next to the collaborator you want to remove, click the X icon. Further reading "Removing organization members from a team" "Removing an outside collaborator from an organization repository" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Removing yourself from a collaborator's repository - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing Repository Collaborators / Removing yourself from a collaborator's repository Removing yourself from a collaborator's repository mac windows linux all If you no longer want to be a collaborator on someone else's repository, you can remove yourself. In the upper-right corner of any page, click your profile photo, then click Settings. In the left sidebar, click Repositories. Next to the repository you want to leave, click Leave. Read the warning carefully and then click "I understand, leave this repository" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support About remote repositories - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing Remotes / About remote repositories About remote repositories mac windows linux all GitHub's collaborative approach to development depends on publishing commits from your local repository for other people to view, fetch, and update. A remote URL is Git's fancy way of saying "the place where your code is stored." That URL could be your repository on GitHub, or another user's fork, or even on a completely different server. You can only push to two types of URL addresses: An HTTPS URL like https://github.com/user/repo.git An SSH URL, like git@github.com:user/repo.git Git associates a remote URL with a name, and your default remote is usually called origin. For information on the differences between these URLs, see "Which remote URL should I use?" Creating remotes You can use the git remote add command to match a remote URL with a name. For example, you'd type the following in the command line: git remote add origin <REMOTE_URL> This associates the name origin with the REMOTE_URL. You can use the command git remote set-url to change a remote's URL. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Adding a remote - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing Remotes / Adding a remote Adding a remote mac windows linux all To add a new remote, use the git remote add command on the terminal, in the directory your repository is stored at. The git remote add command takes two arguments: A remote name, for example, origin A remote URL, for example, https://github.com/user/repo.git For example: git remote add origin https://github.com/user/repo.git # Set a new remote git remote -v # Verify new remote origin https://github.com/user/repo.git (fetch) origin https://github.com/user/repo.git (push) Not sure which URL to use? Check out "Which remote URL should I use?" Troubleshooting You may encounter these errors when trying to add a remote. Remote name already exists This error means you've tried to add a remote with a name that already exists in your local repository: git remote add origin https://github.com/octocat/Spoon-Knife fatal: remote origin already exists. To fix this, you can Use a different name for the new remote Rename the existing remote Delete the existing remote Further reading "Working with Remotes" from the Pro Git book Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Changing a remote's URL - User Documentation <meta name="Description" content=" The git remote set-url command changes an existing remote repository URL. Tip: For information on the difference between HTTPS and SSH URLs, see \"Which remote URL should I use?\" The git remote se…"> GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing Remotes / Changing a remote's URL Changing a remote's URL mac windows linux all The git remote set-url command changes an existing remote repository URL. Tip: For information on the difference between HTTPS and SSH URLs, see "Which remote URL should I use?" The git remote set-url command takes two arguments: An existing remote name. For example, origin or upstream are two common choices. A new URL for the remote. For example: If you're updating to use HTTPS, your URL might look like: https://github.com/USERNAME/REPOSITORY.git If you're updating to use SSH, your URL might look like: git@github.com:USERNAME/REPOSITORY.git Switching remote URLs from SSH to HTTPS Open TerminalTerminalGit Bash. Change the current working directory to your local project. List your existing remotes in order to get the name of the remote you want to change. git remote -v origin git@github.com:USERNAME/REPOSITORY.git (fetch) origin git@github.com:USERNAME/REPOSITORY.git (push) Change your remote's URL from SSH to HTTPS with the git remote set-url command. git remote set-url origin https://github.com/USERNAME/REPOSITORY.git Verify that the remote URL has changed. git remote -v # Verify new remote URL origin https://github.com/USERNAME/REPOSITORY.git (fetch) origin https://github.com/USERNAME/REPOSITORY.git (push) The next time you git fetch, git pull, or git push to the remote repository, you'll be asked for your GitHub username and password. If you have two-factor authentication enabled, you must create a personal access token to use instead of your GitHub password. You can use a credential helper so Git will remember your GitHub username and password every time it talks to GitHub. Switching remote URLs from HTTPS to SSH Open TerminalTerminalGit Bash. Change the current working directory to your local project. List your existing remotes in order to get the name of the remote you want to change. git remote -v origin https://github.com/USERNAME/REPOSITORY.git (fetch) origin https://github.com/USERNAME/REPOSITORY.git (push) Change your remote's URL from HTTPS to SSH with the git remote set-url command. git remote set-url origin git@github.com:USERNAME/REPOSITORY.git Verify that the remote URL has changed. git remote -v # Verify new remote URL origin git@github.com:USERNAME/REPOSITORY.git (fetch) origin git@github.com:USERNAME/REPOSITORY.git (push) Troubleshooting You may encounter these errors when trying to changing a remote. No such remote '[name]' This error means that the remote you tried to change doesn't exist: git remote set-url sofake https://github.com/octocat/Spoon-Knife fatal: No such remote 'sofake' Check that you've correctly typed the remote name. Further reading "Working with Remotes" from the Pro Git book Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Renaming a remote - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing Remotes / Renaming a remote Renaming a remote mac windows linux all Use the git remote rename command to rename an existing remote. The git remote rename command takes two arguments: An existing remote name, for example, origin A new name for the remote, for example, destination Example These examples assume you're cloning using HTTPS, which is recommended. git remote -v # View existing remotes origin https://github.com/OWNER/REPOSITORY.git (fetch) origin https://github.com/OWNER/REPOSITORY.git (push) git remote rename origin destination # Change remote name from 'origin' to 'destination' git remote -v # Verify remote's new name destination https://github.com/OWNER/REPOSITORY.git (fetch) destination https://github.com/OWNER/REPOSITORY.git (push) Troubleshooting You may encounter these errors when trying to rename a remote. Could not rename config section 'remote.[old name]' to 'remote.[new name]' This error means that the remote you tried the old remote name you typed doesn't exist. You can check which remotes currently exist with the git remote -v command: git remote -v # View existing remotes origin https://github.com/OWNER/REPOSITORY.git (fetch) origin https://github.com/OWNER/REPOSITORY.git (push) Remote [new name] already exists. This error means that the remote name you want to use already exists. To solve this, either use a different remote name, or rename the original remote. Further reading "Working with Remotes" from the Pro Git book Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Removing a remote - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing Remotes / Removing a remote Removing a remote mac windows linux all Use the git remote rm command to remove a remote URL from your repository. The git remote rm command takes one argument: A remote name, for example, destination Example These examples assume you're cloning using HTTPS, which is recommended. git remote -v # View current remotes origin https://github.com/OWNER/REPOSITORY.git (fetch) origin https://github.com/OWNER/REPOSITORY.git (push) destination https://github.com/FORKER/REPOSITORY.git (fetch) destination https://github.com/FORKER/REPOSITORY.git (push) git remote rm destination # Remove remote git remote -v # Verify it's gone origin https://github.com/OWNER/REPOSITORY.git (fetch) origin https://github.com/OWNER/REPOSITORY.git (push) Note: git remote rm does not delete the remote repository from the server. It simply removes the remote and its references from your local repository. Troubleshooting You may encounter these errors when trying to remove a remote. Could not remove config section 'remote.[name]' This error means that the remote you tried to delete doesn't exist: git remote rm sofake error: Could not remove config section 'remote.sofake' Check that you've correctly typed the remote name. Further reading "Working with Remotes" from the Pro Git book Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Which remote URL should I use? - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing Remotes / Which remote URL should I use? Which remote URL should I use? mac windows linux all There are several ways to clone repositories available on GitHub. When you view a repository while signed in to your account, the URLs you can use to clone the project onto your computer are available below the repository details: For information on setting or changing your remote URL, see "Changing a remote's URL." Cloning with HTTPS URLs (recommended) The https:// clone URLs are available on all repositories, public and private. These URLs work everywhere--even if you are behind a firewall or proxy. In certain cases, if you'd rather use SSH, you might be able to use SSH over the HTTPS port. When you git clone, git fetch, git pull, or git push to a remote repository using HTTPS URLs on the command line, you'll be asked for your GitHub username and password. If you have enabled two-factor authentication, or if you are accessing an organization that uses SAML single sign-on, you must provide a personal access token instead of entering your password for HTTPS Git. Tips: You can use a credential helper so Git will remember your GitHub username and password every time it talks to GitHub. To clone a repository without authenticating to GitHub on the command line, you can use GitHub Desktop to clone instead. Cloning with SSH URLs SSH URLs provide access to a Git repository via SSH, a secure protocol. To use these URLs, you must generate an SSH keypair on your computer and add the public key to your GitHub account. For information on setting up an SSH keypair, see "Generating an SSH key." When you git clone, git fetch, git pull, or git push to a remote repository using SSH URLs, you'll be prompted for a password and must provide your SSH key passphrase. If you are accessing an organization that uses SAML single sign-on, you won't be able to clone with SSH. Instead, clone with the HTTPS URL. Tip: SSH URLs can be used locally, or as a secure way of deploying your code to production servers. You can also use SSH agent forwarding with your deploy script to avoid managing keys on the server. Cloning with Subversion You can also use a Subversion client to access any repository on GitHub. Subversion offers a vastly different feature set than Git; for a quick overview, see "What are the differences between Subversion and Git?" We have a separate article with more information on how to interact with GitHub using Subversion. Further reading "Working with Remotes" from the Pro Git book Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Why is Git always asking for my password? - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing Remotes / Why is Git always asking for my password? Why is Git always asking for my password? mac windows linux all If Git prompts you for a username and password every time you try to interact with GitHub, you're probably using the HTTPS clone URL for your repository. Using an HTTPS remote URL has some advantages: it's easier to set up than SSH, and usually works through strict firewalls and proxies. However, it also prompts you to enter your GitHub credentials every time you pull or push a repository. You can configure Git to store your password for you. If you'd like to set that up, read all about setting up password caching. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Dealing with non-fast-forward errors - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing Remotes / Dealing with non-fast-forward errors Dealing with non-fast-forward errors mac windows linux all Sometimes, Git can't make your change to a remote repository without losing commits. When this happens, your push is refused. If another person has pushed to the same branch as you, Git won't be able to push your changes: git push origin master To https://github.com/USERNAME/REPOSITORY.git ! [rejected] master -> master (non-fast-forward) error: failed to push some refs to 'https://github.com/USERNAME/REPOSITORY.git' To prevent you from losing history, non-fast-forward updates were rejected Merge the remote changes (e.g. 'git pull') before pushing again. See the 'Note about fast-forwards' section of 'git push --help' for details. You can fix this by fetching and merging the changes made on the remote branch with the changes that you have made locally: git fetch origin # Fetches updates made to an online repository git merge origin YOUR_BRANCH_NAME # Merges updates made online with your local work Or, you can simply use git pull to perform both commands at once: git pull origin YOUR_BRANCH_NAME # Grabs online updates and merges them with your local work Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Fetching a remote - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing Remotes / Fetching a remote Fetching a remote mac windows linux all When working with other people's repositories, there are a few basic Git commands to remember: git clone git fetch git merge git pull These commands are very useful when interacting with a remote repository. clone and fetch download remote code from a repository's remote URL to your local computer, merge is used to merge different people's work together with yours, and pull is a combination of fetch and merge. We'll go in-depth on these commands below. Clone To grab a complete copy of another user's repository, use git clone like this: git clone https://github.com/USERNAME/REPOSITORY.git # Clones a repository to your computer You can choose from several different URLs when cloning a repository. While logged in to GitHub, these URLs are available below the repository details: When you run git clone, the following actions occur: A new folder called repo is made It is initialized as a Git repository A remote named origin is created, pointing to the URL you cloned from All of the repository's files and commits are downloaded there The default branch (usually called master) is checked out For every branch foo in the remote repository, a corresponding remote-tracking branch refs/remotes/origin/foo is created in your local repository. You can usually abbreviate such remote-tracking branch names to origin/foo. Fetch Use git fetch to retrieve new work done by other people. Fetching from a repository grabs all the new remote-tracking branches and tags without merging those changes into your own branches. If you already have a local repository with a remote URL set up for the desired project, you can grab all the new information by using git fetch *remotename* in the terminal: git fetch remotename # Fetches updates made to a remote repository Otherwise, you can always add a new remote and then fetch. Merge Merging combines your local changes with changes made by others. Typically, you'd merge a remote-tracking branch (i.e., a branch fetched from a remote repository) with your local branch: git merge remotename/branchname # Merges updates made online with your local work Pull git pull is a convenient shortcut for completing both git fetch and git mergein the same command: git pull remotename branchname # Grabs online updates and merges them with your local work Because pull performs a merge on the retrieved changes, you should ensure that your local work is committed before running the pull command. If you run into a merge conflict you cannot resolve, or if you decide to quit the merge, you can use git merge --abort to take the branch back to where it was in before you pulled. Further reading "Working with Remotes" from the Pro Git book" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Pushing to a remote - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing Remotes / Pushing to a remote Pushing to a remote mac windows linux all Use git push to push commits made on your local branch to a remote repository. The git push command takes two arguments: A remote name, for example, origin A branch name, for example, master For example: git push <REMOTENAME> <BRANCHNAME> As an example, you usually run git push origin master to push your local changes to your online repository. Renaming branches To rename a branch, you'd use the same git push command, but you would add one more argument: the name of the new branch. For example: git push <REMOTENAME> <LOCALBRANCHNAME>:<REMOTEBRANCHNAME> This pushes the LOCALBRANCHNAME to your REMOTENAME, but it is renamed to REMOTEBRANCHNAME. Dealing with "non-fast-forward" errors If your local copy of a repository is out of sync with, or "behind," the upstream repository you're pushing to, you'll get a message saying non-fast-forward updates were rejected. This means that you must retrieve, or "fetch," the upstream changes, before you are able to push your local changes. For more information on this error, see "Dealing with non-fast-forward errors." Pushing tags By default, and without additional parameters, git push sends all matching branches that have the same names as remote branches. To push a single tag, you can issue the same command as pushing a branch: git push <REMOTENAME> <TAGNAME> To push all your tags, you can type the command: git push <REMOTENAME> --tags Deleting a remote branch or tag The syntax to delete a branch is a bit arcane at first glance: git push <REMOTENAME> :<BRANCHNAME> Note that there is a space before the colon. The command resembles the same steps you'd take to rename a branch. However, here, you're telling Git to push nothing into BRANCHNAME on REMOTENAME. Because of this, git push deletes the branch on the remote repository. Remotes and forks You might already know that you can "fork" repositories on GitHub. When you clone a repository you own, you provide it with a remote URL that tells Git where to fetch and push updates. If you want to collaborate with the original repository, you'd add a new remote URL, typically called upstream, to your local Git clone: git remote add upstream <THEIR_REMOTE_URL> Now, you can fetch updates and branches from their fork: git fetch upstream # Grab the upstream remote's branches remote: Counting objects: 75, done. remote: Compressing objects: 100% (53/53), done. remote: Total 62 (delta 27), reused 44 (delta 9) Unpacking objects: 100% (62/62), done. From https://github.com/octocat/repo * [new branch] master -> upstream/master When you're done making local changes, you can push your local branch to GitHub and initiate a pull request. For more information on working with forks, see "Syncing a fork". Further reading The "Remotes" chapter from the "Pro Git" book git remote man page "Git cheatsheet" "What is a good Git workflow?" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Updating credentials from the OSX Keychain - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing Remotes / Updating credentials from the OSX Keychain Updating credentials from the OSX Keychain mac windows linux all You'll need to update your saved username and password in the git-credential-osxkeychain helper if you change your password or username on GitHub. Updating your credentials via Keychain Access In Finder, search for the Keychain Access app. In Keychain Access, search for github.com. Find the "internet password" entry for github.com. Edit or delete the entry accordingly. Deleting your credentials via the command line Through the command line, you can use the credential helper directly to erase the keychain entry. To do this, type the following command: git credential-osxkeychain erase host=github.com protocol=https [Press Return] If it's successful, nothing will print out. To test that it works, try and clone a repository from GitHub. If you are prompted for a password, the keychain entry was deleted. Further reading "Caching your GitHub password in Git" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Caching your GitHub password in Git - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing Remotes / Caching your GitHub password in Git Caching your GitHub password in Git mac windows linux all If you're cloning GitHub repositories using HTTPS, you can use a credential helper to tell Git to remember your GitHub username and password every time it talks to GitHub. If you clone GitHub repositories using SSH, then you authenticate using SSH keys instead of a username and password. For help setting up an SSH connection, see Generating an SSH Key. Tips: You need Git 1.7.10 or newer to use the osxkeychain credential helper. If you installed Git using Homebrew, the osxkeychain helper will already be installed. If you're running Mac OS X 10.7 and above and you installed Git through Apple's Xcode Command Line Tools, then osxkeychain helper is automatically included in your Git installation. Install Git and the osxkeychain helper and tell Git to use it. Find out if Git and the osxkeychain helper are already installed: git credential-osxkeychain # Test for the cred helper Usage: git credential-osxkeychain <get|store|erase> If the osxkeychain helper isn't installed and you're running OS X version 10.9 or above, your computer will prompt you to download it as a part of the Xcode Command Line Tools: git credential-osxkeychain xcode-select: note: no developer tools were found at '/Applications/Xcode.app', requesting install. Choose an option in the dialog to download the command line developer tools. Alternatively, you can install Git and the osxkeychain helper by using Homebrew: $ brew install git Tell Git to use osxkeychain helper using the global credential.helper config: git config --global credential.helper osxkeychain # Set git to use the osxkeychain credential helper The next time you clone an HTTPS URL that requires a password, you'll be prompted for your username and password, and to grant access to the OSX keychain. After you've done this, the username and password are stored in your keychain and you won't be required to type them in to Git again. Tip: You need Git 1.7.10 or newer to use the credential helper. You can also install a native Git shell, such as Git for Windows. With Git for Windows, running the following in the command line will store your credentials: git config --global credential.helper wincred Tip: You need Git 1.7.10 or newer to use the credential helper. Turn on the credential helper so that Git will save your password in memory for some time. By default, Git will cache your password for 15 minutes. In Terminal, enter the following: git config --global credential.helper cache # Set git to use the credential memory cache To change the default password cache timeout, enter the following: git config --global credential.helper 'cache --timeout=3600' # Set the cache to timeout after 1 hour (setting is in seconds) Tip: You need Git 1.7.10 or newer to use the credential helper. Turn on the credential helper so that Git will save your password in memory for some time. By default, Git will cache your password for 15 minutes. On the command line, enter the following: git config --global credential.helper cache # Set git to use the credential memory cache To change the default password cache timeout, enter the following: git config --global credential.helper 'cache --timeout=3600' # Set the cache to timeout after 1 hour (setting is in seconds) Further reading "Updating credentials from the OSX Keychain" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support About Releases - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Releases / About Releases About Releases mac windows linux all Releases are GitHub's way of packaging and providing software to your users. You can think of it as a replacement to using downloads to provide software. With Releases, you can provide links to binary files, as well as release notes describing your changes. At their core, Releases are based on Git tags. Tags mark a specific point in the history of your project, so they're a great way to indicate a Release. Releases are ordered by a tag's date in the following way: If it's an annotated tag, the tag object's date is used. If it's a lightweight tag, then the commit object's date is used. For more information about viewing your existing tags, see "Working With Tags." Limitations on binary files We don't limit the total size of your binary release files, nor the bandwidth used to deliver them. However, each individual file must be under 2 GB in size. Further reading "Creating releases" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Creating Releases - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Releases / Creating Releases Creating Releases mac windows linux all Releases are a great way to ship projects on GitHub to your users. Note: Only users with write access to the repository can view drafts of releases. For more information, see: "Permission levels for a user account repository" "Repository permission levels for an organization" On GitHub, navigate to the main page of the repository. Under your repository name, click Releases. Click Draft a new release. Type a version number for your release. Versions are based on Git tags. We recommend naming tags that fit within semantic versioning. Select a branch that contains the project you want to release. Usually, you'll want to release against your master branch, unless you're releasing beta software. Type a title and description that describes your release. If you'd like to include binary files along with your release, such as compiled programs, drag and drop or select files manually in the binaries box. If the release is unstable, select This is a pre-release to notify users that it's not ready for production. If you're ready to publicize your release, click Publish release. Otherwise, click Save draft to work on it later. Automatically creating releases If you'd like to automatically create releases (either from the command line or in a script), see "Releases" in the GitHub Developer documentation. Further reading "Linking to releases" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Working with Tags - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Releases / Working with Tags Working with Tags mac windows linux all View and apply tags created from the Git command line in your repository in GitHub. On GitHub, navigate to the main page of the repository. Under your repository name, click Releases. At the top of the Releases page, click Tags. Tip: Releases are also lightweight Git tags, with some extra awesome features to help you release software. For more information, see "About releases." Further reading "Signing tags using GPG" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Editing and deleting releases - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Releases / Editing and deleting releases Editing and deleting releases mac windows linux all After creating a release, you may need to change its attributes or delete it altogether. Editing a release You can edit several parts of a Release from the Release edit page. On GitHub, navigate to the main page of the repository. Under your repository name, click Releases. On the Releases page, to the right of the release you want to edit, click Edit. On the Release edit page, you can: Select a new tag from the tag dropdown. Edit the release's title. Edit the release's description. Add a binary file. Mark the release as a pre-release. Deleting a release Tip: You must delete all binary files attached to a release before you can delete the release. On GitHub, navigate to the main page of the repository. Under your repository name, click Releases. On the Release page, click the name of the release you wish to delete. In the upper-right corner of the page, click Delete. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Getting the download count for your releases - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Releases / Getting the download count for your releases Getting the download count for your releases mac windows linux all You can collect metadata about your Releases via the API. To see how many times a file in a Release was downloaded, make a GET request to the API for a single release. Within the JSON payload, every asset has a key called download_count. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Linking to releases - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Releases / Linking to releases Linking to releases mac windows linux all You can share every release you create on GitHub with a unique URL. On GitHub, navigate to the main page of the repository. Under your repository name, click Releases. Find the release you want to link to, and on the left side of the page, click on the version number. Linking to the latest release On GitHub, navigate to the main page of the repository. Under your repository name, click Releases. Right click on Latest Release and copy the URL to share it. The suffix of this URL is always /releases/latest. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Accessing basic repository data - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Visualizing repository data with graphs / Accessing basic repository data Accessing basic repository data mac windows linux all You can view basic information about a repository, such as the repository's activity, traffic, and contribution activity. About repository graphs Repository graphs help you view and analyze data for your repository. Viewing a summary of repository activity You can view an overview of a repository's activity through Pulse. Pulse includes a list of open and merged pull requests, open and closed issues, and a graph showing the commit activity for the top 15 users who committed to the default branch of the project in the selected time period. Viewing contribution activity in a repository You can view the top 100 contributors to a repository in the Contributors graph. Merge commits and commits that don't include changes aren't included in this graph. Viewing traffic to a repository Anyone with push access to a repository can view its traffic, including full clones (not fetches), visitors from the past 14 days, referring sites, and popular content in the Traffic graph. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support About repository graphs - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Visualizing repository data with graphs / About repository graphs About repository graphs mac windows linux all Repository graphs help you view and analyze data for your repository. A repository's graphs give you information on traffic, projects that depend on the repository, contributors and commits to the repository, and a repository's forks and network. If you maintain a repository, you can use this data to get a better understanding of who's using your repository and why they're using it. Further reading "Accessing basic repository data" "Analyzing changes to a repository's content" "Understanding connections between repositories" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Viewing a summary of repository activity - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Visualizing repository data with graphs / Viewing a summary of repository activity Viewing a summary of repository activity mac windows linux all You can view an overview of a repository's activity through Pulse. Pulse includes a list of open and merged pull requests, open and closed issues, and a graph showing the commit activity for the top 15 users who committed to the default branch of the project in the selected time period. Accessing pulse On GitHub, navigate to the main page of the repository. Under your repository name, click Insights. Filtering by time By default, Pulse shows the last seven days of repository activity. To choose a different time period, click the Period dropdown in the upper-right corner of the Pulse overview. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Viewing contribution activity in a repository - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Visualizing repository data with graphs / Viewing contribution activity in a repository Viewing contribution activity in a repository mac windows linux all You can view the top 100 contributors to a repository in the Contributors graph. Merge commits and commits that don't include changes aren't included in this graph. You can view graphs for each contributor below the main graph. To select a range of time to view contributors and commits, you can click and grab in the main graph. Accessing the Contributors graph On GitHub, navigate to the main page of the repository. Under your repository name, click Insights. In the left sidebar, click Contributors. Troubleshooting repository contribution activity If your GitHub username is not appearing in the repository's Contributors graph, it may be because you are not one of the top 100 contributors, you have unmerged commits, or your email address hasn't been added to your GitHub account. Tip: To see all commit contributors to a repository, use the GitHub API. If you only have commits on an unmerged branch, you will not show up on the graph. To have your commits merged, you can open a pull request. Commits made to the gh-pages branch won't be reflected in the repository's Contributors graph unless gh-pages is the repository's default branch. If you haven't set your commit email address in Git to your GitHub account, your commits will not be linked to your account and you will not show up in the Contributors graph. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Viewing traffic to a repository - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Visualizing repository data with graphs / Viewing traffic to a repository Viewing traffic to a repository mac windows linux all Anyone with push access to a repository can view its traffic, including full clones (not fetches), visitors from the past 14 days, referring sites, and popular content in the Traffic graph. You can navigate to referring sites, excluding search engines and GitHub itself, from the links the specific paths were referred from. The popular content links to the specific content that generated traffic. Referring sites and popular content are ordered by views and unique visitors. Full clones and visitor information update hourly, while referring sites and popular content sections update daily. All data in the Traffic graph uses the UTC+0 timezone, regardless of your location. Tip: You can hover over a specific day in the Traffic graph to view the exact data for that day. Accessing the Traffic graph On GitHub, navigate to the main page of the repository. Under your repository name, click Insights. In the left sidebar, click Traffic. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Analyzing changes to a repository's content - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Visualizing repository data with graphs / Analyzing changes to a repository's content Analyzing changes to a repository's content mac windows linux all You can see the changes to the content of a repository by analyzing the repository's commits, commit frequency, and content additions and deletions. Visualizing commits in a repository You can see all commits made to a repository in the past year (excluding merge commits) in the Commit graph. Visualizing additions and deletions to content in a repository The Code frequency graph displays the content additions and deletions for each week in a repository's history. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Visualizing commits in a repository - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Visualizing repository data with graphs / Visualizing commits in a repository Visualizing commits in a repository mac windows linux all You can see all commits made to a repository in the past year (excluding merge commits) in the Commit graph. The top graph shows commits for the entire year by week. The bottom graph shows the average number of commits by day of the week for the selected week. Accessing the Commits graph On GitHub, navigate to the main page of the repository. Under your repository name, click Insights. In the left sidebar, click Commits. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Visualizing additions and deletions to content in a repository - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Visualizing repository data with graphs / Visualizing additions and deletions to content in a repository Visualizing additions and deletions to content in a repository mac windows linux all The Code frequency graph displays the content additions and deletions for each week in a repository's history. Accessing the Code frequency graph On GitHub, navigate to the main page of the repository. Under your repository name, click Insights. In the left sidebar, click Code frequency. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Understanding connections between repositories - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Visualizing repository data with graphs / Understanding connections between repositories Understanding connections between repositories mac windows linux all You can better understand the connections that exist between repositories by viewing a repository's network, projects that depend on the repository, and its forks. Viewing a repository's network The Network graph displays the branch history of the entire repository network, including branches of the root repository and branches of forks that contain commits unique to the network. Listing the forks of a repository The Members graph displays all the forks of a repository. Listing the projects that depend on a repository You can view the packages and projects that depend on a repository in the Dependents graph. Listing the packages that a repository depends on You can see your project's Ruby and JavaScript dependencies, as well as any detected vulnerabilities, in the dependency graph. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Viewing a repository's network - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Visualizing repository data with graphs / Viewing a repository's network Viewing a repository's network mac windows linux all The Network graph displays the branch history of the entire repository network, including branches of the root repository and branches of forks that contain commits unique to the network. Tip: To see older branches, click and drag within the graph. Accessing the Network graph On GitHub, navigate to the main page of the repository. Under your repository name, click Insights. In the left sidebar, click Network. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Listing the forks of a repository - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Visualizing repository data with graphs / Listing the forks of a repository Listing the forks of a repository mac windows linux all The Members graph displays all the forks of a repository. Forks are listed alphabetically by the username of the person who forked the repository. You can click on the username to be redirected to the user's GitHub profile page or click on the fork name to be redirected to the specific fork of the repository. Accessing the Members graph On GitHub, navigate to the main page of the repository. Under your repository name, click Insights. In the left sidebar, click Forks. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Listing the projects that depend on a repository - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Visualizing repository data with graphs / Listing the projects that depend on a repository Listing the projects that depend on a repository mac windows linux all You can view the packages and projects that depend on a repository in the Dependents graph. The Dependents graph contains data on both packages and applications. Packages are repositories that contain a library in a package manager, whereas applications are repositories that depend on the selected repository. The list of applications in the Dependents graph is sorted by the most recent project that depends on the repository. Note: The Dependents graph only contains data for Ruby gems and doesn't include data for other languages or Git submodules. Accessing the Dependents graph On GitHub, navigate to the main page of the repository. Under your repository name, click Insights. In the left sidebar, click Dependency graph. Under "Dependency graph", click Dependents. Further reading "Listing the packages that a repository depends on" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Listing the packages that a repository depends on - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Visualizing repository data with graphs / Listing the packages that a repository depends on Listing the packages that a repository depends on mac windows linux all You can see your project's Ruby and JavaScript dependencies, as well as any detected vulnerabilities, in the dependency graph. The dependency graph is available by default for every public repository. You can also set up the dependency graph for private repositories. Tip: You can view and update vulnerable dependencies in your repository's dependency graph. The dependency graph lists vulnerable dependencies before other dependencies. For more information, see "About security alerts for vulnerable dependencies." To enable the dependency graph for your project, your repository must define Ruby or JavaScript dependencies in either a Gemfile or package.json file. Listing dependencies for a repository with the dependency graph enabled On GitHub, navigate to the main page of the repository. Under your repository name, click Insights. In the left sidebar, click Dependency graph. Setting up the dependency graph for a private repository On GitHub, navigate to the main page of the repository. Under your repository name, click Insights. In the left sidebar, click Dependency graph. Read the message about the granting GitHub access to repository data to enable the dependency graph, then click Allow access. For more information, see "Understanding how GitHub uses and protects your data." Troubleshooting the dependency graph If your project has dependencies, but no dependencies are detected in your graph, there may be a problem with the file containing your dependencies. Check your project's file to ensure that it's correctly formatted for the file type. Further reading "Listing the projects that depend on a repository" "Understanding how GitHub uses and protects your data" "Viewing and updating vulnerable dependencies in your repository" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Importing source code to GitHub - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Importing your projects to GitHub / Importing source code to GitHub Importing source code to GitHub mac windows linux all You can import repositories to GitHub using GitHub Importer, the command line, or external migration tools. About GitHub Importer If you have source code in Subversion, Mercurial, Team Foundation Server, or another Git repository, you can move it to GitHub using GitHub Importer. Importing a repository with GitHub Importer If you have a project hosted on another version control system, you can automatically import it to GitHub using the GitHub Importer tool. Updating commit author attribution with GitHub Importer During an import, you can match commits in your repository with the GitHub account of the commit author. Importing a Git repository using the command line If GitHub Importer is not suitable for your purposes, such as if your existing code is hosted on a private network, then we recommend importing using the command line. Source code migration tools You can use external tools to move your projects to GitHub. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support About GitHub Importer - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Importing your projects to GitHub / About GitHub Importer About GitHub Importer mac windows linux all If you have source code in Subversion, Mercurial, Team Foundation Server, or another Git repository, you can move it to GitHub using GitHub Importer. GitHub Importer is a tool that quickly imports source code repositories, including commits and revision history, to GitHub for you. During an import, depending on the version control system you're importing from, you can authenticate with your remote repository, update commit author attribution, and import repositories with large files (or remove large files if you don't want to use Git Large File Storage). Import action Subversion Mercurial Team Foundation Server Git Authenticate with remote repository X X X X Update commit author attribution X X X Move large files to Git Large File Storage X X X Remove large files from your repository X X X Further reading "Importing a repository with GitHub Importer" "Updating commit author attribution with GitHub Importer" "Importing a Git repository using the command line" "Source code migration tools" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Importing a repository with GitHub Importer - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Importing your projects to GitHub / Importing a repository with GitHub Importer Importing a repository with GitHub Importer mac windows linux all If you have a project hosted on another version control system, you can automatically import it to GitHub using the GitHub Importer tool. Tips: GitHub Importer is not suitable for all imports. For example, if your existing code is hosted on a private network, our tool won't be able to access it. In these cases, we recommend importing using the command line for Git repositories or an external source code migration tool for projects imported from other version control systems. If you'd like to match the commits in your repository to the authors' GitHub user accounts during the import, make sure every contributor to your repository has a GitHub account before you begin the import. If you are migrating your project from CodePlex, read the migration guide for more information. In the upper-right corner of any page, click , and then click Import repository. Under "Your old repository's clone URL", type the URL of the project you want to import. Choose your user account or an organization to own the repository, then type a name for the repository on GitHub. Specify whether the new repository should be public or private. Public repositories are visible to any user on GitHub, so you can benefit from GitHub's collaborative community. Private repositories are only available to the repository owner, as well as any collaborators you choose to share with. For more information, see "GitHub's billing plans." Review the information you entered, then click Begin import. If your old project was protected by a password, type your login information for that project, then click Submit. If there are multiple projects hosted at your old project's clone URL, choose the project you'd like to import, then click Submit. If your project contains files larger than 100 MB, choose whether to import the large files using Git Large File Storage, then click Continue. You'll receive an email when the repository has been completely imported. Further reading "Updating commit author attribution with GitHub Importer" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Updating commit author attribution with GitHub Importer - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Importing your projects to GitHub / Updating commit author attribution with GitHub Importer Updating commit author attribution with GitHub Importer mac windows linux all During an import, you can match commits in your repository with the GitHub account of the commit author. GitHub Importer looks for GitHub users whose email addresses match the authors of the commits in the repository you're importing. You can then connect a commit to its author using their email address or the author's GitHub username. Updating commit authors After you've imported your repository, on the import status page, click Match authors. Next to the author whose information you'd like to update, click Connect. Type the email address or GitHub username of the author, then press Enter. Attributing commits to a GitHub user with a public email address If the author of a commit in your imported repository has a GitHub account associated with the email address they used to author the commits, and they haven't set their commit email address as private, GitHub Importer will match the email address associated with the commit to the public email address associated with their GitHub account, and attribute the commit to their GitHub account. Attributing commits to a GitHub user without a public email address If the author of a commit in your imported repository has neither set a public email address on their GitHub profile, nor set their commit email address as private, GitHub Importer may not be able to match the email address associated with the commit with their GitHub account. The commit author can resolve this by setting their email address as private. Their commits will then be attributed to <username>@users.noreply.github.com, and the imported commits will be associated with their GitHub account. Attributing commits using an email address If the author's email address is not associated with their GitHub account, they can add the address to their account after the import, and the commits will be correctly attributed. If the author does not have a GitHub account, GitHub Importer will attribute their commits to the email address associated with the commits. Further reading "About GitHub Importer" "Importing a repository with GitHub Importer" "Adding an email address to your account" "Setting your commit email address in Git" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Importing a Git repository using the command line - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Importing your projects to GitHub / Importing a Git repository using the command line Importing a Git repository using the command line mac windows linux all If GitHub Importer is not suitable for your purposes, such as if your existing code is hosted on a private network, then we recommend importing using the command line. Before you start, make sure you know: Your GitHub username The clone URL for the external repository, such as https://external-host.com/user/repo.git or git://external-host.com/user/repo.git (perhaps with a user@ in front of the external-host.com domain name) For purposes of demonstration, we'll use: An external account named extuser An external Git host named https://external-host.com A GitHub personal user account named ghuser A GitHub repository named repo.git Create a new repository on GitHub. You'll import your external Git repository to this new repository. On the command line, make a "bare" clone of the repository using the external clone URL. This creates a full copy of the data, but without a working directory for editing files, and ensures a clean, fresh export of all the old data. git clone --bare https://external-host.com/extuser/repo.git # Makes a bare clone of the external repository in a local directory Push the locally cloned repository to GitHub using the "mirror" option, which ensures that all references, such as branches and tags, are copied to the imported repository. cd repo.git git push --mirror https://github.com/ghuser/repo.git # Pushes the mirror to the new GitHub repository Remove the temporary local repository. cd .. rm -rf repo.git Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Adding an existing project to GitHub using the command line - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Importing your projects to GitHub / Adding an existing project to GitHub using the command line Adding an existing project to GitHub using the command line mac windows linux all Putting your existing work on GitHub can let you share and collaborate in lots of great ways. If you are migrating your project from CodePlex, read the migration guide for more information. Tip: If you're most comfortable with a point-and-click user interface, try adding your project with GitHub Desktop. For more information, see "Adding a repository from your local computer to GitHub Desktop" in the GitHub Desktop Help. Warning: Never git add, commit, or push sensitive information to a remote repository. Sensitive information can include, but is not limited to: Passwords SSH keys AWS access keys API keys Credit card numbers PIN numbers For more information, see "Removing sensitive data from a repository." Create a new repository on GitHub. To avoid errors, do not initialize the new repository with README, license, or gitignore files. You can add these files after your project has been pushed to GitHub. Open TerminalTerminalGit Bash. Change the current working directory to your local project. Initialize the local directory as a Git repository. git init Add the files in your new local repository. This stages them for the first commit. git add . # Adds the files in the local repository and stages them for commit. To unstage a file, use 'git reset HEAD YOUR-FILE'. Commit the files that you've staged in your local repository. git commit -m "First commit" # Commits the tracked changes and prepares them to be pushed to a remote repository. To remove this commit and modify the file, use 'git reset --soft HEAD~1' and commit and add the file again. At the top of your GitHub repository's Quick Setup page, click to copy the remote repository URL. In Terminal, add the URL for the remote repository where your local repository will be pushed. git remote add origin remote repository URL # Sets the new remote git remote -v # Verifies the new remote URL Push the changes in your local repository to GitHub. git push -u origin master # Pushes the changes in your local repository up to the remote repository you specified as the origin Create a new repository on GitHub. To avoid errors, do not initialize the new repository with README, license, or gitignore files. You can add these files after your project has been pushed to GitHub. Open TerminalTerminalGit Bash. Change the current working directory to your local project. Initialize the local directory as a Git repository. git init Add the files in your new local repository. This stages them for the first commit. git add . # Adds the files in the local repository and stages them for commit. To unstage a file, use 'git reset HEAD YOUR-FILE'. Commit the files that you've staged in your local repository. git commit -m "First commit" # Commits the tracked changes and prepares them to be pushed to a remote repository. To remove this commit and modify the file, use 'git reset --soft HEAD~1' and commit and add the file again. At the top of your GitHub repository's Quick Setup page, click to copy the remote repository URL. In the Command prompt, add the URL for the remote repository where your local repository will be pushed. git remote add origin remote repository URL # Sets the new remote git remote -v # Verifies the new remote URL Push the changes in your local repository to GitHub. git push origin master # Pushes the changes in your local repository up to the remote repository you specified as the origin Create a new repository on GitHub. To avoid errors, do not initialize the new repository with README, license, or gitignore files. You can add these files after your project has been pushed to GitHub. Open TerminalTerminalGit Bash. Change the current working directory to your local project. Initialize the local directory as a Git repository. git init Add the files in your new local repository. This stages them for the first commit. git add . # Adds the files in the local repository and stages them for commit. To unstage a file, use 'git reset HEAD YOUR-FILE'. Commit the files that you've staged in your local repository. git commit -m "First commit" # Commits the tracked changes and prepares them to be pushed to a remote repository. To remove this commit and modify the file, use 'git reset --soft HEAD~1' and commit and add the file again. At the top of your GitHub repository's Quick Setup page, click to copy the remote repository URL. In Terminal, add the URL for the remote repository where your local repository will be pushed. git remote add origin remote repository URL # Sets the new remote git remote -v # Verifies the new remote URL Push the changes in your local repository to GitHub. git push origin master # Pushes the changes in your local repository up to the remote repository you specified as the origin Further reading "Adding a file to a repository using the command line" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Source code migration tools - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Importing your projects to GitHub / Source code migration tools Source code migration tools mac windows linux all You can use external tools to move your projects to GitHub. We recommend using GitHub Importer to import projects from Subversion, Mercurial, Team Foundation Server, or another Git repository. You can also use these external tools to convert your project to Git. Importing from Subversion In a typical Subversion environment, multiple projects are stored in a single root repository. On GitHub, each of these projects will usually map to a separate Git repository for a user account or organization. We suggest importing each part of your Subversion repository to a separate GitHub repository if: Collaborators need to check out or commit to that part of the project separately from the other parts You want different parts to have their own access permissions We recommend these tools for converting Subversion repositories to Git: git-svn svn2git Importing from Mercurial We recommend hg-fast-export for converting Mercurial repositories to Git. Importing from Team Foundation Server We recommend these tools for moving changes between Team Foundation Server and Git: git-tfs Git-TF Tip: After you've successfully converted your project to Git, you can push it to GitHub. Further reading "About GitHub Importer" "Importing a repository with GitHub Importer" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Working with Subversion on GitHub - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Importing your projects to GitHub / Working with Subversion on GitHub Working with Subversion on GitHub mac windows linux all You can use Subversion clients and some Subversion workflows and properties with GitHub. What are the differences between Subversion and Git? Subversion (SVN) repositories are similar to Git repositories, but there are several differences when it comes to the architecture of your projects. Support for Subversion clients GitHub repositories can be accessed from both Git and Subversion (SVN) clients. This article covers using a Subversion client on GitHub and some common problems that you might run into. Subversion properties supported by GitHub There are several Subversion workflows and properties that are similar to existing functionality on GitHub. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support What are the differences between Subversion and Git? - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Importing your projects to GitHub / What are the differences between Subversion and Git? What are the differences between Subversion and Git? mac windows linux all Subversion (SVN) repositories are similar to Git repositories, but there are several differences when it comes to the architecture of your projects. Directory structure Each reference, or labeled snapshot of a commit, in a project is organized within specific subdirectories, such as trunk, branches, and tags. For example, an SVN project with two features under development might look like this: sample_project/trunk/README.md sample_project/trunk/lib/widget.rb sample_project/branches/new_feature/README.md sample_project/branches/new_feature/lib/widget.rb sample_project/branches/another_new_feature/README.md sample_project/branches/another_new_feature/lib/widget.rb An SVN workflow looks like this: The trunk directory represents the latest stable release of a project. Active feature work is developed within subdirectories under branches. When a feature is finished, the feature directory is merged into trunk and removed. Git projects are also stored within a single directory. However, Git obscures the details of its references by storing them in a special .git directory. For example, a Git project with two features under development might look like this: sample_project/.git sample_project/README.md sample_project/lib/widget.rb A Git workflow looks like this: A Git repository stores the full history of all of its branches and tags within the .git directory. The latest stable release is contained within the master branch. Active feature work is developed in separate branches. When a feature is finished, the feature branch is merged into master and deleted. Unlike SVN, with Git the directory structure remains the same, but the contents of the files change based on your branch. Including subprojects A subproject is a project that's developed and managed somewhere outside of your main project. You typically import a subproject to add some functionality to your project without needing to maintain the code yourself. Whenever the subproject is updated, you can synchronize it with your project to ensure that everything is up-to-date. In SVN, a subproject is called an SVN external. In Git, it's called a Git submodule. Although conceptually similar, Git submodules are not kept up-to-date automatically; you must explicitly ask for a new version to be brought into your project. Here are some external resources that explain the differences in more detail: Understanding Git Submodules Git Tools Submodules Preserving history SVN is configured to assume that the history of a project never changes. Git allows you to modify previous commits and changes using tools like git rebase. GitHub supports Subversion clients, which may produce some unexpected results if you're using both Git and SVN on the same project. If you've manipulated Git's commit history, those same commits will always remain within SVN's history. If you accidentally committed some sensitive data, we have an article that will help you remove it from Git's history. Further reading "Subversion properties supported by GitHub" "Branching and Merging" from the Git SCM book "Importing source code to GitHub" "Source code migration tools" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Support for Subversion clients - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Importing your projects to GitHub / Support for Subversion clients Support for Subversion clients mac windows linux all GitHub repositories can be accessed from both Git and Subversion (SVN) clients. This article covers using a Subversion client on GitHub and some common problems that you might run into. GitHub supports Subversion clients via the HTTPS protocol. We use a Subversion bridge to communicate svn commands to GitHub. Supported Subversion features on GitHub Checkout The first thing you'll want to do is a Subversion checkout. Since Git clones keep the working directory (where you edit files) separate from the repository data, there is only one branch in the working directory at a time. Subversion checkouts are different: they mix the repository data in the working directories, so there is a working directory for each branch and tag you've checked out. For repositories with many branches and tags, checking out everything can be a bandwidth burden, so you should start with a partial checkout. On GitHub, navigate to the main page of the repository. Under the repository name, click Clone or download. In the Clone with HTTPs section, click to copy the clone URL for the repository. Make an empty checkout of the repository: svn co --depth empty https://github.com/user/repo Checked out revision 1. cd repo Get the trunk branch. The Subversion bridge maps trunk to the Git HEAD branch (which is usually master). svn up trunk A trunk A trunk/README.md A trunk/gizmo.rb Updated to revision 1. Get an empty checkout of the branches directory. This is where all of the non-HEAD branches live, and where you'll be making feature branches. svn up --depth empty branches Updated to revision 1. Creating branches You can also create branches using the Subversion bridge to GitHub. From your svn client, make sure "master" is current by updating trunk: svn up trunk At revision 1. Next, you can use svn copy to create a new branch: svn copy trunk branches/more_awesome A branches/more_awesome svn commit -m 'Added more_awesome topic branch' Adding branches/more_awesome Committed revision 2. You can confirm that the new branch exists in the repository's branch dropdown: You can also confirm the new branch via the command line: git fetch From https://github.com/user/repo/ * [new branch] more_awesome -> origin/more_awesome Making commits to Subversion After you've added some features and fixed some bugs, you'll want to commit those changes to GitHub. This works just like the Subversion you're used to. Edit your files, and use svn commit to record your changes: svn status M gizmo.rb svn commit -m 'Guard against known problems' Sending more_awesome/gizmo.rb Transmitting file data . Committed revision 3. svn status ? test svn add test A test A test/gizmo_test.rb svn commit -m 'Test coverage for problems' Adding more_awesome/test Adding more_awesome/test/gizmo_test.rb Transmitting file data . Committed revision 4. Switching between branches To switch between branches, you'll probably want to start with a checkout of trunk: svn co --depth empty https://github.com/user/repo/trunk Then, you can switch to another branch: svn switch https://github.com/user/repo/branches/more_awesome Finding the Git commit SHA for a Subversion commit GitHub's Subversion server exposes the Git commit sha for each Subversion commit. To see the commit SHA, you should ask for the git-commit unversioned remote property. svn propget git-commit --revprop -r HEAD https://github.com/user/repo 05fcc584ed53d7b0c92e116cb7e64d198b13c4e3 With this commit SHA, you can, for example, look up the corresponding Git commit on GitHub. Further reading "Subversion properties supported by GitHub" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Subversion properties supported by GitHub - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Importing your projects to GitHub / Subversion properties supported by GitHub Subversion properties supported by GitHub mac windows linux all There are several Subversion workflows and properties that are similar to existing functionality on GitHub. Executable files (svn:executable) We convert svn:executable properties by updating the file mode directly before adding it to the Git repository. MIME types (svn:mime-type) GitHub internally tracks the mime-type properties of files and the commits that added them. Ignoring unversioned items (svn:ignore) If you've set files and directories to be ignored in Subversion, GitHub will track them internally. Files ignored by subversion clients are completely distinct from entries in a .gitignore file. Currently unsupported properties GitHub doesn't currently support svn:externals, svn:global-ignores, or any properties not listed above, including custom properties. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support About Git rebase - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Advanced Git / About Git rebase About Git rebase mac windows linux all The git rebase command allows you to easily change a series of commits, modifying the history of your repository. You can reorder, edit, or squash commits together. Typically, you would use git rebase to: Edit previous commit messages Combine multiple commits into one Delete or revert commits that are no longer necessary Warning: Because changing your commit history can make things difficult for everyone else using the repository, it's considered bad practice to rebase commits when you've already pushed to a repository. To learn how to safely rebase on GitHub, see "About pull request merges." Rebasing commits against a branch To rebase all the commits between another branch and the current branch state, you can enter the following command in your shell (either the command prompt for Windows, or the terminal for Mac and Linux): git rebase --interactive other_branch_name Rebasing commits against a point in time To rebase the last few commits in your current branch, you can enter the following command in your shell: git rebase --interactive HEAD~7 Commands available while rebasing There are six commands available while rebasing: pick pick simply means that the commit is included. Rearranging the order of the pick commands changes the order of the commits when the rebase is underway. If you choose not to include a commit, you should delete the entire line. reword The reword command is similar to pick, but after you use it, the rebase process will pause and give you a chance to alter the commit message. Any changes made by the commit are not affected. edit If you choose to edit a commit, you'll be given the chance to amend the commit, meaning that you can add or change the commit entirely. You can also make more commits before you continue the rebase. This allows you to split a large commit into smaller ones, or, remove erroneous changes made in a commit. squash This command lets you combine two or more commits into a single commit. A commit is squashed into the commit above it. Git gives you the chance to write a new commit message describing both changes. fixup This is similar to squash, but the commit to be merged has its message discarded. The commit is simply merged into the commit above it, and the earlier commit's message is used to describe both changes. exec This lets you run arbitrary shell commands against a commit. An example of using git rebase No matter which command you use, Git will launch your default text editor and open a file that details the commits in the range you've chosen. That file looks something like this: pick 1fc6c95 Patch A pick 6b2481b Patch B pick dd1475d something I want to split pick c619268 A fix for Patch B pick fa39187 something to add to patch A pick 4ca2acc i cant' typ goods pick 7b36971 something to move before patch B # Rebase 41a72e6..7b36971 onto 41a72e6 # # Commands: # p, pick = use commit # r, reword = use commit, but edit the commit message # e, edit = use commit, but stop for amending # s, squash = use commit, but meld into previous commit # f, fixup = like "squash", but discard this commit's log message # x, exec = run command (the rest of the line) using shell # # If you remove a line here THAT COMMIT WILL BE LOST. # However, if you remove everything, the rebase will be aborted. # Breaking this information, from top to bottom, we see that: Seven commits are listed, which indicates that there were seven changes between our starting point and our current branch state. The commits you chose to rebase are sorted in the order of the oldest changes (at the top) to the newest changes (at the bottom). Each line lists a command (by default, pick), the commit SHA, and the commit message. The entire git rebase procedure centers around your manipulation of these three columns. The changes you make are rebased onto your repository. After the commits, Git tells you the range of commits we're working with (41a72e6..7b36971). Finally, Git gives some help by telling you the commands that are available to you when rebasing commits. Further reading "Using Git rebase" The "Git Branching" chapter from the Pro Git book The "Interactive Rebasing" chapter from the Pro Git book "Squashing commits with rebase" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Using Git rebase on the command line - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Advanced Git / Using Git rebase on the command line Using Git rebase on the command line mac windows linux all Here's a short tutorial on using git rebase on the command line. In this example, we will cover all of the git rebase commands available, except for exec. We'll start our rebase by entering git rebase --interactive HEAD~7 on the terminal. Our favorite text editor will display the following lines: pick 1fc6c95 Patch A pick 6b2481b Patch B pick dd1475d something I want to split pick c619268 A fix for Patch B pick fa39187 something to add to patch A pick 4ca2acc i cant' typ goods pick 7b36971 something to move before patch B In this example, we're going to: Squash the fifth commit (fa39187) into the "Patch A" commit (1fc6c95), using squash. Move the last commit (7b36971) up before the "Patch B" commit (6b2481b), and keep it as pick. Merge the "A fix for Patch B" commit (c619268) into the "Patch B" commit (6b2481b), and disregard the commit message using fixup. Split the third commit (dd1475d) into two smaller commits, using edit. Fix the commit message of the misspelled commit (4ca2acc), using reword. Phew! This sounds like a lot of work, but by taking it one step at a time, we can easily make those changes. To start, we'll need to modify the commands in the file to look like this: pick 1fc6c95 Patch A squash fa39187 something to add to patch A pick 7b36971 something to move before patch B pick 6b2481b Patch B fixup c619268 A fix for Patch B edit dd1475d something I want to split reword 4ca2acc i cant' typ goods We've changed each line's command from pick to the command we're interested in. Now, save and close the editor; this will start the interactive rebase. Git skips the first rebase command, pick 1fc6c95, since it doesn't need to do anything. It goes to the next command, squash fa39187. Since this operation requires your input, Git opens your text editor once again. The file it opens up looks something like this: # This is a combination of two commits. # The first commit's message is: Patch A # This is the 2nd commit message: something to add to patch A # Please enter the commit message for your changes. Lines starting # with '#' will be ignored, and an empty message aborts the commit. # Not currently on any branch. # Changes to be committed: # (use "git reset HEAD <file>..." to unstage) # # modified: a # This file is Git's way of saying, "Hey, here's what I'm about to do with this squash." It lists the first commit's message ("Patch A"), and the second commit's message ("something to add to patch A"). If you're happy with these commit messages, you can save the file, and close the editor. Otherwise, you have the option of changing the commit message by simply changing the text. When the editor is closed, the rebase continues: pick 1fc6c95 Patch A squash fa39187 something to add to patch A pick 7b36971 something to move before patch B pick 6b2481b Patch B fixup c619268 A fix for Patch B edit dd1475d something I want to split reword 4ca2acc i cant' typ goods Git processes the two pick commands (for pick 7b36971 and pick 6b2481b). It also processes the fixup command (fixup c619268), since it doesn't require any interaction. fixup merges the changes from c619268 into the commit before it, 6b2481b. Both changes will have the same commit message: "Patch B". Git gets to the edit dd1475d operation, stops, and prints the following message to the terminal: You can amend the commit now, with git commit --amend Once you are satisfied with your changes, run git rebase --continue At this point, you can edit any of the files in your project to make any additional changes. For each change you make, you'll need to perform a new commit, and you can do that by entering the git commit --amend command. When you're finished making all your changes, you can run git rebase --continue. Git then gets to the reword 4ca2acc command. It opens up your text editor one more time, and presents the following information: i cant' typ goods # Please enter the commit message for your changes. Lines starting # with '#' will be ignored, and an empty message aborts the commit. # Not currently on any branch. # Changes to be committed: # (use "git reset HEAD^1 <file>..." to unstage) # # modified: a # As before, Git is showing the commit message for you to edit. You can change the text ("i cant' typ goods"), save the file, and close the editor. Git will finish the rebase and return you to the terminal. Pushing rebased code to GitHub Since you've altered Git history, the usual git push origin will not work. You'll need to modify the command by "force-pushing" your latest changes: git push origin master --force Force pushing has serious implications, especially if your repository is being accessed by multiple people. At the least, your commits in pull requests might be out of order. For more information, check out "Why are my commits in the wrong order?" Further reading "Resolving merge conflicts after a Git rebase" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Resolving merge conflicts after a Git rebase - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Advanced Git / Resolving merge conflicts after a Git rebase Resolving merge conflicts after a Git rebase mac windows linux all When you perform a git rebase operation, you're typically moving commits around. Because of this, you might get into a situation where a merge conflict is introduced. That means that two of your commits modified the same line in the same file, and Git doesn't know which change to apply. After you reorder and manipulate commits using git rebase, should a merge conflict occur, Git will tell you so with the following message printed to the terminal: error: could not apply fa39187... something to add to patch A When you have resolved this problem, run "git rebase --continue". If you prefer to skip this patch, run "git rebase --skip" instead. To check out the original branch and stop rebasing, run "git rebase --abort". Could not apply fa39187f3c3dfd2ab5faa38ac01cf3de7ce2e841... Change fake file Here, Git is telling you which commit is causing the conflict (fa39187). You're given three choices: You can run git rebase --abort to completely undo the rebase. Git will return you to your branch's state as it was before git rebase was called. You can run git rebase --skip to completely skip the commit. That means that none of the changes introduced by the problematic commit will be included. It is very rare that you would choose this option. You can fix the conflict. To fix the conflict, you can follow the standard procedures for resolving merge conflicts from the command line. When you're finished, you'll need to call git rebase --continue in order for Git to continue processing the rest of the rebase. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Changing author info - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Advanced Git / Changing author info Changing author info mac windows linux all To change the name and/or email address recorded in existing commits, you must rewrite the entire history of your Git repository. Warning: This action is destructive to your repository's history. If you're collaborating on a repository with others, it's considered bad practice to rewrite published history. You should only do this in an emergency. Changing the Git history of your repository using a script We've created a script that will change any commits that previously had the old email address in its author or committer fields to use the correct name and email address. Note: Running this script rewrites history for all repository collaborators. After completing these steps, any person with forks or clones must fetch the rewritten history and rebase any local changes into the rewritten history. Before running this script, you'll need: The old email address that appears in the author/committer fields that you want to change The correct name and email address that you would like such commits to be attributed to Open TerminalTerminalGit Bash. Create a fresh, bare clone of your repository: git clone --bare https://github.com/user/repo.git cd repo.git Copy and paste the script, replacing the following variables based on the information you gathered: OLD_EMAIL CORRECT_NAME CORRECT_EMAIL Press Enter to run the script. Review the new Git history for errors. Push the corrected history to GitHub: git push --force --tags origin 'refs/heads/*' Clean up the temporary clone: cd .. rm -rf repo.git Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Splitting a subfolder out into a new repository - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Advanced Git / Splitting a subfolder out into a new repository Splitting a subfolder out into a new repository mac windows linux all You can turn a folder within a Git repository into a brand new repository. If you create a new clone of the repository, you won't lose any of your Git history or changes when you split a folder into a separate repository. Open TerminalTerminalGit Bash. Change the current working directory to the location where you want to create your new repository. Clone the repository that contains the subfolder. git clone https://github.com/USERNAME/REPOSITORY-NAME Change the current working directory to your cloned repository. cd REPOSITORY-NAME To filter out the subfolder from the rest of the files in the repository, run git filter-branch, supplying this information: FOLDER-NAME: The folder within your project that you'd like to create a separate repository from. Tip: Windows users should use / to delimit folders. BRANCH-NAME: The default branch for your current project, for example, master or gh-pages. git filter-branch --prune-empty --subdirectory-filter FOLDER-NAME BRANCH-NAME # Filter the specified branch in your directory and remove empty commits Rewrite 48dc599c80e20527ed902928085e7861e6b3cbe6 (89/89) Ref 'refs/heads/BRANCH-NAME' was rewritten The repository should now only contain the files that were in your subfolder. Create a new repository on GitHub. At the top of your new GitHub repository's Quick Setup page, click to copy the remote repository URL. Tip: For information on the difference between HTTPS and SSH URLs, see "Which remote URL should I use?" Check the existing remote name for your repository. For example, origin or upstream are two common choices. git remote -v origin https://github.com/USERNAME/REPOSITORY-NAME.git (fetch) origin https://github.com/USERNAME/REPOSITORY-NAME.git (push) Set up a new remote URL for your new repository using the existing remote name and the remote repository URL you copied in step 7. git remote set-url origin https://github.com/USERNAME/NEW-REPOSITORY-NAME.git Verify that the remote URL has changed with your new repository name. git remote -v # Verify new remote URL origin https://github.com/USERNAME/NEW-REPOSITORY-NAME.git (fetch) origin https://github.com/USERNAME/NEW-REPOSITORY-NAME.git (push) Push your changes to the new repository on GitHub. git push -u origin BRANCH-NAME Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support About Git subtree merges - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Advanced Git / About Git subtree merges About Git subtree merges mac windows linux all If you need to manage multiple projects within a single repository, you can use a subtree merge to handle all the references. Typically, a subtree merge is used to contain a repository within a repository. The "subrepository" is stored in a folder of the main repository. The best way to explain subtree merges is to show by example. We will: Make an empty repository called test that represents our project Merge another repository into it as a subtree called Spoon-Knife. The test project will use that subproject as if it were part of the same repository. Fetch updates from Spoon-Knife into our test project. Setting up the empty repository for a subtree merge Open TerminalTerminalGit Bash. Create a new directory and navigate to it. mkdir test cd test Initialize a new Git repository. git init Initialized empty Git repository in /Users/octocat/tmp/test/.git/ Create and commit a new file. touch .gitignore git add .gitignore git commit -m "initial commit" [master (root-commit) 3146c2a] initial commit 0 files changed, 0 insertions(+), 0 deletions(-) create mode 100644 .gitignore Adding a new repository as a subtree Add a new remote URL pointing to the separate project that we're interested in. git remote add -f spoon-knife git@github.com:octocat/Spoon-Knife.git Updating spoon-knife warning: no common commits remote: Counting objects: 1732, done. remote: Compressing objects: 100% (750/750), done. remote: Total 1732 (delta 1086), reused 1558 (delta 967) Receiving objects: 100% (1732/1732), 528.19 KiB | 621 KiB/s, done. Resolving deltas: 100% (1086/1086), done. From git://github.com/octocat/Spoon-Knife * [new branch] master -> Spoon-Knife/master Merge the Spoon-Knife project into the local Git project. This doesn't change any of your files locally, but it does prepare Git for the next step. If you're using Git 2.9 or above: git merge -s ours --no-commit --allow-unrelated-histories spoon-knife/master Automatic merge went well; stopped before committing as requested If you're using Git 2.8 or below: git merge -s ours --no-commit spoon-knife/master Automatic merge went well; stopped before committing as requested Create a new directory called spoon-knife, and copy the Git history of the Spoon-Knife project into it. git read-tree --prefix=spoon-knife/ -u spoon-knife/master Commit the changes to keep them safe. git commit -m "Subtree merged in spoon-knife" [master fe0ca25] Subtree merged in spoon-knife Although we've only added one subproject, any number of subprojects can be incorporated into a Git repository. Tip: If you create a fresh clone of the repository in the future, the remotes you've added will not be created for you. You will have to add them again using the git remote add command. Synchronizing with updates and changes When a subproject is added, it is not automatically kept in sync with the upstream changes. You will need to update the subproject with the following command: git pull -s subtree remotename branchname For the example above, this would be: git pull -s subtree spoon-knife master Further reading The "Subtree Merging" chapter from the Pro Git book "How to use the subtree merge strategy" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Managing your work with issues - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing your work on GitHub / Managing your work with issues Managing your work with issues mac windows linux all You can manage your work on GitHub by creating issues to track ideas, enhancements, tasks, or bugs. About issues Use issues to track ideas, enhancements, tasks, or bugs for work on GitHub. Creating an issue Issues can be used to keep track of bugs, enhancements, or other requests. Opening an issue from code You can open a new issue by selecting lines of code from an existing file within a repository or pull request. Issues that are opened from code contain a URL that points to the specified code range. Creating a permanent link to a code snippet You can create a permanent link that refers to a code block in a specific version of a file or pull request. Depending on where you paste the permalink, it will render as a code snippet image or a URL. About task lists You can use task lists to create a list of items with checkboxes within pull request and issue comments or Markdown files in your repository. File attachments on issues and pull requests When you open issue or update a pull request, you can use issue attachments to upload images of proposed features or screenshots of bugs. Assigning issues and pull requests to other GitHub users Assignees clarify who is working on specific issues and pull requests. Viewing all of your issues and pull requests The Issues and Pull Request dashboards list the open issues and pull requests you've created. You can use them to update items that have gone stale, close them, or keep track of where you've been mentioned across all repositories—including those you're not subscribed to. Disabling issues You may wish to turn issues off for your repository if you do not accept contributions or bug reports. Closing issues using keywords You can include keywords in your pull request titles and descriptions, as well as commit messages, to automatically close issues in GitHub. About duplicate issues and pull requests Mark an issue or pull request as a duplicate to track similar issues or pull requests together and remove unnecessary burden for both maintainers and collaborators. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support About issues - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing your work on GitHub / About issues About issues mac windows linux all Use issues to track ideas, enhancements, tasks, or bugs for work on GitHub. Many projects collect user feedback via a central bug tracker. GitHub's tracker is called "Issues," and can be used with every repository. Issues can act as more than just a place to report software bugs. As a project maintainer, you can use Issues to organize tasks you'd like to accomplish, such as adding new features or auditing old ones. You can associate issues with pull requests, so that when you merge a pull request, your issue will automatically close. If you're using a project board to track and prioritize your work, you can see what project board an issue is a part of by viewing the project board section within the issue. You can opt to receive notifications whenever an issue is updated with a new comment so that you're always in the loop. Issues can also be assigned to other users, tagged with labels for quicker searching, and grouped together with milestones. You can also track duplicate issues using a saved reply. For more information, see "About saved replies." Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Creating an issue - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing your work on GitHub / Creating an issue Creating an issue mac windows linux all Issues can be used to keep track of bugs, enhancements, or other requests. Any GitHub user can create an issue in a public repository where issues have not been disabled. You can open a new issue based on code from an existing pull request. For more information, see "Opening an issue from code." If you're using a project board to track and prioritize your work, you can convert project board notes to issues. For more information, see "Adding notes to a project board." Tips: Project maintainers can choose to: Create an issue template for a repository. Templates include prompts for information the project's maintainers prefer to see in the body of an issue. Disable issues for a repository. (Pull requests can't be turned off and are always available.) On GitHub, navigate to the main page of the repository. Under your repository name, click Issues. Click New issue. Type a title and description for your issue. If you're a project maintainer, you can assign the issue to someone, add it to a project board, associate it with a milestone, or apply a label. When you're finished, click Submit new issue. Further reading "Opening an issue from code" "Creating a permanent link to a code snippet" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Opening an issue from code - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing your work on GitHub / Opening an issue from code Opening an issue from code mac windows linux all You can open a new issue by selecting lines of code from an existing file within a repository or pull request. Issues that are opened from code contain a URL that points to the specified code range. Any GitHub user can create an issue in a public repository where issues have not been disabled. On GitHub, navigate to the main page of the repository. Navigate to the file or pull request that contains the code you want to open an issue about. If you're referencing code within a pull request, click Files changed, then browse to the file that contains the code you'd like to include your issue. Click View. Hover over the first line of the code range you want and click the line number to highlight the code line. Hover over the last line of the code range, press Shift, and click the line number to highlight the code range. To the left of the code range, click ... and select Open new issue. Type a title and description for your issue. If you're a project maintainer, you can assign the issue to someone, add it to a project board, associate it with a milestone, or apply a label. When you're finished, click Submit new issue. Further reading "Creating an issue" "Getting permanent links to files" "Creating a permanent link to a code snippet" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Creating a permanent link to a code snippet - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing your work on GitHub / Creating a permanent link to a code snippet Creating a permanent link to a code snippet mac windows linux all You can create a permanent link that refers to a code block in a specific version of a file or pull request. Depending on where you paste the permalink, it will render as a code snippet image or a URL. Tip: To create a permalink for an entire file, see "Getting permanent links to files." On GitHub, navigate to the main page of the repository. Navigate to the file or pull request that contains the code you want to link to. Choose one of these options: To link to code from another file, click Find file, then search for and open your file. For more information, see "Finding files on GitHub." To link to code from a pull request, click Files changed, then browse to the file that contains the code you'd like to include in your issue or pull request, and click View. Hover over the first line of the code range you want and click the line number to highlight the code line. Hover over the last line of the code range, press Shift, and click the line number to highlight the code range. To the left of the code range, click ... and select Copy permalink. Navigate to the issue or pull request where you want to include the permalink. Paste your permalink as a comment into the issue or pull request and click Comment. Further reading "Creating an issue" "Opening an issue from code" "Reviewing changes in pull requests" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support About task lists - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing your work on GitHub / About task lists About task lists mac windows linux all You can use task lists to create a list of items with checkboxes within pull request and issue comments or Markdown files in your repository. Task lists render with clickable checkboxes in comments. You can select or unselect the checkboxes to mark them as complete or incomplete. Task lists render as read-only checkboxes in Markdown files. People with write permissions in the repository can edit the file to select or unselect the checkboxes. You can view task list summary information in issue and pull request lists, when the task list is in the initial comment. Creating task lists To create a task list, preface list items with [ ]. To mark a task as complete, use [x]. - [x] Finish my changes - [ ] Push my commits to GitHub - [ ] Open a pull request Reordering tasks You can reorder task lists within a single comment by clicking to the left of a task's checkbox, dragging it to a new location, and dropping it. If you have multiple lists within a comment, you can reorder tasks across the single comment. You can't add or reorder tasks across different comments. Further reading "Basic writing and formatting syntax" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support File attachments on issues and pull requests - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing your work on GitHub / File attachments on issues and pull requests File attachments on issues and pull requests mac windows linux all When you open issue or update a pull request, you can use issue attachments to upload images of proposed features or screenshots of bugs. Warning: If you add an image to a pull request or issue comment, anyone can view the anonymized image URL without authentication, even if the pull request is in a private repository. To keep sensitive images private, serve them from a private network or server that requires authentication. For more information on anonymized URLs see "About anonymized image URLs". To attach a file to an issue or pull request conversation, drag and drop it into the comment box. The maximum size for files is 25MB and the maximum size for images is 10MB. Tip: If you're using Chrome, you can also copy-and-paste images directly into the box. We support these files: PNG (.png) GIF (.gif) JPEG (.jpg) Log files (.log) Microsoft Word (.docx), Powerpoint (.pptx), and Excel (.xlsx) documents Text files (.txt) PDFs (.pdf) ZIP (.zip, .gz) Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Assigning issues and pull requests to other GitHub users - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing your work on GitHub / Assigning issues and pull requests to other GitHub users Assigning issues and pull requests to other GitHub users mac windows linux all Assignees clarify who is working on specific issues and pull requests. Tips: If you have write access to a repository, you can assign issues and pull requests to yourself, collaborators on personal projects, or members of your organization with read permissions on the repository. When creating assignments, you can add up to ten assignees to support your workflow. On GitHub, navigate to the main page of the repository. Under your repository name, click Issues or Pull requests. Select the checkbox next to the items you want to assign to someone. In the upper-right corner, click Assignee. To assign the items to a user, start typing their username, then click their name when it appears. You can select and add up to ten assignees to an issue or pull request. Further reading "Filtering issues and pull requests by assignees" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Viewing all of your issues and pull requests - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing your work on GitHub / Viewing all of your issues and pull requests Viewing all of your issues and pull requests mac windows linux all The Issues and Pull Request dashboards list the open issues and pull requests you've created. You can use them to update items that have gone stale, close them, or keep track of where you've been mentioned across all repositories—including those you're not subscribed to. Your issues and pull request dashboards are available at the top of any page. On each dashboard, you can filter the list to find issues or pull requests you created, that are assigned to you, or in which you're mentioned. You can also find pull requests that you've been asked to review. At the top of any page, click Pull requests or Issues. Optionally, choose a filter or use the search bar to filter for more specific results. Further reading "Listing the repositories you're watching" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Disabling issues - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing your work on GitHub / Disabling issues Disabling issues mac windows linux all You may wish to turn issues off for your repository if you do not accept contributions or bug reports. On GitHub, navigate to the main page of the repository. Under your repository name, click Settings. Under Features, unselect the Issues checkbox. If you decide to enable issues again in the future, any issues that were previously added will be available. Please contact GitHub Support if you want to turn off issues because of abuse from strangers. GitHub does not tolerate abuse. For more information on GitHub's policies, see our Terms of Service and Community Guidelines. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Closing issues using keywords - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing your work on GitHub / Closing issues using keywords Closing issues using keywords mac windows linux all You can include keywords in your pull request titles and descriptions, as well as commit messages, to automatically close issues in GitHub. When a pull request or commit references a keyword and issue number, it creates an association between the pull request and the issue. When the pull request is merged into your repository's default branch, the corresponding issue is automatically closed. The following keywords, followed by an issue number, will close the issue: close closes closed fix fixes fixed resolve resolves resolved For example, to close an issue numbered 123, you could use the phrases "Closes #123" in your pull request description or commit message. Once the branch is merged into the default branch, the issue will close. Closing an issue in the same repository To close an issue in the same repository, use one of the keywords above followed by a reference to the issue number. For example, a commit message with Fixes #45 will close issue 45 in that repository once the commit is merged into the default branch. If the commit is in a non-default branch, the issue will remain open and the issue will be referenced with a tooltip. Closing an issue in a different repository To close an issue in another repository, use the username/repository#issue_number syntax, as described in "Autolinked references and URLs." For example, including Closes example_user/example_repo#76 will close the referenced issue in that repository, provided you have push access to that repository. Closing multiple issues To close multiple issues, preface each issue reference with one of the above keywords. You must use the keyword before each issue you reference for the keyword to work. For example, This closes #34, closes #23, and closes example_user/example_repo#42 would close issues #34 and #23 in the same repository, and issue #42 in the "example_user/example_repo" repository. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support About duplicate issues and pull requests - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing your work on GitHub / About duplicate issues and pull requests About duplicate issues and pull requests mac windows linux all Mark an issue or pull request as a duplicate to track similar issues or pull requests together and remove unnecessary burden for both maintainers and collaborators. For a "marked as duplicate" timeline event to appear, the user who creates the duplicate reference comment must have write access to the repository where they create the comment. Marking duplicates To mark an issue or pull request as a duplicate, type "Duplicate of" followed by the issue or pull request number it duplicates in the body of a new comment. You can also use the GitHub-provided "Duplicate issue" or "Duplicate pull request" saved replies to mark an issue or pull request as a duplicate. For more information, see "About saved replies." Unmarking duplicates You can unmark duplicate issues and pull requests by clicking Undo in the timeline. This will add a new timeline event, indicating that the issue or pull request was unmarked. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Labeling issues and pull requests - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing your work on GitHub / Labeling issues and pull requests Labeling issues and pull requests mac windows linux all You can manage your work on GitHub by creating labels to categorize issues and pull requests. About labels Labels on GitHub help you organize and prioritize your work. You can apply labels to issues and pull requests to signify priority, category, or any other information you find useful. Creating a label Labels can be used to organize your issues and pull requests into categories based on priority, category, or any other information you find useful. Applying labels to issues and pull requests Assign labels to issues and pull requests to help organize your projects. Editing a label You can edit the name and color of an existing label. Deleting a label You can delete a label if you no longer need it to classify issues or pull requests. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support About labels - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing your work on GitHub / About labels About labels mac windows linux all Labels on GitHub help you organize and prioritize your work. You can apply labels to issues and pull requests to signify priority, category, or any other information you find useful. Labels are tied to the repository they are created in. Once a label exists, you can use it on any issue or pull request within that repository. For more information, see "Creating a label." Anyone with read access to a repository can view the repository’s labels. To create, edit, apply, or delete a label, you must have write access to the repository. Using default labels GitHub provides default labels in every new repository. You can use these default labels to help create a standard workflow in a repository: Label Description bug Indicates an unexpected problem or unintended behavior duplicate Indicates similar issues or pull requests enhancement Indicates new feature requests good first issue Indicates a good issue for first-time contributors help wanted Indicates that a maintainer wants help on an issue or pull request invalid Indicates that an issue or pull request is no longer relevant question Indicates that an issue or pull request needs more information wontfix Indicates that work won't continue on an issue or pull request You can also delete default labels. For more information, see "Deleting a label." Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Creating a label - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing your work on GitHub / Creating a label Creating a label mac windows linux all Labels can be used to organize your issues and pull requests into categories based on priority, category, or any other information you find useful. Tip: You can also create a label in the Labels drop-down menu within an issue or pull request. On GitHub, navigate to the main page of the repository. Under your repository name, click Issues or Pull requests. Next to the search field, click Labels. Click New Label to create a new label. In the text box, type your new label name. A color is automatically selected for the label. You can customize this color by editing the hexadecimal number or clicking the refresh button for another random selection. Click Create Label to save the new label. Further reading "About labels" "Applying labels to issues and pull requests" "Editing a label" "Filtering issues and pull requests by labels" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Applying labels to issues and pull requests - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing your work on GitHub / Applying labels to issues and pull requests Applying labels to issues and pull requests mac windows linux all Assign labels to issues and pull requests to help organize your projects. Tip: You can also apply a label in the Labels drop-down menu within an issue or pull request. On GitHub, navigate to the main page of the repository. Under your repository name, click Issues or Pull requests. Select the checkbox next to the items you want to apply a label to. In the upper-right corner, click Label, then start typing the name of an existing label. Click the label's name to associate it with the selected items. Further reading "About labels" "Filtering issues and pull requests by labels" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Editing a label - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing your work on GitHub / Editing a label Editing a label mac windows linux all You can edit the name and color of an existing label. On GitHub, navigate to the main page of the repository. Under your repository name, click Issues or Pull requests. Next to the search field, click Labels. In the labels list, click Edit next to the label you want to edit. In the text box, type your new label name. A color is automatically selected for the label. You can customize this color by editing the hexadecimal number or clicking the refresh button for another random selection. Click Save changes. Further reading "About labels" "Creating a label" "Deleting a label" "Applying labels to issues and pull requests" "Filtering issues and pull requests by labels" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Deleting a label - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing your work on GitHub / Deleting a label Deleting a label mac windows linux all You can delete a label if you no longer need it to classify issues or pull requests. On GitHub, navigate to the main page of the repository. Under your repository name, click Issues or Pull requests. Next to the search field, click Labels. In the labels list, click Delete next to the label you want to delete. Note: Deleting a label will remove the label from any issues or pull requests where it's been applied. Further reading "Applying labels to issues and pull requests" "Filtering issues and pull requests by labels" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Tracking the progress of your work with project boards - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing your work on GitHub / Tracking the progress of your work with project boards Tracking the progress of your work with project boards mac windows linux all You can track and prioritize your work on GitHub by creating a project board with associated issues, pull requests, and notes. About project boards Project boards on GitHub help you organize and prioritize your work. You can create project boards for specific feature work, comprehensive roadmaps, or even release checklists. With project boards, you have the flexibility to create customized workflows that suit your needs. About automation for project boards You can configure automatic workflows to keep the status of project board cards in sync with the associated issues and pull requests. Creating a project board Project boards can be used to create customized workflows to suit your needs, like tracking and prioritizing specific feature work, comprehensive roadmaps, or even release checklists. Adding issues and pull requests to a project board You can add issues and pull requests to a project board in the form of cards. Adding notes to a project board You can add notes to a project board to serve as task reminders or to add information related to the project board. Configuring automation for project boards You can set up automatic workflows to move issues and pull requests to a project board column when a specified event occurs. Filtering cards on a project board You can filter the cards on a project board to search for specific cards or view a subset of the cards. Editing a project board You can edit the title and description of an existing project board. Closing a project board If you've completed all the tasks in a project board or no longer need to use a project board, you can close the project board. Deleting a project board You can delete an existing project board if you no longer need access to its contents. Disabling project boards in a repository Repository administrators can turn off project boards for a repository if you or your team manages work differently. Disabling project boards in your organization Organization owners can turn off organization-wide project boards and repository project boards in an organization. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support About project boards - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing your work on GitHub / About project boards About project boards mac windows linux all Project boards on GitHub help you organize and prioritize your work. You can create project boards for specific feature work, comprehensive roadmaps, or even release checklists. With project boards, you have the flexibility to create customized workflows that suit your needs. Project boards are made up of issues, pull requests, and notes that are categorized as cards in columns of your choosing. You can drag and drop or use keyboard shortcuts to reorder cards within a column, move cards from column to column, and change the order of columns. For more information about keyboard shortcuts, see "Project boards" in "Using keyboard shortcuts." Project board cards contain relevant metadata for issues and pull requests, like labels, assignees, the status, and who opened it. To see more details about the issue or pull request, you can easily navigate to it by clicking the link within the card. You can create notes within columns to serve as task reminders, references to issues and pull requests from any repository on GitHub, or to add information related to the project board. If the note isn't sufficient for your needs, you can convert it to an issue. For more information on converting project board notes to issues, see "Adding notes to a project board." There are two types of project boards: Repository project boards are scoped to issues, pull requests, and notes within a single repository. Organization-wide project boards can contain issues and pull requests from any repository that belongs to an organization. Creating and viewing project boards Anyone with read access to a repository can view the repository's project boards. To create a project board, you must have write access to the repository. Only organization members can view and create organization-wide project boards. If an organization-wide project board includes issues or pull requests from a repository that you don't have permission to view, the card will be redacted. The activity view shows the project board's recent history, such as cards someone created or moved between columns. To access the activity view, click Show menu and then click Activity. To find specific cards on a project board or view a subset of the cards, you can filter project board cards. For more information, see "Filtering cards on a project board." If you've completed all of your project board tasks or no longer need to use your project board, you can close the project board. For more information, see "Closing a project board." You can also disable project boards in a repository or disable project boards in your organization, if you prefer to track your work in a different way. Templates for project boards You can use templates to quickly set up a new project board. When you use a template to create a project board, your new board will include columns as well as cards with tips for using project boards. You can also choose a template with automation already configured. Template Description Basic kanban Track your tasks with To do, In progress, and Done columns Automated kanban Cards automatically move between To do, In progress, and Done columns For more information on automation for project boards, see "About automation for project boards." Further reading "Creating a project board" "Editing a project board" "Adding issues and pull requests to a project board" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support About automation for project boards - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing your work on GitHub / About automation for project boards About automation for project boards mac windows linux all You can configure automatic workflows to keep the status of project board cards in sync with the associated issues and pull requests. To set up automatic workflows for a repository project board, you must have write access to the repository. Organization owners and members can configure automatic workflows on an organization-wide project board. For more information, see "About automation for project boards." You can automate actions based on triggering events for project board columns. This eliminates some of the manual tasks in managing a project board. For example, you can configure a "To do" column, where any new issues or pull requests you add to a project board are automatically moved to the configured column. For more information, see "Configuring automation for project boards." You can use a project board template to create a project board with automation already configured. For more information, see "About project boards." Project board automation can also help teams develop a shared understanding of a project board's purpose and the team's development process by creating a standard workflow for certain actions. Automation options Column preset Configuration options To do Move all newly added issues and pull requests here Move all reopened issues and pull requests here In progress Move all reopened issues and pull requests here Done Move all closed issues here Move all merged pull requests here Move all closed, unmerged pull requests here Further reading "Configuring automation for project boards" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Creating a project board - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing your work on GitHub / Creating a project board Creating a project board mac windows linux all Project boards can be used to create customized workflows to suit your needs, like tracking and prioritizing specific feature work, comprehensive roadmaps, or even release checklists. You can use a project board template to create a project board with automation already configured. For more information, see "About project boards." Once you've created your project board, you can add issues, pull requests, and notes to it. For more information, see "Adding issues and pull requests to a project board" and "Adding notes to a project board." You can also configure workflow automations to keep your project board in sync with the status of issues and pull requests. For more information, see "About automation for project boards." Creating a repository project board On GitHub, navigate to the main page of the repository. Under your repository name, click Projects. Click New Project. Type a name and description for your project board. Optionally, to add a template to your project board, use the Template: drop-down menu and click a template. Click Create project. On your new project board, to add your first column, Add a column. Under "Column name", type the name of the column you want to create. Optionally, under "Automation", select an automation preset using the drop-down menu. Select the workflow automations you want to configure for the column. Click Create column. Add columns to best suit your workflow. Tip: To edit or remove a column from your project board, in the upper-right corner of the column, click . Creating an organization-wide project board In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click Projects. Click New Project. Type a name and description for your project board. Optionally, to add a template to your project board, use the Template: drop-down menu and click a template. Click Create project. On your new project board, to add your first column, Add a column. Under "Column name", type the name of the column you want to create. Optionally, under "Automation", select an automation preset using the drop-down menu. Select the workflow automations you want to configure for the column. Click Create column. Add columns to best suit your workflow. Tip: To edit or remove a column from your project board, in the upper-right corner of the column, click . Further reading "About projects boards" "Editing a project board" "Closing a project board" "About automation for project boards" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Adding issues and pull requests to a project board - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing your work on GitHub / Adding issues and pull requests to a project board Adding issues and pull requests to a project board mac windows linux all You can add issues and pull requests to a project board in the form of cards. Note: You can also add notes to your project board to serve as task reminders, references to issues and pull requests from any repository on GitHub, or to add related information to your project board. For more information, see "Adding notes to a project-board." Adding issues and pull requests to a repository project board On GitHub, navigate to the main page of the repository. Under your repository name, click Projects. In the projects list, click the project board you want to add issues and pull requests to. In your project board, click Add cards. Search for issues and pull requests to add to your project board using search qualifiers. For more information on search qualifiers you can use, see "Searching issues." Tip: If you're working on a specific feature, you can apply a label to each related issue or pull request for that feature, and then easily add cards to your project board by searching for the label name. From the filtered list of issues and pull requests, drag the card you'd like to add to your project board and drop it in the correct column. Alternatively, you can move cards using keyboard shortcuts. For more information about keyboard shortcuts, see "Project boards" in "Using keyboard shortcuts." Tip: You can drag and drop or use keyboard shortcuts to reorder cards and move them between columns. For more information about keyboard shortcuts, see "Project boards" in "Using keyboard shortcuts." Adding issues and pull requests to an organization-wide project board In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click Projects. In the projects list, click the project board you want to add issues and pull requests to. In your project board, click Add cards. Search for issues and pull requests to add to your project board using search qualifiers. For more information on search qualifiers you can use, see "Searching issues." Tip: If you're working on a specific feature, you can apply a label to each related issue or pull request for that feature, and then easily add cards to your project board by searching for the label name. From the filtered list of issues and pull requests, drag the card you'd like to add to your project board and drop it in the correct column. Alternatively, you can move cards using keyboard shortcuts. For more information about keyboard shortcuts, see "Project boards" in "Using keyboard shortcuts." Tip: You can drag and drop or use keyboard shortcuts to reorder cards and move them between columns. For more information about keyboard shortcuts, see "Project boards" in "Using keyboard shortcuts." Adding issues and pull requests to a project board from the sidebar On the right side of an issue or pull request, click Projects . Click the Recent, Repository or Organization tab for the project board you would like to add to. Type the name of the project in Filter projects field. Select one or more project boards to add the issue or pull request as a pending card. On the right side of an issue or pull request, click PROJECT-BOARD-NAME (awaiting triage). In your project board, click Add cards (1 new). Drag the card for your issue or pull request from the Triage section, to the desired column on the project board. Alternatively, you can move cards using keyboard shortcuts. For more information about keyboard shortcuts, see "Project boards" in "Using keyboard shortcuts." Further reading "About project boards" "Editing a project board" "Filtering cards on a project board" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Adding notes to a project board - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing your work on GitHub / Adding notes to a project board Adding notes to a project board mac windows linux all You can add notes to a project board to serve as task reminders or to add information related to the project board. Tips: You can format your note with simple syntax. For more information, see "Basic writing and formatting syntax." You can drag and drop or use keyboard shortcuts to reorder notes and move them between columns. For more information about keyboard shortcuts, see "Project boards" in "Using keyboard shortcuts." Your project board must have at least one column before you can add notes. For more information, see "Creating a project board." When you add an issue or pull request link in a note, you'll see a preview of the issue or pull request in a summary card below your text. In the note editor, you can reference issues and pull requests outside of your project board's repository or account by including the URL. Adding notes to a repository project board On GitHub, navigate to the main page of the repository. Under your repository name, click Projects. In the list of projects, click the project board you want to add notes to. In the column you want to add a note to, click . Type your note, then click Add card. Adding notes to an organization-wide project board In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click Projects. In the list of projects, click the project board you want to add notes to. In the column you want to add a note to, click . Type your note, then click Add card. Converting a note to an issue If you've created a note and find that it isn't sufficient for your needs, you can convert it to an issue. When you convert a note to an issue, the issue is automatically created using the content from the note. The first line of the note will be the issue title and any additional content from the note will be added to the issue description. Tip: You can add content in the body of your note to @mention someone, link to another issue or pull request, and add emoji. These GitHub Flavored Markdown features aren't supported within project board notes, but once your note is converted to an issue, they'll appear correctly. For more information on using these features, see "About writing and formatting on GitHub." Navigate to the note that you want to convert to an issue. In the upper-right corner of the notes, click . Click Convert to issue. If the card is on an organization-wide project board, in the drop-down menu, choose the repository you want to add the issue to. Optionally, edit the pre-filled issue title, and type an issue body. Click Convert to issue. The note is automatically converted to an issue. In the project board, the new issue card will be in the same location as the previous note. Editing and removing a note Navigate to the note that you want to edit or remove. In the upper-right corner of the notes, click . To edit the contents of the note, click Edit note. To delete the contents of the notes, click Delete note. Further reading "About project boards" "Creating a project board" "Editing a project board" "Adding issues and pull requests to a project board" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Configuring automation for project boards - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing your work on GitHub / Configuring automation for project boards Configuring automation for project boards mac windows linux all You can set up automatic workflows to move issues and pull requests to a project board column when a specified event occurs. To set up automatic workflows for a repository project board, you must have write access to the repository. Organization owners and members can configure automatic workflows on an organization-wide project board. For more information, see "About automation for project boards." You can use a project board template to create a project board with automation already configured. For more information, see "About project boards." Tip: To edit columns that already have configured automation, click Manage at the bottom of the column. Configuring automation for a repository project board On GitHub, navigate to the main page of the repository. Under your repository name, click Projects. In the list of projects, click the project board you want to automate. In the column you want to automate, click . Click Manage automation. Using the Preset drop-down menu, select an automation preset. Select the workflow automations you want to configure for the column. Click Update automation. Configuring automation for an organization-wide project board In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click Projects. In the list of projects, click the project board you want to automate. In the column you want to automate, click . Click Manage automation. Using the Preset drop-down menu, select an automation preset. Select the workflow automations you want to configure for the column. Click Update automation. Further reading "About automation for project boards" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Filtering cards on a project board - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing your work on GitHub / Filtering cards on a project board Filtering cards on a project board mac windows linux all You can filter the cards on a project board to search for specific cards or view a subset of the cards. Use the "Filter cards" search bar at the top of each project board to search for cards. You can filter cards using the following search qualifiers in any combination, or by simply typing some text you'd like to search for. Filter cards by author using author:USERNAME Filter cards by assignee using assignee:USERNAME Filter cards by label using label:LABEL and label:"MULTI-WORD LABEL NAME" Filter cards by state using state:open, state:closed, or state:merged Filter cards by type using type:issue, type:pr, or type:note Filter cards by state and type using is:open, is:closed, or is:merged; and is:issue, is:pr, or is:note Filter cards by repository in an organization-wide project board using repo:ORGANIZATION/REPOSITORY Filtering cards on a repository project board On GitHub, navigate to the main page of the repository. Under your repository name, click Projects. In the project board list, click the project that contains the cards you want to filter. Above the project card columns, click into the "Filter cards" search bar and type a search query to filter the cards. Tip: You can drag and drop filtered cards or use keyboard shortcuts to move them between columns. For more information about keyboard shortcuts, see "Project boards" in "Using keyboard shortcuts." Filtering cards on an organization-wide project board In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click Projects. In the project board list, click the project that contains the cards you want to filter. Above the project card columns, click into the "Filter cards" search bar and type a search query to filter the cards. Tip: You can drag and drop filtered cards or use keyboard shortcuts to move them between columns. For more information about keyboard shortcuts, see "Project boards" in "Using keyboard shortcuts." Further reading "About project boards" "Adding issues and pull requests to a project board" "Adding notes to a project board" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Editing a project board - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing your work on GitHub / Editing a project board Editing a project board mac windows linux all You can edit the title and description of an existing project board. Tip: For details on adding, removing, or editing columns in your project board, see "Creating a project board." Editing a repository project board On GitHub, navigate to the main page of the repository. Under your repository name, click Projects. In the projects list, next to the project board you want to edit, click , then click Edit. Modify the project board name and description as needed, then click Save project. Editing an organization-wide project board In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click Projects. In the projects list, next to the project board you want to edit, click , then click Edit. Modify the project board name and description as needed, then click Save project. Further reading "About project boards" "Adding issues and pull requests to a project board" "Deleting a project board" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Closing a project board - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing your work on GitHub / Closing a project board Closing a project board mac windows linux all If you've completed all the tasks in a project board or no longer need to use a project board, you can close the project board. When you close a project board, any configured workflow automation will pause. For more information, see "About automation for project boards." Closing a repository project board On GitHub, navigate to the main page of the repository. Under your repository name, click Projects. In the projects list, next to the project board you want to close, click . Click Close. Closing an organization-wide project board In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click Projects. In the projects list, next to the project board you want to close, click . Click Close. Further reading "About project boards" "Deleting a project board" "Disabling project boards in a repository" "Disabling project boards in your organization" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Deleting a project board - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing your work on GitHub / Deleting a project board Deleting a project board mac windows linux all You can delete an existing project board if you no longer need access to its contents. Tip: If you'd like to retain access to a completed or unneeded project board without losing access to its contents, you can close the project board instead of deleting it. Deleting a repository project board On GitHub, navigate to the main page of the repository. Under your repository name, click Projects. In the projects list, next to the project board you want to delete, click , then click Edit. At the bottom of the page, click Delete project. To confirm that you want to delete the project board, click OK. Deleting an organization-wide project In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click Projects. In the projects list, next to the project board you want to delete, click , then click Edit. At the bottom of the page, click Delete project. To confirm that you want to delete the project board, click OK. Further reading "Closing a project board" "Disabling project boards in a repository" "Disabling project boards in your organization" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Disabling project boards in a repository - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing your work on GitHub / Disabling project boards in a repository Disabling project boards in a repository mac windows linux all Repository administrators can turn off project boards for a repository if you or your team manages work differently. When you disable project boards, you will no longer see project board information in timelines or audit logs. On GitHub, navigate to the main page of the repository. Under your repository name, click Settings. Under "Features," unselect the Projects checkbox. After project boards are disabled, existing project boards are inaccessible at their previous URLs. If you decide to re-enable project boards, any project boards that were previously added will be available. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Disabling project boards in your organization - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing your work on GitHub / Disabling project boards in your organization Disabling project boards in your organization mac windows linux all Organization owners can turn off organization-wide project boards and repository project boards in an organization. After you disable organization-wide project boards, it won’t be possible to create new project boards at the organization level, and any existing organization-level project boards will become inaccessible at their previous URLs. Project boards in repositories in the organization are not affected. After you disable repository project boards in an organization, it won't be possible to create new project boards in any repositories in the organization, and any existing project boards in repositories in the organization will become inaccessible at their previous URLs. Project boards at the organization level are not affected. When you disable project boards, you will no longer see project board information in timelines or audit logs. In the top right corner of GitHub, click your profile photo, then click Your profile. On the left side of your profile page, under "Organizations", click the icon for your organization. Under your organization name, click Settings. Decide whether to disable organization-wide project boards, disable repository project boards in the organization, or both. Then, under "Projects": To disable organization-wide project boards, unselect Enable projects for the organization. To disable repository project boards in the organization, unselect Enable projects for all repositories. Click Save. If you decide to re-enable project boards, any project boards that were previously added will be available. Further reading "About project boards" "Closing a project board" "Deleting a project board" "Disabling project boards in a repository" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Tracking the progress of your work with milestones - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing your work on GitHub / Tracking the progress of your work with milestones Tracking the progress of your work with milestones mac windows linux all You can track your work on GitHub by creating milestones with associated issues and pull requests. About milestones You can use milestones to track progress on groups of issues or pull requests in a repository. Creating and editing milestones for issues and pull requests You can create a milestone to track progress on groups of issues or pull requests in a repository. Associating milestones with issues and pull requests You can associate similar issues and pull requests with a milestone to better track their progress. Filtering issues and pull requests by milestone Issues and pull requests can be filtered based on the milestone they're associated with. Once you've associated an issue or pull request with a milestone, you can find items based on their milestones. Within a milestone, you can prioritize issues and pull requests. Viewing your milestone's progress In order to track your milestones, you'll want to get a better understanding of how many open issues and pull requests are remaining. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support About milestones - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing your work on GitHub / About milestones About milestones mac windows linux all You can use milestones to track progress on groups of issues or pull requests in a repository. When you create a milestone, you can associate it with issues and pull requests. To better manage your project, you can view details about your milestone. From the milestone page, you can see: A user-provided description of the milestone, which can include information like a project overview, relevant teams, and projected due dates The milestone's due date The milestone's completion percentage The number of open and closed issues and pull requests associated with the milestone A list of the open and closed issues and pull requests associated with the milestone Additionally, you can edit the milestone from the milestone page and create new issues that are, by default, associated with the milestone. Prioritizing issues and pull requests in milestones You can prioritize open issues and pull requests in a milestone by clicking to the left of an issue or pull request's checkbox, dragging it to a new location, and dropping it. Note: If there are more than 500 open issues in a milestone, you won't be able to prioritize issues. Further reading "Creating and editing milestones for issues and pull requests" "Associating milestones with issues and pull requests" "Filtering issues and pull requests by milestone" "Viewing your milestone's progress" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Creating and editing milestones for issues and pull requests - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing your work on GitHub / Creating and editing milestones for issues and pull requests Creating and editing milestones for issues and pull requests mac windows linux all You can create a milestone to track progress on groups of issues or pull requests in a repository. On GitHub, navigate to the main page of the repository. Under your repository name, click Issues or Pull requests. Next to the search field, click Milestones. Choose one of these options: To create a new milestone, click New Milestone. To edit a milestone, next to the milestone you want to edit, click Edit. Type the milestone's title, description, or other changes, and click Create milestone or Save changes. Deleting milestones When you delete milestones, issues and pull requests are not affected. On GitHub, navigate to the main page of the repository. Under your repository name, click Issues or Pull requests. Next to the search field, click Milestones. Next to the milestone you want to delete, click Delete. Further reading "About milestones" "Associating milestones with issues and pull requests" "Viewing your milestone's progress" "Filtering issues and pull requests by milestone" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Associating milestones with issues and pull requests - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing your work on GitHub / Associating milestones with issues and pull requests Associating milestones with issues and pull requests mac windows linux all You can associate similar issues and pull requests with a milestone to better track their progress. On GitHub, navigate to the main page of the repository. Under your repository name, click Issues or Pull requests. Select the checkbox next to the items you want associated with a milestone. In the upper-right corner, click Milestone, then start typing the name of an existing milestone. Click the milestone's name to associate it with the item. As you're working on issues and pull requests, you can track the progress of your milestone. Further reading "About milestones" "Creating and editing milestones for issues and pull requests" "Filtering issues and pull requests by milestone" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Filtering issues and pull requests by milestone - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing your work on GitHub / Filtering issues and pull requests by milestone Filtering issues and pull requests by milestone mac windows linux all Issues and pull requests can be filtered based on the milestone they're associated with. Once you've associated an issue or pull request with a milestone, you can find items based on their milestones. Within a milestone, you can prioritize issues and pull requests. Tips: If you'd rather filter issues and pull requests using the Search bar, you can use the milestone search syntax. For a milestone called My Milestone, the search syntax would be: milestone:"My Milestone". To clear your filter selection, click Clear current search query, filters, and sorts. On GitHub, navigate to the main page of the repository. Under your repository name, click Issues or Pull requests. Select Milestones to see a list of all available milestones for the repository. Select the milestone you're interested in from the list. You can view relevant information for the milestone, including all issues and pull requests associated with it, from the milestone page. For more information, see "About milestones." Further reading "Filtering issues and pull requests" "Sorting issues and pull requests" "Using search to filter issues and pull requests" "Sharing filters" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Viewing your milestone's progress - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing your work on GitHub / Viewing your milestone's progress Viewing your milestone's progress mac windows linux all In order to track your milestones, you'll want to get a better understanding of how many open issues and pull requests are remaining. On GitHub, navigate to the main page of the repository. Under your repository name, click Issues or Pull requests. In the upper-left corner, click Milestones. Select the milestone you wish to see more information about. To better manage your project, you can prioritize issues or pull requests within a milestone. For more information, see "About milestones." Further reading "Associating milestones with issues and pull requests" "Filtering issues and pull requests by milestone" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Finding information in a repository - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing your work on GitHub / Finding information in a repository Finding information in a repository mac windows linux all To find detailed information about a repository on GitHub, you can filter, sort, and search issues and pull requests that are relevant to the repository. Filtering issues and pull requests Issues and pull requests come with a set of default filters you can apply to organize your listings. Filtering issues and pull requests by assignees Once you've assigned an issue or pull request to someone, you can find items based on who's working on them. Filtering issues and pull requests by labels Once you've applied labels to an issue or pull request, you can find items based on their labels. Filtering pull requests by review status You can use filters to list pull requests by review status and to find pull requests that you've reviewed or other people have asked you to review. Sorting issues and pull requests Filters can be sorted to provide better information during a specific time period. Using search to filter issues and pull requests Every issues and pull requests view comes with a search bar for advanced filter management. Sharing filters When you filter or sort issues and pull requests, your browser's URL is automatically updated to match the new view. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Filtering issues and pull requests - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing your work on GitHub / Filtering issues and pull requests Filtering issues and pull requests mac windows linux all Issues and pull requests come with a set of default filters you can apply to organize your listings. You can find a pull request where you or a team you're a member of is requested for review with the search qualifier review-requested:[USERNAME] or team-review-requested:[TEAMNAME]. For more information, see "Searching issues and pull requests." You can filter issues and pull requests to find: All open issues and pull requests Issues and pull requests that you've created Issues and pull requests that are assigned to you Issues and pull requests where you're @mentioned On GitHub, navigate to the main page of the repository. Under your repository name, click Issues or Pull requests. Click Filters to choose the type of filter you're interested in. Further reading "Filtering issues and pull requests by assignees" "Filtering issues and pull requests by milestones" "Filtering issues and pull requests by labels" "Filtering pull requests by review status" "Using search to filter issues and pull requests" "Sharing filters" "Viewing all of your issues and pull requests" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Filtering issues and pull requests by assignees - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing your work on GitHub / Filtering issues and pull requests by assignees Filtering issues and pull requests by assignees mac windows linux all Once you've assigned an issue or pull request to someone, you can find items based on who's working on them. On GitHub, navigate to the main page of the repository. Under your repository name, click Issues or Pull requests. In the upper-right corner, select the Assignee drop-down menu. The Assignee drop-down menu lists everyone who has write access to your repository. Click the name of the person whose assigned items you want to see, or click Assigned to nobody to see which issues are unassigned. To clear your filter selection, click Clear current search query, filters, and sorts. Further reading "Filtering issues and pull requests" "Sorting issues and pull requests" "Using search to filter issues and pull requests" "Sharing filters" "Viewing all of your issues and pull requests" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Filtering issues and pull requests by labels - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing your work on GitHub / Filtering issues and pull requests by labels Filtering issues and pull requests by labels mac windows linux all Once you've applied labels to an issue or pull request, you can find items based on their labels. On GitHub, navigate to the main page of the repository. Under your repository name, click Issues or Pull requests. Next to the search field, click Labels. Choose a label to see the items it's been applied to. To clear your filter selection, click Clear current search query, filters, and sorts. Further reading "Filtering issues and pull requests" "Sorting issues and pull requests" "Using search to filter issues and pull requests" "Sharing filters" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Filtering pull requests by review status - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing your work on GitHub / Filtering pull requests by review status Filtering pull requests by review status mac windows linux all You can use filters to list pull requests by review status and to find pull requests that you've reviewed or other people have asked you to review. You can filter a repository's list of pull requests to find: Pull requests that haven't been reviewed yet Pull requests that require a review before they can be merged Pull requests that a reviewer has approved Pull requests in which a reviewer has asked for changes Pull requests that you have reviewed Pull requests that someone has asked you, or a team you're a member of, to review On GitHub, navigate to the main page of the repository. Under your repository name, click Pull requests. In the upper-right corner, select the Reviews drop-down menu. Choose a filter to find all of the pull requests with that filter's status. Further reading "About pull request reviews" "Using search to filter issues and pull requests" "Viewing all of your issues and pull requests" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Sorting issues and pull requests - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing your work on GitHub / Sorting issues and pull requests Sorting issues and pull requests mac windows linux all Filters can be sorted to provide better information during a specific time period. You can sort any filtered view by: The newest created issues or pull requests The oldest created issues or pull requests The most commented issues or pull requests The least commented issues or pull requests The newest updated issues or pull requests The oldest updated issues or pull requests The most added reaction on issues or pull requests On GitHub, navigate to the main page of the repository. Under your repository name, click Issues or Pull requests. In the upper-right corner, select the Sort drop-down menu. To clear your sort selection, click Sort > Newest. Further reading "Filtering issues and pull requests" "Using search to filter issues and pull requests" "Sharing filters" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Using search to filter issues and pull requests - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing your work on GitHub / Using search to filter issues and pull requests Using search to filter issues and pull requests mac windows linux all Every issues and pull requests view comes with a search bar for advanced filter management. The issues and pull requests search bar allows you to define your own custom filters and sort by a wide variety of criteria. You can find the search bar on each repository's Issues and Pull requests tabs and on your Issues and Pull requests dashboards. With issue and pull request search terms, you can: Filter issues and pull requests by author: state:open type:issue author:octocat Filter issues and pull requests that involve, but don't necessarily @mention, certain people: state:open type:issue involves:octocat Filter issues and pull requests by assignee: state:open type:issue assignee:octocat Filter issues and pull requests by label: state:open type:issue label:"bug" For pull requests, you can also use search to: Filter pull requests that haven't been reviewed yet: state:open type:pr review:none Filter pull requests that require a review before they can be merged: state:open type:pr review:required Filter pull requests that a reviewer has approved: state:open type:pr review:approved Filter pull requests in which a reviewer has asked for changes: state:open type:pr review:changes_requested Filter pull requests by reviewer: state:open type:pr reviewed-by:octocat Filter pull requests by the specific user requested for review: state:open type:pr review-requested:octocat Further reading "Searching issues" "Filtering issues and pull requests" "Sorting issues and pull requests" "Sharing filters" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Sharing filters - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Managing your work on GitHub / Sharing filters Sharing filters mac windows linux all When you filter or sort issues and pull requests, your browser's URL is automatically updated to match the new view. You can send the URL that issues generates to any user, and they'll be able to see the same filter view that you see. For example, if you filter on issues assigned to Hubot, and sort on the oldest open issues, your URL would update to something like the following: /issues?q=state:open+type:issue+assignee:hubot+sort:created-asc Further reading "Filtering issues and pull requests" "Sorting issues and pull requests" "Using search to filter issues and pull requests" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Managing repository settings - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Administering a repository / Managing repository settings Managing repository settings mac windows linux all Repository administrators and organization owners can change several settings, including the names and ownership of a repository and the public or private visibility of a repository. They can also delete a repository. About repository transfers When you transfer a repository to a new owner, they can immediately administer the repository's contents, issues, pull requests, releases, and settings. Transferring a repository owned by your personal account You can transfer a repository owned by your personal user account to another user or to an organization where you have repository creation permissions. Transferring a repository owned by your organization You can transfer a repository owned by your organization to your personal user account or to another organization where you have repository creation permissions. Allowing people to fork a private repository owned by your organization Organization owners and people with admin permissions for a repository can allow or prevent the forking of a specific private repository owned by your organization. Renaming a repository You can rename a repository if you're either an organization owner or have admin permissions for the repository. Making a public repository private In a paid account you can change a repository's visibility from public to private if you're an organization owner or have admin permissions for the repository. Making a private repository public You can change a repository's visibility from private to public if you're an organization owner or have admin permissions for the repository. Deleting a repository You can delete any repository or fork if you're either an organization owner or have admin permissions for the repository or fork. Deleting a forked repository does not delete the upstream repository. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support About repository transfers - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Administering a repository / About repository transfers About repository transfers mac windows linux all When you transfer a repository to a new owner, they can immediately administer the repository's contents, issues, pull requests, releases, and settings. Warning: Forking a repository is NOT the same as transferring it. Forking just creates a copy of the original repository. If you create a new repository under your account with the same name as the transferred repository, existing redirects to the transferred repository will break. Instead, use a different name for the new repository. Before you transfer a repository, keep these things in mind: When the current owner initiates the transfer, the new owner will receive an email giving the option to accept or reject the transfer. If the new owner doesn't accept the transfer within one day, it won't complete. The target account must not have a repository with the same name, or a fork in the same network. The original owner of the repository is added as a collaborator on the transferred repository. Other collaborators to the transferred repository remain intact. Private forks can't be transferred. What's transferred with a repository? When you transfer a repository, its issues, wiki, stars, and watchers are also transferred. In addition: If the transferred repository is a fork, then it remains associated with the upstream repository. If the transferred repository contains a GitHub Pages site, then links to the Git repository on the Web and through Git activity are redirected. However, we don't redirect GitHub Pages associated with the repository. If the transferred repository contains webhooks, services, or deploy keys, they will remain associated after the transfer is complete. If the transferred repository has any forks, then those forks will remain associated with the repository after the transfer is complete. If the transferred repository uses Git Large File Storage, all Git LFS objects are automatically moved. This transfer occurs in the background so if you have a large number of Git LFS objects or if the Git LFS objects themselves are large, it may take some time for the transfer to occur. Before you transfer a repository that uses Git LFS, make sure the receiving account has enough data packs to store the Git LFS objects you'll be moving over. For more information on adding storage for personal accounts, see "Purchasing additional storage and bandwidth for a personal account." All Git information about commits, including contributions, are preserved. All of the issues and pull requests remain intact when transferring a repository. All links to the previous repository location are automatically redirected to the new location. When you use git clone, git fetch, or git push on a transferred repository, these commands will redirect to the new repository location or URL. However, to avoid confusion, we strongly recommend updating any existing local clones to point to the new repository URL. You can do this by using git remote on the command line: $ git remote set-url origin new_url For more information, see "Changing a remote's URL". Further reading "Transferring a repository owned by your personal account" "Transferring a repository owned by your organization account" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Transferring a repository owned by your personal account - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Administering a repository / Transferring a repository owned by your personal account Transferring a repository owned by your personal account mac windows linux all You can transfer a repository owned by your personal user account to another user or to an organization where you have repository creation permissions. Warning: Forking a repository is NOT the same as transferring it. Forking just creates a copy of the original repository. If you create a new repository under your account with the same name as the transferred repository, existing redirects to the transferred repository will break. Instead, use a different name for the new repository. Transferring to a user account You can transfer your repository to any user account that accepts your repository transfer. If you are transferring a private repository, the new repository owner must have a paid plan. When a repository is transferred between two user accounts, the original repository owner and collaborators are automatically added as collaborators to the new repository. When a repository is transferred between two user accounts, issue assignments are left intact. Transferring to an organization Users must have repository creation permissions within the receiving organization before they can transfer a repository that they individually own. If Allow members to create repositories for this organization has been disabled in the receiving organization, only organization owners can transfer repositories into the organization. Your organization's default membership privileges will apply to the transferred repository. For example, if your default repository permission settings allow organization members read/write access, then all organization members can clone, pull, and push all repositories, including transferred repositories. See "Permission Levels for an Organization" for more information. If you transfer a repository from a user account to an organization, issues assigned to members in the organization remain intact. All other issue assignees are cleared. Only owners in the organization are allowed to create new issue assignments. Transferring a repository to another user account or to an organization On GitHub, navigate to the main page of the repository. Under your repository name, click Settings. Click Transfer. Read the warnings and enter the repository name to confirm that you've done so. Type the name of the new owner and click I understand, transfer this repo. Further reading "Transferring a repository owned by your organization" "About repository transfers" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Transferring a repository owned by your organization - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Administering a repository / Transferring a repository owned by your organization Transferring a repository owned by your organization mac windows linux all You can transfer a repository owned by your organization to your personal user account or to another organization where you have repository creation permissions. Warning: Forking a repository is NOT the same as transferring it. Forking just creates a copy of the original repository. If you create a new repository under your account with the same name as the transferred repository, existing redirects to the transferred repository will break. Instead, use a different name for the new repository. Transferring to another organization To transfer a repository owned by your organization to another organization, you must have admin or owner permissions in the originating repository and repository creation permissions in the receiving organization. If Allow members to delete or transfer repositories for this organization has been disabled in the originating organization, only organization owners can transfer organization repositories. If Allow members to create repositories for this organization has been disabled in the receiving organization, only organization owners can transfer repositories into the organization. Once a repository is transferred to an organization, the organization's default repository permission settings will apply to the transferred repository. For example, if your default repository permission settings allow organization members read/write access, then all organization members can clone, pull, and push all repositories, including transferred repositories. Outside collaborators will still have access to the transferred repository and users with admin or owner access can invite more members or outside collaborators and adjust their permissions. For more information, see "Permission levels for an organization." Transferring to your personal user account To transfer a repository owned by your organization to your personal account, you must be signed into your personal account and it must have admin or owner permissions in the repository. If Allow members to delete or transfer repositories for this organization has been disabled in the organization, only organization owners can transfer organization repositories. If an organization owner wants to transfer a repository owned by the organization to a team member's personal user account, then the organization owner must ensure that the team member has admin permissions to the organization so the team member can initiate the transfer themselves. If you transfer a repository from an organization to a user account, only issues assigned to the repository's owner are kept. All other issue assignees are removed. Transferring a repository to another organization or to your personal user account Sign into your personal user account that has admin or owner permissions in the organization that owns the repository. If Allow members to delete or transfer repositories for this organization has been disabled in the organization, your user account must have owner permissions in the organization. On GitHub, navigate to the main page of the repository. Under your repository name, click Settings. Click Transfer. Read the warnings and enter the repository name to confirm that you've done so. Type the name of the new owner and click I understand, transfer this repo. Further reading "Transferring a repository owned by your personal account" "About repository transfers" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Allowing people to fork a private repository owned by your organization - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Administering a repository / Allowing people to fork a private repository owned by your organization Allowing people to fork a private repository owned by your organization mac windows linux all Organization owners and people with admin permissions for a repository can allow or prevent the forking of a specific private repository owned by your organization. Note: An organization owner must allow forks of private repositories on the organization level before you can allow or disallow forks for a specific repository. For more information, see "Allowing people to fork private repositories in your organization." On GitHub, navigate to the main page of the repository. Under your repository name, click Settings. Under "Features", select Allow forking. Further reading "About forks" "Repository permission levels for an organization" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Renaming a repository - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Administering a repository / Renaming a repository Renaming a repository mac windows linux all You can rename a repository if you're either an organization owner or have admin permissions for the repository. When you rename a repository, all existing information, with the exception of Project Pages URLs, is automatically redirected to the new name, including: Issues Wikis Stars Followers In addition to redirecting web traffic, all git clone, git fetch, or git push operations targeting the previous location will continue to function as if made on the new location. However, to reduce confusion, we strongly recommend updating any existing local clones to point to the new repository URL. You can do this by using git remote on the command line: git remote set-url origin new_url For more information, see "Changing a Remote's URL". If you plan on renaming your repository, we recommend using a custom domain for your Project Pages. Using a custom domain will ensure that your Project Pages URL isn't impacted by the repository name change. Tip: Only members with owner privileges for an organization or admin privileges for a repository can rename a repository. For more information, see "Repository permission levels for an organization." Warning: If you create a new repository under your account with the same name as the transferred repository, existing redirects to the transferred repository will break. Instead, use a different name for the new repository. On GitHub, navigate to the main page of the repository. Under your repository name, click Settings. Under the Repository Name heading, type the new name of your repository. Click Rename. You're done! Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Making a public repository private - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Administering a repository / Making a public repository private Making a public repository private mac windows linux all In a paid account you can change a repository's visibility from public to private if you're an organization owner or have admin permissions for the repository. If an organization owner has restricted the ability to change repository visibility to organization owners only, members with admin permissions to a public repository cannot make it private. For more information, see "Repository permission levels for an organization." Tip: If you have a free account, you will need to upgrade before you can switch the repository to private. Warning: When a public repository is made private, public forks of the public repository are detached and put into a new network. They are not made private. For more information, see "What happens to forks when a repository is deleted or changes visibility?" On GitHub, navigate to the main page of the repository. Under your repository name, click Settings. Click Make private. Read the warnings. Type the name of the repository that you want to make private. Click I understand, make this repository private. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Making a private repository public - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Administering a repository / Making a private repository public Making a private repository public mac windows linux all You can change a repository's visibility from private to public if you're an organization owner or have admin permissions for the repository. If an organization owner has restricted the ability to change repository visibility to organization owners only, members with admin permissions to a private repository cannot make it public. For more information, see "Repository permission levels for an organization." Tip: If you're converting your private repository to a public repository as part of a move toward creating an open source project, see the Open Source Guides for helpful tips and guidelines. Once your repository is public, you can also view your repository's community profile to see whether your project meets best practices for supporting contributors. Warning: When a private repository is made public, its private forks are detached and billed separately. For more information, see "What happens to forks when a repository is deleted or changes visibility?" On GitHub, navigate to the main page of the repository. Under your repository name, click Settings. Click Make public. Read the warnings. Type the name of the repository that you want to make public. Click I understand, make this repository public. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Deleting a repository - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Administering a repository / Deleting a repository Deleting a repository mac windows linux all You can delete any repository or fork if you're either an organization owner or have admin permissions for the repository or fork. Deleting a forked repository does not delete the upstream repository. Only members with owner privileges for an organization or admin privileges for a repository can delete an organization repository. If Allow members to delete or transfer repositories for this organization has been disabled, only organization owners can delete organization repositories. For more information, see "Repository permission levels for an organization." Warning: These steps will permanently delete the repository, wiki, issues, and comments. This action cannot be undone. Please also keep in mind that: Deleting a private repository will delete all of its forks. Deleting a public repository will not delete its forks. Deleting all of your private repositories will not downgrade your account to free. On GitHub, navigate to the main page of the repository. Under your repository name, click Settings. Under Danger Zone, click Delete this repository. Read the warnings. To verify that you're deleting the correct repository, type the name of the repository you want to delete. Click I understand the consequences, delete this repository. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Managing branches in your repository - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Administering a repository / Managing branches in your repository Managing branches in your repository mac windows linux all Whenever you propose a change in Git, you create a new branch. Branch management is an important part of the Git workflow. After some time, your list of branches may grow, so it's a good idea to delete merged or stale branches. Setting the default branch The default branch is considered the base branch in your repository, against which all pull requests and code commits are automatically made, unless you specify a different branch. Viewing branches in your repository Branches are central to collaboration on GitHub, and the best way to view them is the branches page. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Setting the default branch - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Administering a repository / Setting the default branch Setting the default branch mac windows linux all The default branch is considered the base branch in your repository, against which all pull requests and code commits are automatically made, unless you specify a different branch. Your default branch is named master. If you have admin rights over a repository on GitHub, you can change the default branch on the repository. On GitHub, navigate to the main page of the repository. Under your repository name, click Settings. In the left menu, click Branches. In the default branch sidebar, choose the new default branch. You can only switch between branches that already exist on GitHub. To create a new branch through the UI, see "Creating and deleting branches within your repository". Warning: This affects your trunk branch contents on the Git-Subversion bridge and the HEAD you'd see when you git ls-remote this repository's upstream URL. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Viewing branches in your repository - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Administering a repository / Viewing branches in your repository Viewing branches in your repository mac windows linux all Branches are central to collaboration on GitHub, and the best way to view them is the branches page. On GitHub, navigate to the main page of the repository. Above the list of files, click NUMBER branches. Use the navigation at the top of the page to view specific lists of branches: Your branches: In repositories that you have push access to, the Yours view shows all branches that you’ve pushed to, with the most recent branches first. Active branches: The Active view shows all branches that anyone has committed to within the last three months, ordered by the branches with the most recent commits first. Stale branches: The Stale view shows all branches that no one has committed to in the last three months, ordered by the branches with the oldest commits first. Use this list to determine which branches to delete. All branches: The All view shows the default branch, followed by all other branches ordered by the branches with the most recent commits first. Further reading "Creating and deleting branches within your repository" "Deleting unused branches" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Deleting and restoring branches in a pull request - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Administering a repository / Deleting and restoring branches in a pull request Deleting and restoring branches in a pull request mac windows linux all If you have write access in a repository, you can delete branches that are associated with closed or merged pull requests. You cannot delete branches that are associated with open pull requests. On GitHub, navigate to the main page of the repository. Under your repository name, click Pull requests. Click Closed to see a list of closed pull requests. In the list of pull requests, click the pull request that's associated with the branch that you want to delete. Near the bottom of the pull request, click Delete branch. Restoring a deleted branch You can restore the head branch of a closed pull request. On GitHub, navigate to the main page of the repository. Under your repository name, click Pull requests. Click Closed to see a list of closed pull requests. In the list of pull requests, click the pull request that's associated with the branch that you want to restore. Near the bottom of the pull request, click Restore branch. Further reading "Creating and deleting branches within your repository" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Configuring pull request merges - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Administering a repository / Configuring pull request merges Configuring pull request merges mac windows linux all You can configure pull request merges on GitHub to match your workflow and preferences for managing Git history by enabling, disabling, or enforcing standard merge commits, squashed commits, or rebased commits on all pull requests in your repository. About merge methods on GitHub You can allow contributors with push access to your repository to merge their pull requests on GitHub with different merge options or enforce a specific merge method for all of your repository's pull requests. Configuring commit squashing for pull requests You can enforce, allow, or disable commit squashing for all pull request merges on GitHub in your repository. Configuring commit rebasing for pull requests You can enforce, allow, or disable commit rebasing for all pull request merges on GitHub in your repository. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support About merge methods on GitHub - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Administering a repository / About merge methods on GitHub About merge methods on GitHub mac windows linux all You can allow contributors with push access to your repository to merge their pull requests on GitHub with different merge options or enforce a specific merge method for all of your repository's pull requests. You can configure pull request merge options on GitHub to meet your workflow needs and preferences for managing Git history. You can enforce one type of merge method, such as commit squashing or rebasing, by only enabling the desired method for your repository. When you click the default Merge pull request option on a pull request on GitHub, all commits from the feature branch are added to the base branch in a merge commit. The pull request is merged using the --no-ff option. To merge pull requests, you must have write permissions in the repository. Squashing your merge commits When you select the Squash and merge option on a pull request on GitHub, the pull request's commits are squashed into a single commit. Instead of seeing all of a contributor's individual commits from a topic branch, the commits are combined into one commit and merged into the default branch. Pull requests with squashed commits are merged using the fast-forward option. To squash and merge pull requests, you must have write permissions in the repository, and the repository must allow squash merging. You can use squash and merge to create a more streamlined Git history in your repository. Work-in-progress commits are helpful when working on a feature branch, but they aren’t necessarily important to retain in the Git history. If you squash these commits into one commit while merging to the default branch, you can retain the original changes with a clear Git history. Before enabling squashing commits, consider these disadvantages: You lose information about when specific changes were originally made and who authored the squashed commits. Some Git commands that use the "SHA" or "hash" ID may be harder to use since the SHA ID for the original commits is lost. For example, using git rerere may not be as effective. For more information, see "Configuring commit squashing for pull requests." Rebasing and merging your commits When you select the Rebase and merge option on a pull request on GitHub, all commits from the topic branch (or head branch) are added onto the base branch individually without a merge commit. Pull requests with rebased commits are merged using the fast-forward option. To rebase and merge pull requests, you must have write permissions in the repository, and the repository must allow rebase merging. The rebase and merge behavior on GitHub deviates slightly from git rebase. Rebase and merge on GitHub will always update the committer information and create new commit SHAs, whereas git rebase outside of GitHub does not change the committer information when the rebase happens on top of an ancestor commit. For more information about git rebase, see the "Git rebase" chapter from the Pro Git book. For a visual representation of git rebase, see The "Git Branching - Rebasing" chapter from the Pro Git book. Before enabling commit rebasing, consider these disadvantages: Repository contributors may have to rebase on the command line, resolve any conflicts, and force push their changes to the pull request's topic branch (or remote head branch) before they can use the rebase and merge option on GitHub. Force pushing must be done carefully so contributors don't overwrite work that others have based their work on. To learn more about when the Rebase and merge option is disabled on GitHub and the workflow to re-enable it, see "About pull request merges." For more information, see "Configuring commit rebasing for pull requests." Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Configuring commit squashing for pull requests - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Administering a repository / Configuring commit squashing for pull requests Configuring commit squashing for pull requests mac windows linux all You can enforce, allow, or disable commit squashing for all pull request merges on GitHub in your repository. You can configure pull request merge options on GitHub to meet your workflow needs and preferences for managing Git history. On GitHub, navigate to the main page of the repository. Under your repository name, click Settings. Under "Merge button", optionally select Allow merge commits. This allows contributors to merge a pull request with a full history of commits. Under "Merge button", select Allow squash merging. This allows contributors to merge a pull request by squashing all commits into a single commit. If you select another merge method besides Allow squash merging, collaborators will be able to choose the type of merge commit when merging a pull request. Further reading "About pull request merges" "Merging a pull request" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Configuring commit rebasing for pull requests - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Administering a repository / Configuring commit rebasing for pull requests Configuring commit rebasing for pull requests mac windows linux all You can enforce, allow, or disable commit rebasing for all pull request merges on GitHub in your repository. You can configure pull request merge options on GitHub to meet your workflow needs and preferences for managing Git history. On GitHub, navigate to the main page of the repository. Under your repository name, click Settings. Under "Merge button", select Allow rebase merging. This allows contributors to merge a pull request by rebasing their individual commits onto the base branch. If you also select another merge method, collaborators will be able to choose the type of merge commit when merging a pull request. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Defining the mergeability of pull requests - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Administering a repository / Defining the mergeability of pull requests Defining the mergeability of pull requests mac windows linux all You can require pull requests to pass a set of checks before they can be merged. For example, you can block pull requests that don't pass status checks. You can also require that pull requests have at least one approved review before they can be merged. By default, any pull request can be merged at any time, unless the head branch is in conflict with the base branch. But as your project matures and stabilizes, you can choose to enforce restrictions on how a pull request is merged into your repository. About protected branches Protected branches ensure that collaborators on your repository cannot make irrevocable changes to branches. These branches can also be protected by requiring pull requests to have at least one approved review before they can be merged. Configuring protected branches Repository administrators can enable protected branches for limiting branch manipulation. About required status checks Required status checks ensure that all required CI tests are passing before collaborators can make changes to a protected branch. Types of required status checks You can set up required status checks to either be "loose" or "strict." The type of required status check you choose determines whether your branch is required to be up to date with the base branch before merging. Enabling required status checks Repository administrators can enforce required status checks before a branch is merged in a pull request or before commits on a local branch can be pushed to the protected remote branch. About branch restrictions Branches within repositories that belong to organizations can be configured so that only certain users or teams can push to the branch. Enabling branch restrictions Repository administrators for organizations can enforce branch restrictions so that only certain users or teams are able to push to a protected branch. About required reviews for pull requests Required reviews ensure that pull requests have at least one approved review before collaborators can make changes to a protected branch. Enabling required reviews for pull requests Repository administrators can enforce required reviews so that pull requests must have at least one approved review before they are merged. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support About protected branches - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Administering a repository / About protected branches About protected branches mac windows linux all Protected branches ensure that collaborators on your repository cannot make irrevocable changes to branches. These branches can also be protected by requiring pull requests to have at least one approved review before they can be merged. If you own a repository with multiple collaborators who create branches and open pull requests, you may need to enforce branch protections to keep your project and pull requests organized and safe. Protected branches block several features of Git on a branch that a repository administrator chooses to protect. A protected branch: Can't be force pushed Can't be deleted Can't have changes merged into it until required status checks pass Can't have changes merged into it until required reviews are approved Can't be edited or have files uploaded to it from the web Can't have changes merged into it until changes to files that have a designated code owner have been approved by that owner If your repository belongs to an organization, you can restrict users or teams from pushing to a protected branch. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Configuring protected branches - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Administering a repository / Configuring protected branches Configuring protected branches mac windows linux all Repository administrators can enable protected branches for limiting branch manipulation. On GitHub, navigate to the main page of the repository. Under your repository name, click Settings. In the left menu, click Branches. Under Protected Branches, select the branch you want to mark protected using the drop-down menu. Select Protect this branch. Click Save changes. Further reading "About required status checks" "Enabling required status checks" "About branch restrictions" "Enabling branch restrictions" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support About required status checks - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Administering a repository / About required status checks About required status checks mac windows linux all Required status checks ensure that all required CI tests are passing before collaborators can make changes to a protected branch. If you've enforced branch protections in your repository, you can set up required status checks. These checks must pass before branches can be merged into the protected branch. Any commits must either be pushed to another branch and then merged or pushed directly to the protected branch after all required status checks have passed. Once you've set up required status checks, your branch must be up to date with the base branch before merging. This ensures that your branch has been tested with the latest code from the base branch. If your branch is out of date, you'll need to merge the base branch into your branch. Note: You can also bring your branch up to date with the base branch by using Git rebase. You won't be able to push local changes to a protected branch until all required status checks pass. Instead, you'll receive an error message similar to the following: remote: error: GH006: Protected branch update failed for refs/heads/master. remote: error: Required status check "ci-build" is failing Note: Pull requests that are up to date and pass required status checks can be merged locally and pushed to the protected branch. This can be done without status checks running on the merge commit itself. Administrators of a repository can merge a protected branch even if required status checks have failed or are pending. You can require administrators to be subject to required status checks. Administrators can also merge a protected branch even if the branch is out of date with the base branch. You can set up either loose or strict status checks, depending on whether you want to require your branch to be up to date with the base branch before merging. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Types of required status checks - User Documentation <meta name="Description" content="You can [set up required status checks](/articles/enabling-required-status-checks) to either be "loose" or "strict." The type of required status check you choose determines whether your branch is required to be up to date with the base branch before merging. …"> GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Administering a repository / Types of required status checks Types of required status checks mac windows linux all You can set up required status checks to either be "loose" or "strict." The type of required status check you choose determines whether your branch is required to be up to date with the base branch before merging. Type of required status check Setting Merge requirements Considerations Strict The Require branches to be up-to-date before merging checkbox is checked. The branch must be up to date with the base branch before merging. This is the default behavior for required status checks. More builds may be required, as you'll need to bring the head branch up to date after other collaborators merge pull requests to the protected base branch. Loose The Require branches to be up-to-date before merging checkbox is not checked. The branch does not have to be up to date with the base branch before merging. You'll have fewer required builds, as you won't need to bring the head branch up to date after other collaborators merge pull requests. Status checks may fail after you merge your branch if there are incompatible changes with the base branch. Disabled The Require status checks to pass before merging checkbox is not checked. The branch has no merge restrictions. If required status checks aren't enabled, collaborators can merge the branch at any time, regardless of whether it is up to date with the base branch. This increases the possibility of incompatible changes. Further reading "About required status checks" "Enabling required status checks" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Enabling required status checks - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Administering a repository / Enabling required status checks Enabling required status checks mac windows linux all Repository administrators can enforce required status checks before a branch is merged in a pull request or before commits on a local branch can be pushed to the protected remote branch. Note: Before enabling required status checks on a branch, you must first: Set the branch up as a protected branch. Configure the repository to make use of the Status API. For more information, see "Building a CI Server" in the GitHub Developer documentation for an introduction to this API. On GitHub, navigate to the main page of the repository. Under your repository name, click Settings. In the left menu, click Branches. Under Protected Branches, select the branch you want to mark with a required status check using the drop-down menu. Select Require status checks to pass before merging. Optionally, deselect Require branches to be up to date before merging. If selected, this ensures that the branch is tested with the latest code on the base branch. From the list of available status checks, select the ones you want to make required. Optionally, select Include administrators. This enforces the required status checks on the repository administrators. Optionally, deselect Require branches to be up-to-date before merging. If selected, this ensures that the branch is tested with the latest code on the base branch. Click Save changes. Tip: To successfully merge a pull request into a base branch that has required status checks enabled, the pull request's head branch must be up-to-date with the base branch. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support About branch restrictions - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Administering a repository / About branch restrictions About branch restrictions mac windows linux all Branches within repositories that belong to organizations can be configured so that only certain users or teams can push to the branch. Note: Organization owners and users with admin permissions for a repository are always able to push to a protected branch. When you enable branch restrictions, only people or teams that have been given permission can push to the protected branch. You can view and edit the users or teams with push access to a protected branch in the protected branch's settings. . Note: If the "Include administrators" is checked and you've enabled required status checks on the branch and they fail, any attempt to push changes to the base branch will also fail, regardless of a user or team's permission status. Further reading "About protected branches" "Configuring protected branches" "About required status checks" "Enabling required status checks" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Enabling branch restrictions - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Administering a repository / Enabling branch restrictions Enabling branch restrictions mac windows linux all Repository administrators for organizations can enforce branch restrictions so that only certain users or teams are able to push to a protected branch. On GitHub, navigate to the main page of the repository. Under your repository name, click Settings. In the left menu, click Branches. Under Protected Branches, select the branch you want to restrict using the drop-down menu. Select Restrict who can push to this branch. Search for and select the people or teams who will have permission to push to the protected branch. Click Save changes. Further reading "About protected branches" "Configuring protected branches" "About required status checks" "Enabling required status checks" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support About required reviews for pull requests - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Administering a repository / About required reviews for pull requests About required reviews for pull requests mac windows linux all Required reviews ensure that pull requests have at least one approved review before collaborators can make changes to a protected branch. If you've enforced branch protections in your repository, you can set up required reviews. Repository administrators can require that all pull requests receive at least one approved review from someone with write or admin permissions or from a designated code owner before they're merged into a protected branch. For more information, see "About protected branches." When required reviews are enabled, anyone with access to the repository can approve changes in a pull request. However, to merge your pull request you need someone who has write or admin permissions in the repository to approve your pull request's changes in their review. If review is required from a designated code owner and the pull request affects code that has a designated owner, approval from that owner is required. If a person with admin permissions chooses the Request changes option in a review, then that person must approve the pull request before it can be merged. If a reviewer who requests changes on a pull request isn't available, anyone with admin or write permission for the repository can dismiss the blocking review. For more information, see "Dismissing a pull request review." Note: Repository admins can restrict the ability to dismiss pull request reviews to specific people or teams. For more information, see "Enabling required reviews for pull requests." If you push a code-modifying commit to the branch of an approved pull request, the approval may be dismissed if repository admins have set up stale review dismissals. This doesn't apply if you push non-code-modifying commits, like merging the base branch into your pull request's branch. Unless required reviews have been set up to include repository admins, people with admin permissions can merge a pull request regardless of reviews from other admins. After all required reviewers have approved a pull request, you won't be able to merge it if there are other open pull requests with pending or rejected reviews and those pull requests have a head branch pointing to the same commit. Someone with write or admin permissions will need to approve or dismiss the blocking review on the other pull requests before you can merge. You can't merge a pull request into a protected branch until someone with write or admin permissions approves it. If there are pending or rejected reviews, you'll receive an error message: remote: error: GH006: Protected branch update failed for refs/heads/master. remote: error: Changes have been requested. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Enabling required reviews for pull requests - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Administering a repository / Enabling required reviews for pull requests Enabling required reviews for pull requests mac windows linux all Repository administrators can enforce required reviews so that pull requests must have at least one approved review before they are merged. Note: Before enabling required reviews on a branch, you must first set the branch up as a protected branch. On GitHub, navigate to the main page of the repository. Under your repository name, click Settings. In the left menu, click Branches. Under Protected Branches, select the branch you want to restrict using the drop-down menu. Select Require pull request reviews before merging. Optionally, select Dismiss stale pull request approvals when new commits are pushed. This dismisses a pull request approval review when a code-modifying commit is pushed to the branch. Optionally, select Require review from Code Owners to require review from a code owner when the pull request affects code that has a designated owner. Optionally, if the repository is part of an organization, select Restrict who can dismiss pull request reviews to search for and select the people or teams who can dismiss pull request reviews. This option is not available for personal repositories. Optionally, select Include administrators. This enforces the required status checks on the repository administrators. Click Save changes. Further reading "About required pull request reviews" "About protected branches" "About required status checks" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Updating your project's dependencies - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Administering a repository / Updating your project's dependencies Updating your project's dependencies mac windows linux all You can track your repository's dependencies and receive alerts when GitHub detects vulnerable dependencies. About security alerts for vulnerable dependencies GitHub tracks reported vulnerabilities in certain dependencies and provides security alerts to affected repositories. Viewing and updating vulnerable dependencies in your repository If GitHub discovers vulnerable dependencies in your project, you can view them using your repository's dependency graph. Then, you can update your project to resolve the vulnerability. Managing alerts for vulnerable dependencies in your organization's repositories Organization owners and repository admins receive security alerts when GitHub detects a vulnerable dependency in an organization repository. You can specify additional organization members or teams to also receive security alerts for vulnerable dependencies. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support About security alerts for vulnerable dependencies - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Administering a repository / About security alerts for vulnerable dependencies About security alerts for vulnerable dependencies mac windows linux all GitHub tracks reported vulnerabilities in certain dependencies and provides security alerts to affected repositories. About security vulnerabilities A vulnerability is a problem in a project's code that could be exploited to damage the confidentiality, integrity, or availability of the project or other projects that use its code. Depending on the severity level and the way your project uses the dependency, vulnerabilities can cause a range of problems for your project or the people who use it. You can track and resolve vulnerabilities for certain types of dependencies in your GitHub repository. GitHub's security alerts for vulnerable dependencies GitHub tracks public vulnerabilities in Ruby gems and NPM packages on MITRE's Common Vulnerabilities and Exposures (CVE) List. When GitHub receives a notification of a newly-announced vulnerability, we identify public repositories (and private repositories that have opted in to vulnerability detection) that use the affected version of the dependency. Then, we send security alerts to owners and people with admin access to affected repositories. You can also configure security alerts for additional people or teams working in organization-owned repositories. GitHub never publicly discloses identified vulnerabilities for any repository. We detect vulnerable dependencies in public repositories by default. Owners of and people with admin access to private repositories can also opt into vulnerability detection for the repository. For more information, see "Opting into or out of data use for your private repository." Configuring and accessing security alerts You can choose to receive security alerts by email, in your web notifications, or in the GitHub user interface. The security alerts list the affected dependency and, in some cases, use machine learning to suggest a fix from the GitHub community. You can see all of the alerts affecting a particular project in the repository's dependency graph, which lists all of a project's Ruby and JavaScript dependencies. For more information, see "Listing the packages that a repository depends on." Learning more about a vulnerability Security alerts for a vulnerable dependency in your repository include a severity level and a link to the affected file in your project. When available, the alerts also include a link to the CVE record and a suggested fix. The severity level is pulled from the CVE record and is one of four possible levels defined in the Common Vulnerability Scoring System (CVSS), Section 2.1.2: Low Moderate High Critical For more details on the vulnerability, you can read its record on the Common Vulnerabilities and Exposures (CVE) List, including its CVSS scores and corresponding qualitative severity level. Investigating and resolving a vulnerability in a dependency GitHub recommends keeping all dependencies up-to-date. Note: After you learn about a vulnerable dependency in your repository, you should investigate its impact on your project and verify that the vulnerability is resolved by the version change before you update the dependency. If a safe recommended version does not exist, we recommend removing the dependency altogether in favor of a similar, safe dependency, if one is available. Read the CVE record to learn more about the vulnerability and its severity level. Check to see how the vulnerable dependency is used in your project. If the vulnerability is in code that's actively used in your project, you should prioritize the update. For example, if your project uses a vulnerable dependency in test cases, it may have less risk than a vulnerable dependency that your project uses to directly process user input. Check the documentation for the dependency's recommended version to confirm that the recommended version resolves the vulnerability, and to confirm that the new version is backward compatible with your project. Confirm that updating the version will completely resolve the vulnerability for your project. Open a pull request to update the dependency to the recommended safe version and make any changes needed for compatibility. For more information, see "Viewing and updating vulnerable dependencies in your repository." Ensure that all of your project's tests pass and confirm that the functionality you're updating works correctly, then merge the pull request. For more information see, "About statuses." Notify project collaborators, owners of any forks of your project, and any projects that depend on yours of the recommended version change and tell them how the previously vulnerable dependency affected your project. For more information, see "Listing the projects that depend on a repository." Further reading MITRE's definition of "vulnerability" "Choosing the delivery method for your notifications" "Viewing and updating vulnerable dependencies in your repository" "Listing the packages that a repository depends on" "Managing alerts for vulnerable dependencies in your organzation's repositories" "Understanding how GitHub uses and protects your data" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Viewing and updating vulnerable dependencies in your repository - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Administering a repository / Viewing and updating vulnerable dependencies in your repository Viewing and updating vulnerable dependencies in your repository mac windows linux all If GitHub discovers vulnerable dependencies in your project, you can view them using your repository's dependency graph. Then, you can update your project to resolve the vulnerability. The dependency graph is available by default for every public repository. You can also set up the dependency graph for private repositories. For more information on enabling the dependency graph for your private repository, see "Listing the packages that a repository depends on." Vulnerable dependencies are highlighted in yellow and listed first on the dependency graph. You can use a drop-down menu to view the severity level for the vulnerability and, if available, a suggested version to update your dependency to. Viewing and updating vulnerable dependencies GitHub recommends keeping all dependencies up-to-date. Note: After you learn about a vulnerable dependency in your repository, you should investigate its impact on your project and verify that the vulnerability is resolved by the version change before you update the dependency. If a safe recommended version does not exist, we recommend removing the dependency altogether in favor of a similar, safe dependency, if one is available. For more information, see "About security alerts for vulnerable dependencies." On GitHub, navigate to the main page of the repository. Under your repository name, click Insights. In the left sidebar, click Dependency graph. Next to a highlighted dependency, click the drop-down menu. To view the affected line in your project, click View vulnerability info . When you're ready to update your dependency to resolve the vulnerability, you can: Update your file in the GitHub interface. For more information, see "Editing files in your repository." Update your file locally and push your changes to GitHub. Troubleshooting the dependency graph If your project has dependencies, but no dependencies are detected in your graph, there may be a problem with the file containing your dependencies. Check your project's file to ensure that it's correctly formatted for the file type. Further reading "About security alerts for vulnerable dependencies" "Choosing the delivery method for your notifications" "Managing alerts for vulnerable dependencies in your organzation's repositories" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Managing alerts for vulnerable dependencies in your organization's repositories - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Administering a repository / Managing alerts for vulnerable dependencies in your organization's repositories Managing alerts for vulnerable dependencies in your organization's repositories mac windows linux all Organization owners and repository admins receive security alerts when GitHub detects a vulnerable dependency in an organization repository. You can specify additional organization members or teams to also receive security alerts for vulnerable dependencies. On GitHub, navigate to the main page of the repository. Under your repository name, click Settings. In the left sidebar, click Alerts. Type the name of the person or team you'd like to receive alerts when GitHub detects a vulnerable dependency, then click their username or team name to select it. After you've selected all of the people or teams you'd like to receive alerts, click Save changes. Further reading "About security alerts for vulnerable dependencies" "Viewing and updating vulnerable dependencies in your repository" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support About gists - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Gists / About gists About gists mac windows linux all Gists are a great way to share your work. You can share single files, parts of files, or full applications. You can access gists at https://gist.github.com. Every gist is a Git repository, which means that it can be forked and cloned. The gist editor is powered by CodeMirror. Types of gists There are two types of gists: public gists and secret gists. Additionally, if you are not logged into GitHub when you create your gist, it will be an anonymous gist. For steps on creating gists, see "Creating gists." Public gists Public gists show up in Discover, where people can browse new gists as they're created. They're also searchable, so you can use them if you'd like other people to find and see your work. After creating a gist, you cannot convert it from public to secret, or from secret to public. Secret gists Secret gists don't show up in Discover and are not searchable. Use them to jot down an idea that came to you in a dream, create a to-do list, or prepare some code or prose that's not ready to be shared with the world. After creating a gist, you cannot convert it from public to secret, or from secret to public. Secret gists aren't private. If you send the URL of a secret gist to a friend, they'll be able to see it. However, if someone you don't know discovers the URL, they'll also be able to see your gist. If you need to keep your code away from prying eyes, you may want to create a private repository instead. Anonymous gists If you create a gist without logging into GitHub, it will be an anonymous gist. Anonymous gists can be public or secret. Warning: Anonymous gists cannot be deleted from the web browser. To have an anonymous gist deleted, contact GitHub Support. Please provide the URL of the gist you wish to delete. Discovering and searching for other people's gists You can discover gists others have created by going to the gist home page and clicking All Gists. This will take you to a page of all gists sorted and displayed by time of creation or update. You can also search gists by language with Gist Search. Gist search uses the same search syntax as code search. Forking and cloning gists Since gists are Git repositories, you can view their full commit history, complete with diffs. You can also fork or clone gists. For more information, see "Forking and cloning gists". Downloading gists You can download a ZIP file of a gist by clicking the Download ZIP button at the top of the gist. Embedding gists You can embed a gist in any text field that supports Javascript, such as a blog post. To get the embed code, click the clipboard icon next to the Embed URL of a gist. To embed a specific gist file, append the Embed URL with ?file=FILENAME. Further reading "Creating gists" "Forking and cloning gists" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Creating gists - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Gists / Creating gists Creating gists mac windows linux all You can create two kinds of gists: public and secret. Create a public gist if you're ready to share your ideas with the world or a secret gist if you're not. If you are signed in to GitHub when you create a gist, the gist will be associated with your account and you will see it in your list of gists when you navigate to your gist home page. If you are not signed in to GitHub when you create a public or secret gist, you will create an anonymous gist. Warning: Anonymous gists cannot be deleted from the web browser. To have an anonymous gist deleted, contact GitHub Support. Please provide the URL of the gist you wish to delete. Gist supports mapping GeoJSON files. These maps are displayed in embedded gists, so you can easily share and embed maps. Creating a gist You can also drag and drop a text file from your desktop directly into the gist editor. Sign in to GitHub. Navigate to your gist home page. Type an optional description and name for your gist. Type the text of your gist into the gist text box. Do one of the following: To create a public gist, click Create public gist. To create a secret gist, click Create secret Gist. Note: After creating a gist, you cannot convert it from public to secret, or from secret to public. Further reading "About gists" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Forking and cloning gists - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Gists / Forking and cloning gists Forking and cloning gists mac windows linux all Gists are actually Git repositories, which means that you can fork or clone any gist, even if you aren't the original author. You can also view a gist's full commit history, including diffs. Forking gists Each gist indicates which forks have activity, making it easy to find interesting changes from coworkers or complete strangers. Cloning gists If you want to make local changes to a gist and push them up to the web, you can clone a gist and make commits the same as you would with any Git repository. For more information, see "Cloning a repository." Viewing gist commit history To view a gist's full commit history, click the "Revisions" tab at the top of the gist{. You will see a full commit history for the gist with diffs. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Deleting an anonymous gist - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Gists / Deleting an anonymous gist Deleting an anonymous gist mac windows linux all If you need an anonymous gist deleted, please contact GitHub Support and include the gist's URL. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support About GitHub Wikis - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Wiki / About GitHub Wikis About GitHub Wikis mac windows linux all Just as writing good code and great tests are important, excellent documentation helps others use and extend your project. Every GitHub repository comes equipped with a section for hosting documentation, called a wiki. GitHub Wikis are a place in your repository where you can share long-form content about your project, such as how to use it, how it's been designed, manifestos on its core principles, and so on. Whereas a README is intended to quickly orient readers as to what your project can do, wikis can be used to provide additional documentation. With wikis, you can write content just like everywhere else on GitHub. We use our open-source Markup library to convert different formats into HTML, so you can choose to write in Markdown, RST, Textile, or any other supported format when you craft wiki pages. Wikis can be edited directly on GitHub, or you can work with a text editor offline and simply push your changes. Wikis are collaborative by design. By default, only collaborators on your repository can make changes to wikis, but you can configure this to be enabled for all users on public repositories. Further reading "Adding wiki pages via the online interface" "Adding images to wikis" "Adding links to wikis" "Creating a sidebar" "Creating a footer" "Adding and editing wiki pages locally" "Viewing a wiki's history of changes" "Searching wikis" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Adding wiki pages via the online interface - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Wiki / Adding wiki pages via the online interface Adding wiki pages via the online interface mac windows linux all You can add new wiki pages directly to your repository using our web interface. On GitHub, navigate to the main page of the repository. Under your repository name, click Wiki. From the top menu bar, click New Page. Wiki pages can contain any markup that GitHub supports. The default choice is Markdown, but you can use the "Edit mode" drop-down menu to switch to a different markup language. Use the text editor to add your page's content. You can also use the wiki toolbar at the top for entering text using a graphical WYSIWYG editor. Enter a commit message describing the new file you’re adding. To commit your changes to the wiki, click Save Page. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Editing wiki pages via the online interface - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Wiki / Editing wiki pages via the online interface Editing wiki pages via the online interface mac windows linux all You can use our web interface to directly edit your repository's wiki pages. In the top right corner of GitHub, click your profile photo, then click Your profile. On your profile page, click the Repositories tab, then click the name of your repository. Under your repository name, click Wiki. Using the wiki sidebar, navigate to the page you want to change, and then click Edit. Wiki pages can contain any markup that GitHub supports. The default choice is Markdown, but you can use the "Edit mode" drop-down menu to switch to a different markup language. Use the text editor to type the content you want your page to have. You can also use the wiki toolbar at the top for entering text via a graphical WYSIWYG editor. Enter a commit message describing your changes. To commit your changes to the wiki, click Save Page. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Creating a footer - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Wiki / Creating a footer Creating a footer mac windows linux all Wikis can have footers that contain additional information, such as copyright dates, creative licensing, or information on contributing. On GitHub, navigate to the main page of the repository. Under your repository name, click Wiki. At the bottom of the page, click Add a custom footer. A custom footer can contain any markup that GitHub supports. The default choice is Markdown, but you can use the "Edit mode" drop-down menu to switch to a different markup language. Use the text editor to type the content you want your footer to have. You can also use the wiki toolbar at the top for entering text via a graphical WYSIWYG editor. Enter a commit message describing the footer you’re adding. To commit your changes to the wiki, click Save Page. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Creating a sidebar - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Wiki / Creating a sidebar Creating a sidebar mac windows linux all Every wiki comes with a sidebar that automatically lists every wiki page. You can also create your own custom sidebar for additional navigation. On GitHub, navigate to the main page of the repository. Under your repository name, click Wiki. Click Add a custom sidebar. A custom sidebar can contain any markup that GitHub supports. The default choice is Markdown, but you can use the "Edit mode" drop-down menu to switch to a different markup language. Use the text editor to add your page's content. You can also use the wiki toolbar at the top for entering text via a graphical WYSIWYG editor. Enter a commit message describing the sidebar you’re adding. To commit your changes to the wiki, click Save Page. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Adding and editing wiki pages locally - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Wiki / Adding and editing wiki pages locally Adding and editing wiki pages locally mac windows linux all Because wikis are just Git repositories, you can make changes locally and push them to your repository using a Git workflow. To work with Git, you'll need to be comfortable with our GitHub Desktop or command line tutorials. Cloning wikis locally to your computer Every wiki provides an easy way to clone its contents down to your computer: If you're using GitHub Desktop, click Clone in Desktop to copy the wiki to your computer. Otherwise, you can use the following command with the provided URL to clone the wiki repository to your computer. git clone https://github.com/YOUR_USERNAME/YOUR_REPOSITORY.wiki.git # Clones the wiki locally Once you have cloned the wiki, you can add new files, edit existing ones, and commit your changes. You and your collaborators can create branches when working on wikis, but only changes pushed to the master branch will be made live and available to your readers. Naming wiki files The filename determines the title of your wiki page, and the file extension determines how your wiki content is rendered. Wikis use our open-source Markup library to convert the markup, and it determines which converter to use by a file's extension. For example, if you name a file foo.md or foo.markdown, wiki will use the Markdown converter, while a file named foo.textile will use the Textile converter. Warnings: Don't use the following characters in your wiki page's titles: \ / : * ? " < > |. Users on certain operating systems won't be able to work with filenames containing these characters. Be sure to write your content using a markup language that matches the extension, or your content won't render properly. Creating footers and sidebars locally You can add a custom sidebar or footer to your wiki to provide readers with more contextual information. This is easy to do online, but you can create and edit these elements locally, too. If you create a file named _Footer. or _Sidebar. , we'll use them to populate the footer and sidebar of your wiki, respectively. Note that the underscore and the capitalization in the filename is very important. Like every other wiki page, the extension you choose for these files determines how we render them. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Viewing a wiki's history of changes - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Wiki / Viewing a wiki's history of changes Viewing a wiki's history of changes mac windows linux all Because wikis are Git repositories, every change you make is a commit that you can view. On GitHub, navigate to the main page of the repository. Under your repository name, click Wiki. Using the wiki sidebar, navigate to the page whose history you want to view. At the top of the wiki, click the revision link. The wiki history table provides some useful information about changes made to a particular page: The user who made the change The commit message they provided When the change was made Viewing previous content On the wiki history table, you can click a SHA-1 hash (the sequence of letters and numbers to the far right) to see a wiki page as it existed at a particular point in time. Comparing two revisions Select two rows that you want to compare. At the top of the history table, click Compare Revisions. You'll see a diff of the changes showing which lines were added, removed, and modified. Reverting previous changes Note that you can only revert changes if you have access to edit the wiki. Select a row that you want to revert. At the top of the history table, click Compare Revisions. You'll see a diff of the changes showing which lines were added, removed, and modified. To revert the newer changes, click Revert Changes. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Adding images to wikis - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Wiki / Adding images to wikis Adding images to wikis mac windows linux all Wikis can display PNG, JPEG, or GIF images. On GitHub, navigate to the main page of the repository. Under your repository name, click Wiki. Using the wiki sidebar, navigate to the page you want to change, and then click Edit. On the wiki toolbar, click Image. In the "Insert Image" dialog box, type the image URL and the alt text (which is used by search engines and screen readers). Click OK. Linking to images in a repository You can link to an image in a repository on GitHub by copying the URL in your browser and using that as the path to the image. For example, embedding an image in your wiki using Markdown might look like this: [[https://github.com/username/repository/blob/master/img/octocat.png|alt=octocat]] Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Adding links to wikis - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Wiki / Adding links to wikis Adding links to wikis mac windows linux all You can create links in wikis using the standard markup or MediaWiki syntax. Using regular markup syntax to make links You can use the normal markup syntax supported by your page to create links. For example: If your pages are rendered with Markdown, the link syntax is [Link Text](URL_to_wiki). If your pages are rendered with AsciiDoc, the link syntax is link:URL_to_wiki[Link Text]. Here, URL_to_wiki is the full URL to your wiki page. This creates a link to your wiki page, using the link text as the hyperlink. Using a wiki markup syntax to make links You can also create links with the wiki format of [[Link Text|WikiLink]]. In this case, WikiLink is the name of your wiki page, not the full URL. Please note that support for WikiLinks in Asciidoc has been removed. This link style has the advantage of being colored red if the link is broken. Further reading "Supported MediaWiki formats" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Supported MediaWiki formats - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Wiki / Supported MediaWiki formats Supported MediaWiki formats mac windows linux all Wikis support content that's written just like everywhere else on GitHub. We also support some of the syntax supported by MediaWiki. No matter which markup language your wiki page is written in, certain MediaWiki syntax will always be available to you. For security and performance reasons, some syntaxes are unsupported. Supported MediaWiki syntaxes Links (except Asciidoc) Horizontal rules via --- Shorthand symbol entities (such as &delta; or &euro;) Unsupported MediaWiki syntaxes Transclusion Definition lists Indentation Table of contents Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Changing access permissions for wikis - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Wiki / Changing access permissions for wikis Changing access permissions for wikis mac windows linux all Only repository collaborators can edit a public repository's wiki by default, but you can give anyone with a GitHub account edit permissions. On GitHub, navigate to the main page of the repository. Under your repository name, click Settings. Under Features, unselect Restrict edits to collaborators only. Further reading "Disabling Wikis" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Disabling wikis - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Wiki / Disabling wikis Disabling wikis mac windows linux all You can turn wikis off for your repository if you decide not to use them. On GitHub, navigate to the main page of the repository. Under your repository name, click Settings. Under Features, unselect Wiki. When you turn off a wiki, the content is hidden, but not erased. If you choose to re-enable wikis later, your previous pages will be restored. Further reading "Changing access permissions for wikis" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Getting started with the API - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Automation / Getting started with the API Getting started with the API mac windows linux all If you're looking to automate common tasks, back up your data, or create integrations that extend GitHub, our API has you covered. More information about the API is available in the GitHub Developer documentation. You can also stay current with API-related news by following the GitHub Developer blog. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Git automation with OAuth tokens - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Automation / Git automation with OAuth tokens Git automation with OAuth tokens mac windows linux all You can use OAuth tokens to interact with GitHub via automated scripts. Step 1: Get an OAuth token Create a personal access token on your application settings page. Tips: You must verify your email address before you can create a personal access token. We recommend that you regularly review your authorized integrations. Remove any applications and tokens that haven't been used in a while. Step 2: Clone a repository Once you have a token, you can enter it instead of your password when performing Git operations over HTTPS. For example, on the command line you would enter the following: git clone https://github.com/username/repo.git Username: your_username Password: your_token To avoid these prompts, you can use Git password caching. Warning: Tokens have read/write access and should be treated like passwords. If you enter your token into the clone URL when cloning or adding a remote, Git writes it to your .git/config file in plain text, which is a security risk. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support About Webhooks - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Automation / About Webhooks About Webhooks mac windows linux all Webhooks provide a way for notifications to be delivered to an external web server whenever certain actions occur on a repository or organization. Tip: Only members with owner privileges for an organization or admin privileges for a repository can manage webhooks for an organization. For more information, see "Permission levels for an organization." Webhooks can be triggered whenever a variety of actions are performed on a repository or an organization. For example, you can configure a webhook to execute whenever: A repository is pushed to A pull request is opened A GitHub Pages site is built A new member is added to a team Using the GitHub API, you can make these webhooks update an external issue tracker, trigger CI builds, update a backup mirror, or even deploy to your production server. You'll need access to an external server and a familiarity with technical procedures in order to set up a new webhook. For help on building a webhook, including a full list of actions you can associate with, see "Webhooks" in the GitHub Developer documentation. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Exploring integrations - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Customizing your GitHub workflow / Exploring integrations Exploring integrations mac windows linux all You can customize and extend your GitHub workflow with tools and services built by the GitHub community. About integrations Integrations are tools and services that connect with GitHub to complement and extend your workflow. About GitHub Marketplace GitHub Marketplace contains tools and services that complement and improve your workflow. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support About integrations - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Customizing your GitHub workflow / About integrations About integrations mac windows linux all Integrations are tools and services that connect with GitHub to complement and extend your workflow. Integrations can be GitHub Apps, OAuth Apps, or anything that utilizes GitHub APIs or webhooks. For more information, see "About integrations" in the GitHub Developer documentation. You can find an integration to install or publish your own integration in GitHub Marketplace and Works with GitHub. GitHub Marketplace contains GitHub Apps and OAuth Apps. For more information on finding an integration or creating your own integration, see "About GitHub Marketplace." You can find other types of approved integrations on Works with GitHub. Note: You can also submit an integration for inclusion on Works with GitHub. For more information, see "Adding integrations to Works with GitHub" in the GitHub Developer documentation. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support About GitHub Marketplace - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Customizing your GitHub workflow / About GitHub Marketplace About GitHub Marketplace mac windows linux all GitHub Marketplace contains tools and services that complement and improve your workflow. You can discover, browse, and install free and paid GitHub App and OAuth Apps in GitHub Marketplace. If you purchase a paid app, you'll pay for your app subscription with the same billing information you use to pay for your GitHub subscription, and receive one bill on your regular billing date. For more information, see "About billing for GitHub Marketplace." You may also have the option to select a free 14-day trial on select apps. You can cancel at any time during your trial and you won't be charged, but you will automatically lose access to the app. Your paid subscription will start at the end of the 14-day trial. For more information, see "About billing for GitHub Marketplace." Building and listing an app on GitHub Marketplace For more information on creating your own GitHub App or OAuth App to list on GitHub Marketplace, see "Apps" in the GitHub Developer documentation. Further reading "Purchasing and installing apps in GitHub Marketplace" "Managing your personal account's apps" "Managing your organization's apps" "GitHub Marketplace support" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Purchasing and installing apps in GitHub Marketplace - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Customizing your GitHub workflow / Purchasing and installing apps in GitHub Marketplace Purchasing and installing apps in GitHub Marketplace mac windows linux all GitHub Marketplace includes apps with free and paid pricing plans. When you find a paid app you'd like to use for your personal account or organization, you can purchase and install the app using your existing billing information. About billing for GitHub Marketplace If you install a paid app in GitHub Marketplace, your subscription shares your account's existing billing date, payment method, and receipt. Installing an app in your personal account You can install apps from GitHub Marketplace to use in your personal account. Installing an app in your organization You can install apps from GitHub Marketplace to use in your organization. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support About billing for GitHub Marketplace - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Customizing your GitHub workflow / About billing for GitHub Marketplace About billing for GitHub Marketplace mac windows linux all If you install a paid app in GitHub Marketplace, your subscription shares your account's existing billing date, payment method, and receipt. Tip: Only owners can purchase, install, or cancel apps and manage app billing for an organization. GitHub Marketplace includes apps with free and paid pricing plans. After you purchase and install an app, you can upgrade, downgrade, or cancel at any time. To cancel a free trial, see "Canceling a free trial for an app for your personal account" and "Canceling a free trial for an app for you organization". Payment methods and billing cycles for GitHub Marketplace purchases You will have the same payment method for all paid plans and subscriptions across GitHub. If your personal account or organization doesn't have a payment method on file, when you choose a paid plan for an app: Your billing date is today. You must add a payment method to your personal account or the organization in which you want to install the app. Your payment method is charged the full amount of your subscription. Your receipt is sent to the primary or billing email address on file for your personal account or organization. If your personal account or organization has an existing payment method, when you choose a paid plan for an app: The payment method on file is immediately charged a prorated amount based on the time remaining until your next billing date. The monthly or yearly billing date for your app subscription is the same as the account or organization's regular billing date. On your next billing date, your receipt lists charges for your paid GitHub plan and your app subscription. When you choose a paid plan with a free trial: You must have an existing payment method or add a new payment method for your personal account or the organization in which you want to install the app. If you don't have any other paid plans or subscriptions, you are charged the full amount of your subscription at the end of the 14-day free trial. If you have other paid plans or subscriptions, once your 14-day free trial ends, the payment method on file is immediately charged a prorated amount based on the time remaining until your next billing date. If you have other paid plans or subscriptions, on your next billing date, your receipt lists charges for your paid GitHub plan and your app subscription. Unit plan limits If you choose a unit plan (for example, a plan that charges per user), and you exceed the units that you're paying for, the integrator may disable your access until you upgrade the app. For more information, see "Upgrading an app for your personal account" and "Upgrading an app for your organization." Downgrades If you downgrade your app subscription to a less expensive plan or to free, or if you cancel your app subscription, your changes will take effect at the end your current billing cycle. Your subscription will be moved to your new plan on your next billing date. Canceling an app or downgrading an app to free does not affect your other paid subcriptions on GitHub. If you want to cease all of your paid subscriptions on GitHub, you must downgrade each paid subscription separately. If you cancel a free trial on a paid plan, your subscription is immediately canceled and you will lose access to the app. For more information, see "Canceling a free trial for an app for your personal account" and "Canceling a free trial for an app for you organization". Further reading "About GitHub Marketplace" "Purchasing and installing apps in GitHub Marketplace" "Managing your personal account's apps" "Managing your organization's apps" "GitHub Marketplace support" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Installing an app in your personal account - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Customizing your GitHub workflow / Installing an app in your personal account Installing an app in your personal account mac windows linux all You can install apps from GitHub Marketplace to use in your personal account. If you choose a paid plan, you'll pay for your app subscription on your personal account's current billing date using your existing payment method. If you choose a paid plan with a free trial, you can cancel at any time during your trial period without being charged, but you will automatically lose access to the app. Your paid subscription will start at the end of the 14-day trial. For more information, see "About billing for GitHub Marketplace." Installing a GitHub App in your personal account At the top of any page, click Marketplace. Browse to the app you'd like to install, then click on the app's name. On the app's page, under "Pricing and setup," click on the pricing plan you'd like to use. Click Install it for free, Buy with GitHub, or Try free for 14 days. Under "Billing information," confirm that you're installing the app for your personal account. If you chose a paid plan and there isn't a payment method on file for your personal account, click Add a Payment Method, then complete the form to add a credit card or PayPal account. After you successfully add a payment method, you will automatically return to the order page. Click Complete order and begin installation. Decide whether to give the app access to all of your repositories, or to certain repositories, then select All repositories or Only select repositories. If you chose to give the app access to limited repositories instead of all of your repositories, type the name of each repository you'd like to give the app access to, then click on the repository name to select it. Review the app's access permissions for your selected repositories, then click Install. Installing an OAuth App in your personal account At the top of any page, click Marketplace. Browse to the app you'd like to install, then click on the app's name. On the app's page, under "Pricing and setup," click on the pricing plan you'd like to use. Click Install it for free, Buy with GitHub, or Try free for 14 days. Under "Billing information," confirm that you're installing the app for your personal account. If you chose a paid plan and there isn't a payment method on file for your personal account, click Add a Payment Method, then complete the form to add a credit card or PayPal account. After you successfully add a payment method, you will automatically return to the order page. Click Complete order and begin installation. Review the information about the app's access to your personal account and data, then click Authorize application. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Installing an app in your organization - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Customizing your GitHub workflow / Installing an app in your organization Installing an app in your organization mac windows linux all You can install apps from GitHub Marketplace to use in your organization. Tip: Only owners can purchase, install, or cancel apps and manage app billing for an organization. If you choose a paid plan, you'll pay for your app subscription on your organization's current billing date using your organization's existing payment method. If you choose a paid plan with a free trial, you can cancel at any time during your trial period without being charged, but you will automatically lose access to the app. Your paid subscription will start at the end of the 14-day trial. For more information, see "About billing for GitHub Marketplace." Installing a GitHub App in your organization At the top of any page, click Marketplace. Browse to the app you'd like to install, then click on the app's name. On the app's page, under "Pricing and setup," click on the pricing plan you'd like to use. Click Install it for free, Buy with GitHub, or Try free for 14 days. Under "Billing information," use the Switch billing account drop-down menu, and choose the organization in which you'd like to install the app. If you chose a paid plan and there isn't a payment method on file for the organization, click Add a Payment Method, then complete the form to add a credit card or PayPal account. After you successfully add a payment method, you will automatically return to the order page. Click Complete order and begin installation. Decide whether to give the app access to all of your repositories, or to certain repositories, then select All repositories or Only select repositories. If you chose to give the app access to limited repositories instead of all of your repositories, type the name of each repository you'd like to give the app access to, then click on the repository name to select it. Review the app's access permissions for your selected repositories, then click Install. Installing an OAuth App in your organization At the top of any page, click Marketplace. Browse to the app you'd like to install, then click on the app's name. On the app's page, under "Pricing and setup," click on the pricing plan you'd like to use. Click Install it for free, Buy with GitHub, or Try free for 14 days. Under "Billing information," use the Switch billing account drop-down menu, and choose the organization in which you'd like to install the app. If you chose a paid plan and there isn't a payment method on file for the organization, click Add a Payment Method, then complete the form to add a credit card or PayPal account. After you successfully add a payment method, you will automatically return to the order page. Click Complete order and begin installation. Review the information about the app's access to your personal account, organizations, and data, then click Authorize application. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support What is GitHub Pages? - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub GitHub Pages Basics / What is GitHub Pages? What is GitHub Pages? mac windows linux all GitHub Pages is a static site hosting service. GitHub Pages is designed to host your personal, organization, or project pages directly from a GitHub repository. To learn more about the different types of GitHub Pages sites, see "User, organization, and project pages." You can create and publish GitHub Pages online using the Jekyll Theme Chooser. If you prefer to work locally, you can use GitHub Desktop or the command line. GitHub Pages is a static site hosting service and doesn't support server-side code such as, PHP, Ruby, or Python. Guidelines for using GitHub Pages GitHub Pages sites created after June 15, 2016 and using github.io domains are served over HTTPS. If you created your site before June 15, 2016, you can enable HTTPS support for traffic to your site. GitHub Pages sites shouldn't be used for sensitive transactions like sending passwords or credit card numbers. Your use of GitHub Pages is subject to the GitHub Terms of Service, including the prohibition on reselling. Warning: GitHub Pages sites are publicly available on the internet, even if their repositories are private. If you have sensitive data in your Page repository, you may want to remove it before publishing. Usage limits GitHub Pages sites are subject to the following usage limits: GitHub Pages source repositories have a recommended limit of 1GB . Published GitHub Pages sites may be no larger than 1 GB. GitHub Pages sites have a soft bandwidth limit of 100GB per month. GitHub Pages sites have a soft limit of 10 builds per hour. If your site exceeds these usage quotas, we may not be able to serve your site, or you may receive a polite email from GitHub Support suggesting strategies for reducing your site's impact on our servers, including putting a third-party content distribution network (CDN) in front of your site, making use of other GitHub features, such as releases, or moving to a different hosting service that might better fit your needs. Additionally, GitHub Pages sites must refrain from: Content or activity that is illegal or otherwise prohibited by our Terms of Service or Community Guidelines Violent or threatening content or activity Excessive automated bulk activity (for example, spamming) Activity that compromises GitHub users or GitHub services Get-rich-quick schemes Sexually obscene content Content that misrepresents your identity or site purpose If you have questions about whether your use or intended use falls into these categories, please contact GitHub Support. Further reading "GitHub Pages basics" Beyond GitHub Pages basics GitHub Pages tutorial Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Configuring a publishing source for GitHub Pages - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub GitHub Pages Basics / Configuring a publishing source for GitHub Pages Configuring a publishing source for GitHub Pages mac windows linux all You can configure GitHub Pages to publish your site's source files from master, gh-pages, or a /docs folder on your master branch for Project Pages and other Pages sites that meet certain criteria. If your site is a User or Organization Page that has a repository named <username>.github.io or <orgname>.github.io, you cannot publish your site's source files from different locations. User and Organization Pages that have this type of repository name are only published from the master branch. For more information about the different types of GitHub Pages sites, see "User, Organization, and Project Pages." Default source settings for repositories without the username naming scheme The default settings for publishing your site's source files depend on your site type and the branches you have in your site repository. If your site repository doesn't have a master or gh-pages branch, your GitHub Pages publishing source is set to None and your site is not published. After you've created either a master or gh-pages branch, you can set one as your publishing source so that your site will be published. If you fork or upload your site repository with only a master or gh-pages branch, your site's source setting will automatically be enabled for that branch. Enabling GitHub Pages to publish your site from master or gh-pages To select master or gh-pages as your publishing source, you must have the branch present in your repository. If you don't have a master or gh-pages branch, you can create them and then return to source settings to change your publishing source. On GitHub, navigate to your GitHub Pages site's repository. Under your repository name, click Settings. Use the Select source drop-down menu to select master or gh-pages as your GitHub Pages publishing source. Click Save. Publishing your GitHub Pages site from a /docs folder on your master branch To publish your site's source files from a /docs folder on your master branch, you must have a master branch and your repository must: have a /docs folder in the root of the repository not follow the repository naming scheme <username>.github.io or <orgname>.github.io GitHub Pages will read everything to publish your site, including the CNAME file, from the /docs folder. For example, when you edit your custom domain through the GitHub Pages settings, the custom domain will write to /docs/CNAME. Tip: If you remove the /docs folder from the master branch after it's enabled, your site won't build and you'll get a page build error message for a missing /docs folder. On GitHub, navigate to your GitHub Pages site's repository. Create a folder in the root of your repository on the master branch called /docs. Under your repository name, click Settings. Use the Select source drop-down menu to select master branch /docs folder as your GitHub Pages publishing source. Tip: The master branch /docs folder source setting will not appear as an option if the /docs folder doesn't exist on the master branch. Click Save. Further Reading Viewing branches in your repository Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support User, Organization, and Project Pages - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub GitHub Pages Basics / User, Organization, and Project Pages User, Organization, and Project Pages mac windows linux all There are two basic types of GitHub Pages: User/Organization Pages and Project Pages. They are nearly identical, but there are a few important differences between them. GitHub Pages created after June 15, 2016 and using github.io domains are served over HTTPS. For more information, see "Securing your GitHub Pages site with HTTPS." Tip: GitHub Pages sites shouldn't be used for sensitive transactions like sending passwords or credit card numbers. Note that Pages are always publicly accessible when published, even if their repository is private. Type of GitHub Pages site Pages default domain & host location on GitHub Location of the source files for building your Pages site User Pages site username.github.io master Organization Pages site orgname.github.io master Project Pages site owned by a user account username.github.io/projectname master, gh-pages, or a /docs folder on master Project Pages site owned by an organization orgname.github.io/projectname master, gh-pages, or a /docs folder on master To learn how custom domains for GitHub Pages sites redirect, see this custom domain redirects chart. User & Organization Pages User & Organization Pages live in a special repository dedicated to GitHub Pages files. You will need to name this repository with the account name. You must use the username.github.io naming scheme. Content from the master branch will be used to build and publish your GitHub Pages site. You can only use your own account name for a User or Organization Page repository. A repository like joe/bob.github.io will not build a User Pages site. When User Pages are built, they are available at http(s)://<username>.github.io. Building your User & Organization Pages User Pages can be built by any user account with a verified email address. They can also use deploy keys to automate the process. Organization Pages can be built by any member with push access to the repository and a verified email address. To automate builds, you can set up a machine user as a member of your organization. Deploy keys aren't supported for Organization Pages. Project Pages Unlike User and Organization Pages, Project Pages are kept in the same repository as their project. Both personal accounts and organizations can create Project Pages. The URL for a personal account's Project Page will be 'http(s)://<username>.github.io/<projectname>' , while an organization's URL will be 'http(s)://<orgname>.github.io/<projectname>' . The steps for creating Project Pages are the same for both. Project Pages are similar to User and Organization Pages, with a few slight differences: You can build and publish Project Pages sites from the master or gh-pages branch. You can also publish your site from a /docs folder on your master branch. For more information, see "Configuring a publishing source for GitHub Pages." If you are not using a custom domain, the Project Pages sites are served under a subpath of the User Pages site: username.github.io/projectname If you are using a custom domain on User and Organization Pages sites, the custom domain will replace username.github.io in the URL for all Project Pages sites hosted under that account. Project Pages sites that use a custom domain are also available at username.github.io/projectname for personal accounts, and orgname.github.io/projectname for organizations. Custom 404s will only work if a custom domain is used. Otherwise, the User Page 404 is used. Warning: If the URL for your Pages site contains a username or organization name that begins or ends in a dash, or contains consecutive dashes, then people browsing with Linux will receive a server error when they visit the site. To fix this, change your GitHub username to remove non-alphanumeric characters. For instructions on how to do this, see "Changing your GitHub username." Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Creating Project Pages using the command line - User Documentation <meta name="Description" content=" If you're familiar with command-line Git, it's straightforward to manually create a Project Pages site. Make a fresh clone To set up a Project Pages site, you need to create a new \"orphan\" branch …"> GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub GitHub Pages Basics / Creating Project Pages using the command line Creating Project Pages using the command line mac windows linux all If you're familiar with command-line Git, it's straightforward to manually create a Project Pages site. Make a fresh clone To set up a Project Pages site, you need to create a new "orphan" branch (a branch that has no common history with an existing branch) in your repository. The safest way to do this is to start with a fresh clone: git clone https://github.com/user/repository.git # Clone our repository Cloning into 'repository'... remote: Counting objects: 2791, done. remote: Compressing objects: 100% (1225/1225), done. remote: Total 2791 (delta 1722), reused 2513 (delta 1493) Receiving objects: 100% (2791/2791), 3.77 MiB | 969 KiB/s, done. Resolving deltas: 100% (1722/1722), done. Create a master branch Once you have a clean repository, you'll need to create a new master branch unless your cloned repository already has a master branch. Tip: You can also create a gh-pages branch for your Project Pages site instead. To learn more about your options, including the option to publish your Project Page from a /docs folder on your master branch, see "User, Organization, and Project Pages." Switch directories into your new cloned repository: cd repository Check if your repository already has a master branch: git branch # shows a list of branches for your repository * branch-name * branch-name If you don't already have a master branch in your repository, create a new master branch: git checkout --orphan master # Creates a master branch, without any parents (it's an orphan!) Switched to a new branch 'master' Tip: If you just created the master branch, it won't appear in your list of branches when you use the git branch command until you make your first commit. Remove all files to create an empty working directory Once you have a master branch, you'll need to remove all content from the working directory and index: git rm -rf . # Remove all files from the old working tree rm '.gitignore' Add content and push In order to trigger a build when you push to your Page's repository, you must first verify your email address. Now you have an empty working directory. You can create some content in this branch and push it to GitHub. For example: echo "My Page" > index.html git add index.html git commit -a -m "First pages commit" git push origin master Your GitHub Pages site should now be available. You'll receive an email if your build is unsuccessful. Load your new GitHub Pages site After your push to the master branch, your Project Pages site will be available at 'http(s)://<username>.github.io/<projectname>' . Note that Pages are always publicly accessible when published, even if their repository is private. To set up a custom domain for GitHub Pages sites, see "Setting up a custom domain with GitHub Pages." Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Securing your GitHub Pages site with HTTPS - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub GitHub Pages Basics / Securing your GitHub Pages site with HTTPS Securing your GitHub Pages site with HTTPS mac windows linux all You can enforce HTTPS to add a layer of encryption for traffic to your GitHub Pages site if it has a github.io domain. With HTTPS enforcement enabled, HTTP requests to your GitHub Pages site will be transparently redirected to HTTPS. HTTPS enforcement is required for GitHub Pages sites created after June 15, 2016 and using a github.io domain. If you created your GitHub Pages site before June 15, 2016, you can manually enable HTTPS enforcement. HTTPS is not supported for GitHub Pages using custom domains. Tip: GitHub Pages sites shouldn't be used for sensitive transactions like sending passwords or credit card numbers. On GitHub, navigate to the main page of the repository. Under your repository name, click Settings. Under "GitHub Pages", select Enforce HTTPS. Resolving problems with mixed content If you enable HTTPS for your site, and your site's HTML still references images, CSS, or JavaScript over HTTP, then your site is serving mixed content, and you may have trouble loading assets. Serving mixed content also makes your site less secure. To remove your site's mixed content, improve your site's security, and resolve problems related to loading mixed content, edit your site's HTML files and change http:// to https:// so that all of your assets are served over HTTPS. For GitHub Pages sites that use Jekyll, your HTML files will most likely be stored in the _layouts folder. In general, CSS is found in the <head> section of your HTML file. JavaScript is usually in the <head> section or just before the closing </body> tag. Images are often in the <body> section. Tip: If you can't find where your assets are found in your site, try searching your site's code for http in your text editor or on GitHub. Examples of how assets may be referenced in an HTML file Asset type HTTP HTTPS CSS <link rel="stylesheet" href="http://example.com/css/main.css"> <link rel="stylesheet" href="https://example.com/css/main.css"> JavaScript <script type="text/javascript" src="http://example.com/js/main.js"></script> <script type="text/javascript" src="https://example.com/js/main.js"></script> Image <A HREF="http://www.somesite.com"><IMG SRC="http://www.example.com/logo.jpg" alt="Logo"></a> <A HREF="https://www.somesite.com"><IMG SRC="https://www.example.com/logo.jpg" alt="Logo"></a> Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Unpublishing a Project Pages site - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub GitHub Pages Basics / Unpublishing a Project Pages site Unpublishing a Project Pages site mac windows linux all You may wish to unpublish your GitHub Project Pages site if your project is no longer being maintained. To unpublish your GitHub Project Pages site, delete the gh-pages branch in your project's repository. For more information, see "Creating and deleting branches within your repository." To unpublish a User Pages site instead, see "Unpublishing a User Pages site." Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Unpublishing a User Pages site - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub GitHub Pages Basics / Unpublishing a User Pages site Unpublishing a User Pages site mac windows linux all You may want to unpublish your GitHub User Pages site if the content is no longer relevant or you no longer want it to be publicly available. To unpublish your User Pages site, delete the master branch or delete your username.github.io repository. For more information, see "Deleting unused branches." To unpublish a Project Pages site instead, see "Unpublishing a Project Pages site." Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Further reading on GitHub Pages - User Documentation <meta name="Description" content="See \"Customizing GitHub Pages\" for more information on using approved Jekyll plugins with GitHub Pages sites, creating custom 404 pages, and viewing available repository metadata. See \"Troubleshooti…"> GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub GitHub Pages Basics / Further reading on GitHub Pages Further reading on GitHub Pages mac windows linux all See "Customizing GitHub Pages" for more information on using approved Jekyll plugins with GitHub Pages sites, creating custom 404 pages, and viewing available repository metadata. See "Troubleshooting GitHub Pages builds" and "Troubleshooting custom domains" for further help. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Using Jekyll as a static site generator with GitHub Pages - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Customizing GitHub Pages / Using Jekyll as a static site generator with GitHub Pages Using Jekyll as a static site generator with GitHub Pages mac windows linux all If you use Jekyll as a static site generator with GitHub Pages, you benefit from more support with setting up, updating, and troubleshooting your site. About GitHub Pages and Jekyll In addition to supporting regular HTML content, GitHub Pages supports Jekyll, a popular static site generator. About Jekyll themes on GitHub You can install a Jekyll theme to customize the design of your GitHub Pages site without having to edit or copy CSS files. Jekyll themes package the files you need to change your site design, including any files that are stored in your assets folder, like SCSS, SASS, images, and CoffeeScript. Adding a Jekyll theme to your GitHub Pages site You can add a Jekyll theme to your GitHub Pages site by editing your site's _config.yml file. Adding a Jekyll theme to your GitHub Pages site with the Jekyll Theme Chooser You can use the Jekyll Theme Chooser to create a GitHub Pages site, or to change the theme of your existing GitHub Pages site. Customizing CSS and HTML in your Jekyll theme You can personalize your GitHub Pages site by adding custom styles to your Jekyll theme and changing your theme's layout. Setting up your GitHub Pages site locally with Jekyll You can set up a local version of your Jekyll GitHub Pages site to test changes to your site locally. We highly recommend installing Jekyll to preview your site and help troubleshoot failed Jekyll builds. Configuring Jekyll You can configure most Jekyll settings by editing your _config.yml file. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support About GitHub Pages and Jekyll - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Customizing GitHub Pages / About GitHub Pages and Jekyll About GitHub Pages and Jekyll mac windows linux all In addition to supporting regular HTML content, GitHub Pages supports Jekyll, a popular static site generator. GitHub Pages is deeply integrated with Jekyll, a popular static site generator designed for blogging and software documentation, but used for much more. Jekyll makes it easy to create site-wide headers and footers without having to copy them across every page. It also offers advanced templating features, the option to quickly create a new Jekyll site with the Jekyll Theme Chooser, and Jekyll theme support. Although GitHub Pages was designed to work with any static site generator, using Jekyll offers a lot of built-in support and is the only static site generator GitHub officially documents in detail. For more information on how you can use GitHub Pages with another static site generator, see "Using a static site generator other than Jekyll." The main advantages of Jekyll are: You can use Markdown instead of HTML. Markdown is simpler to read and write. You can add a Jekyll theme to your site without copying CSS files. You can quickly create a new site using the Jekyll Theme Chooser. You can use common templates, such as headers and footers, that are shared across files. You can use a simplified build process to build your site with GitHub Pages. Jekyll's build process Jekyll's simplified build process with GitHub Pages is one of the biggest advantages of using Jekyll instead of other static site generators. GitHub Pages manages your site's build process with a single push to your site's publishing branch. This is Jekyll's build process for managing your site: Push file changes to your pages publishing branch GitHub Pages publishes your site. Note: The publishing branch you use depends on the type of GitHub Pages site you have. For User or Organization pages, use the master branch. For Project pages, use the gh-pages or master branch. Alternatively, you can also publish your site from a /docs folder on the master branch. For more information, see "Configuring a publishing source for GitHub Pages." Jekyll site examples Jekyll is the most commonly used static site generator for GitHub Pages. We recommend using Jekyll if you want the built-in support it offers, including the GitHub Pages gem to manage dependencies, specific build failure messages, and more specific help with troubleshooting. These GitHub showcases include examples of Jekyll sites: Projects using GitHub Pages Open source organizations using GitHub Pages Further Reading To learn more about Jekyll, see Jekyll's official documentation. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support About Jekyll themes on GitHub - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Customizing GitHub Pages / About Jekyll themes on GitHub About Jekyll themes on GitHub mac windows linux all You can install a Jekyll theme to customize the design of your GitHub Pages site without having to edit or copy CSS files. Jekyll themes package the files you need to change your site design, including any files that are stored in your assets folder, like SCSS, SASS, images, and CoffeeScript. You can add a Jekyll theme to your GitHub Pages site by manually editing your site's _config.yml file or by using the Jekyll Theme Chooser. When you manually edit your site's _config.yml file to add a Jekyll theme to your GitHub Pages site, you can choose any of the officially supported themes, or any open source Jekyll theme hosted on GitHub. For more information, see "Adding a Jekyll theme to your GitHub Pages site." When you use the Jekyll Theme Chooser to add a theme to your GitHub Pages site, or to change your theme, you can choose one of the supported themes. For more information, see "Adding a Jekyll theme to your GitHub Pages site with the Jekyll Theme Chooser." By default, the Jekyll Theme Chooser uses the master branch to publish GitHub Pages sites. It also uses a default URL based on the name of the repository where your site exists, such as username.github.io or username.github.io/repository-project-name. For more information about naming GitHub Pages repositories, see "User, Organization, and Project Pages." Further reading Jekyll's official documentation on Themes "Adding a Jekyll theme to your GitHub Pages site" "Adding a Jekyll theme to your GitHub Pages site with the Jekyll Theme Chooser" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Adding a Jekyll theme to your GitHub Pages site - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Customizing GitHub Pages / Adding a Jekyll theme to your GitHub Pages site Adding a Jekyll theme to your GitHub Pages site mac windows linux all You can add a Jekyll theme to your GitHub Pages site by editing your site's _config.yml file. GitHub Pages supports the officially supported Jekyll themes, as well as all open source Jekyll themes hosted on GitHub. You can also add supported Jekyll themes to your GitHub Pages sites using the Jekyll Theme Chooser. For more information, see "About Jekyll themes on GitHub." You can override a Jekyll theme's defaults with your site's content in these folders: _layouts _includes _sass assets For more information about the Jekyll theme files you can override, see your theme's README or other documentation in your theme's source repository. Adding a Jekyll theme in your site's _config.yml file On GitHub, navigate to the main page of the repository. In your repository, browse to _config.yml. In the upper-right corner of the file view, click to open the file editor. Activate the theme by adding a new line to your _config.yml with the theme name: To activate one of the officially supported themes, type theme: followed by the name of the theme (as shown in the README in the theme's source repository). To activate any other open source Jekyll theme hosted on GitHub, type remote_theme: followed by the name of the theme (as shown in the README or other documentation in the theme's source repository). At the bottom of the page, type a short, meaningful commit message that describes the change you made to the file. Below the commit message fields, decide whether to add your commit to the current branch or to a new branch. If your current branch is master, you should choose to create a new branch for your commit and then create a pull request. Click Propose file change. If you created a pull request, merge your pull request into your GitHub Pages publishing branch, which is usually master and sometimes gh-pages. Your site should now publish with the new theme you added. Previewing your Jekyll theme locally After adding a Jekyll theme in your site's _config.yml file on GitHub, you can preview the theme locally by following the steps detailed in the sections below. Before attempting to preview your Jekyll theme locally, ensure the following: You have a local copy of your remote GitHub Pages site repository on your computer. If you don't have a local copy of your site repository, see "Cloning a repository." If you don't have a remote GitHub Pages site repository on GitHub yet you can use someone else's open source site repository as a starting template and fork it. You have Bundler installed. Adding your theme as a Gem to your Gemfile Note: If you're using the web-only interface to edit, you don't need to add your theme to the site's Gemfile, if one exists. On GitHub, navigate to the main page of the repository. In your repository, browse to Gemfile. In the upper-right corner of the file view, click to open the file editor. Add a new line to your Gemfile with the theme name in quotations: Tip: You can add multiple Jekyll themes to your Gemfile but to activiate a theme, only one theme can be added to your _config.yml file. At the bottom of the page, type a short, meaningful commit message that describes the change you made to the file. Below the commit message fields, decide whether to add your commit to the current branch or to a new branch. If your current branch is master, you should choose to create a new branch for your commit and then create a pull request. Click Propose file change. If you created a pull request, merge your pull request into your GitHub Pages publishing branch, which is usually master and sometimes gh-pages. For more information on which branch to publish your site with, see "User, Organization, and Project Pages." Installing your theme using Bundler Open TerminalTerminalGit Bash. Navigate into your local GitHub Pages site repository: cd my-pages-site-repository Load your changes from your remote site repository on GitHub to your local site repository: git pull Tip: For more information on using git pull, see "Fetching a remote." Install your Jekyll theme Gem using Bundler: bundle install Fetching gem metadata from https://rubygems.org/............ Fetching version metadata from https://rubygems.org/... Fetching dependency metadata from https://rubygems.org/.. Resolving dependencies... . . . Installing minima 1.0.1 Using bundler 1.10.6 Bundle complete! 2 Gemfile dependencies, 54 gems now installed. Use `bundle show [gemname]` to see where a bundled gem is installed. Push your changes up to your remote GitHub Pages site repository on GitHub, replacing master in the example below with gh-pages if you use a gh-pages branch to publish your site: git push origin master Adding a Jekyll theme on the command line Open TerminalTerminalGit Bash. Navigate into your local site repository: cd my-pages-site-repository To add a theme to your site's Gemfile, open your favorite text editor, such as Atom, and add this line to your Gemfile using your selected theme's name in quotations: gem "minima" # Minima is a default theme for Jekyll sites. Tip: You can add multiple Jekyll themes to your Gemfile but only one of these themes can be added to your _config.yml file to activate your theme. Install your Jekyll theme Gem using Bundler: bundle install Fetching gem metadata from https://rubygems.org/............ Fetching version metadata from https://rubygems.org/... Fetching dependency metadata from https://rubygems.org/.. Resolving dependencies... . . . Installing minima 1.0.1 Using bundler 1.10.6 Bundle complete! 2 Gemfile dependencies, 54 gems now installed. Use `bundle show [gemname]` to see where a bundled gem is installed. To activate your theme, using your favorite text editor, add a new line to your site's _config.yml file with your theme's name: theme: minima Add and commit your changes using Git: git commit -a # Adds your changes git commit -m "added theme to Gemfile & _config.yml" # Commits your changes with a commit message Push your changes up to your remote GitHub Pages site repository, replacing master in the example below with gh-pages if you use a gh-pages branch to publish your site:: git push origin master Your site should now publish with the new theme you added. Further reading Jekyll's official documentation on Themes "About Jekyll themes on GitHub" "Adding a Jekyll theme to your GitHub Pages site with the Jekyll Theme Chooser" "Customizing CSS and HTML in your Jekyll theme" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Adding a Jekyll theme to your GitHub Pages site with the Jekyll Theme Chooser - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Customizing GitHub Pages / Adding a Jekyll theme to your GitHub Pages site with the Jekyll Theme Chooser Adding a Jekyll theme to your GitHub Pages site with the Jekyll Theme Chooser mac windows linux all You can use the Jekyll Theme Chooser to create a GitHub Pages site, or to change the theme of your existing GitHub Pages site. You can also add a Jekyll theme to your GitHub Pages site manually, by editing your site's _config.yml file. For more information, see "About Jekyll themes on GitHub." If you don't already have a repository for your GitHub Pages site, create a new repository with a README. Your new repository can be public or private. If your repository is private, your published site will still be public. Tip: To create a User or Organization GitHub Pages site, you must name your repository username.github.io, using the name of the user or organization that owns the repository. If you choose a different repository name, then the Jekyll Theme Chooser automatically creates a Project Pages site for you. For more information, see "User, Organization and Project Pages." Navigate to your GitHub Pages site's repository. Under your repository name, click Settings. On the settings page, scroll down and under "GitHub Pages": Click Choose a theme to add a theme to your site for the first time. Click Change theme to change an existing theme for your site. On the theme selection page, review your theme options. To choose a theme, click the theme you want and then click Select theme. If you're creating a new GitHub Pages site, you'll be prompted to edit your site's README.md file. Click Cancel to edit it later. If you'd like to edit it now, see "Editing files in your repository" and commit your changes to the master branch. Under your repository name, click Settings. To preview your site, under "GitHub Pages" click the URL to your GitHub Pages site. For troubleshooting help, see "Troubleshooting GitHub Pages builds." Further customizing your Jekyll site If you'd like to change the CSS or HTML layout of your Jekyll theme, see "Customizing CSS and HTML in your Jekyll theme." Adding more pages to your site To learn more about adding other pages or posts to your GitHub Pages site, see Jekyll's official documentation on creating pages or posts. Other pages or posts you add to your site will share your Jekyll theme's style and layout. Customizing your site's URL To learn more about customizing your site's URL, see "Using a custom domain with GitHub Pages." Choosing a different publishing source or branch If you would like to publish your GitHub Pages site using the gh-pages branch or from a docs folder in your repository, see "Configuring a publishing source for GitHub Pages." Further reading "About Jekyll themes on GitHub" Jekyll's official documentation on Themes "Customizing GitHub Pages" "Customizing CSS and HTML in your Jekyll theme" "Editing files in your repository" "Adding a Jekyll theme to your GitHub Pages site" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Customizing CSS and HTML in your Jekyll theme - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Customizing GitHub Pages / Customizing CSS and HTML in your Jekyll theme Customizing CSS and HTML in your Jekyll theme mac windows linux all You can personalize your GitHub Pages site by adding custom styles to your Jekyll theme and changing your theme's layout. We recommend installing Jekyll to test your changes locally before publishing them. Your changes are published on your site after they're merged into your site's publishing branch. For more information, see "Jekyll's build process." Your Jekyll theme's source repository may also offer some help in customizing your theme. For an example, see the Jekyll theme Minima's README. These instructions are optimized to work best with Jekyll themes that are officially supported by GitHub Pages. For a complete list, see "Supported themes." Customizing your Jekyll theme's CSS Create a file called /assets/css/style.scss in the root of your site's repository. Add the following content to the top of the file, exactly as shown: --- --- @import "{{ site.theme }}"; Add any custom CSS (or Sass, including imports) you'd like immediately after the @import line. Customizing your Jekyll theme's HTML layout Navigate to your Jekyll theme source repository's default.html file in the _layouts folder on GitHub. For example, navigate to https://github.com/pages-themes/THEME_NAME/blob/master/_layouts/default.html and replace THEME_NAME with the name of your Jekyll theme. Copy the content of the default.html file. Tip: Click Raw in the upper-right of the page to change your view of the file to make copying easier. Create a file called /_layouts/default.html in your site repository. Paste the default layout content copied in step two in the new /_layouts/default.html file in your site repository. Customize the layout as you'd like. Further reading Jekyll's official documentation on Themes "About Jekyll themes on GitHub" "Adding a Jekyll theme to your GitHub Pages site" "Adding a Jekyll theme to your GitHub Pages site with the Jekyll Theme Chooser" "Editing files in your repository" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Setting up your GitHub Pages site locally with Jekyll - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Customizing GitHub Pages / Setting up your GitHub Pages site locally with Jekyll Setting up your GitHub Pages site locally with Jekyll mac windows linux all You can set up a local version of your Jekyll GitHub Pages site to test changes to your site locally. We highly recommend installing Jekyll to preview your site and help troubleshoot failed Jekyll builds. In this article: Requirements Step 1: Create a local repository for your Jekyll site Step 2: Install Jekyll using Bundler Step 3 (optional): Generate Jekyll site files Step 4: Build your local Jekyll site Keeping your site up to date with the GitHub Pages gem Next steps: Configuring Jekyll Further reading Jekyll is not officially supported for Windows. For more information, see "Jekyll on Windows" in the official Jekyll documentation. Requirements We recommend using Bundler to install and run Jekyll. Bundler manages Ruby gem dependencies, reduces Jekyll build errors, and prevents environment-related bugs. To install Bundler, you must install Ruby. Open TerminalTerminalGit Bash. Check whether you have Ruby 2.1.0 or higher installed: ruby --version ruby 2.X.X If you don't have Ruby installed, install Ruby 2.1.0 or higher. Install Bundler: gem install bundler # Installs the Bundler gem If you already have a local repository for your Jekyll site, skip to Step 2. Step 1: Create a local repository for your Jekyll site If you haven't already downloaded Git, install it. For more information, see "Set up Git." Open TerminalTerminalGit Bash. On your local computer, initialize a new Git repository for your Jekyll site: git init JEKYLL-SITE-REPOSITORY-NAME Initialized empty Git repository in /Users/octocat/my-site/.git/ # Creates a new file directory on your local computer, initialized as a Git repository Change directories to the new repository you created: cd JEKYLL-SITE-REPOSITORY-NAME # Changes the working directory If your new local repository is for a Project pages site, create a new gh-pages branch: Note: You can skip this step if you would rather use the master branch for your Project Page. If you haven't checked out any branches, once you make a commit in your local repository, your change will appear on the master branch by default. git checkout -b gh-pages Switched to a new branch 'gh-pages' # Creates a new branch called 'gh-pages', and checks it out Tip: To learn more about creating a User, Organization or Project Page and which branch to use, see "User, Organization, and Project Pages." To learn more about how to build your site's source files from a /docs folder on the master branch, see "Configuring a publishing source for GitHub Pages." Step 2: Install Jekyll using Bundler To track your site's dependencies, Ruby will use the contents of your Gemfile to build your Jekyll site. Check to see if you have a Gemfile in your local Jekyll site repository: ls Gemfile If you have a Gemfile, skip to step 4. If you don't have a Gemfile, skip to step 2. If you don't have a Gemfile, open your favorite text editor, such as Atom, and add these lines to a new file: source 'https://rubygems.org' gem 'github-pages', group: :jekyll_plugins Name the file Gemfile and save it to the root directory of your local Jekyll site repository. Skip to step 5 to install Jekyll. If you already have a Gemfile, open your favorite text editor, such as Atom, and add these lines to your Gemfile: source 'https://rubygems.org' gem 'github-pages', group: :jekyll_plugins Install Jekyll and other dependencies from the GitHub Pages gem: bundle install Fetching gem metadata from https://rubygems.org/............ Fetching version metadata from https://rubygems.org/... Fetching dependency metadata from https://rubygems.org/.. Resolving dependencies... Tip: If you see a Ruby error when you try to install Jekyll using Bundler, you may need to use a package manager, such as RVM or Homebrew, to manage your Ruby installation. For more information, see Jekyll's troubleshooting page. Step 3 (optional): Generate Jekyll site files To build your Jekyll site locally, preview your site changes, and troubleshoot build errors, you must have Jekyll site files on your local computer. You may already have Jekyll site files on your local computer if you cloned a Jekyll site repository. If you don't have a Jekyll site downloaded, you can generate Jekyll site files for a basic Jekyll template site in your local repository. If you want to use an existing Jekyll site repository on GitHub as the starting template for your Jekyll site, fork and clone the Jekyll site repository on GitHub to your local computer. For more information, see "Fork a repo." Note: As of Jekyll 3.2, the default Jekyll site contains a Gemfile that locks Jekyll to the Gem version you build it with. To instead lock it to the version used by GitHub Pages, you'll uncomment the gem "github-pages", group: :jekyll_plugins line in the steps below. If you don't already have a Jekyll site on your local computer, create a Jekyll template site in a new directory: bundle exec jekyll _3.3.0_ new NEW-JEKYLL-SITE-REPOSITORY-NAME New jekyll site installed in /Users/octocat/NEW-JEKYLL-SITE-REPOSITORY-NAME. Navigate into your new site directory: cd NEW-JEKYLL-SITE-REPOSITORY-NAME Edit your Gemfile and remove the following line: "jekyll", "3.3.0" In the Gemfile, delete the # at the beginning of this line: gem "github-pages", group: :jekyll_plugins Initialize your site directory as a Git repository. git init Initialized empty Git repository in /Users/octocat/name-of-your-directory Connect your remote repository on GitHub to your local repository for your GitHub Pages site. git remote add origin https://github.com/username-or-organization-name/your-remote-repository-name To edit the Jekyll template site, open your new Jekyll site files in a text editor. Make your changes and save them in the text editor. You can preview these changes locally on your computer without committing your changes using Git by running a Jekyll command to build your site. Add or stage your changes. git add . Commit your changes with a comment. git commit -m "updated site" To publish your changes on your GitHub Pages site, push your changes to your remote repository on GitHub. git push -u origin master For more information on using this Git workflow, see "Good Resources for Learning Git and GitHub" or see this Git cheat sheet. Step 4: Build your local Jekyll site Navigate into the root directory of your local Jekyll site repository. Run your Jekyll site locally: bundle exec jekyll serve Configuration file: /Users/octocat/my-site/_config.yml Source: /Users/octocat/my-site Destination: /Users/octocat/my-site/_site Incremental build: disabled. Enable with --incremental Generating... done in 0.309 seconds. Auto-regeneration: enabled for '/Users/octocat/my-site' Configuration file: /Users/octocat/my-site/_config.yml Server address: http://127.0.0.1:4000/ Server running... press ctrl-c to stop. Preview your local Jekyll site in your web browser at http://localhost:4000. Keeping your site up to date with the GitHub Pages gem Jekyll is an active open source project and is updated frequently. As the GitHub Pages server is updated, the software on your computer may become out of date, resulting in your site appearing different locally from how it looks when published on GitHub. Open TerminalTerminalGit Bash. Run this update command: If you followed our setup recommendations and installed Bundler, run bundle update github-pages or simply bundle update and all your gems will update to the latest versions. If you don't have Bundler installed, run gem update github-pages Next steps: Configuring Jekyll To configure your pages site further, see "Configuring Jekyll." To set up a project pages site, see Jekyll's official documentation on project pages URLs. Further Reading "Troubleshooting GitHub Pages Builds" "Using Jekyll as a static site generator with GitHub Pages" Jekyll's official GitHub Pages documentation Jekyll commands Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Configuring Jekyll - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Customizing GitHub Pages / Configuring Jekyll Configuring Jekyll mac windows linux all You can configure most Jekyll settings by editing your _config.yml file. Note: For more information on configuring your site with Jekyll, see the official Jekyll configuration documentation. For more information about default and optional Jekyll plugins, see "Configuring Jekyll Plugins." Defaults you can change The following defaults are set by GitHub, which you are free to override in your _config.yml file: github: [metadata] encoding: UTF-8 kramdown: input: GFM hard_wrap: false future: true jailed: false theme: jekyll-theme-primer gfm_quirks: paragraph_end Configuration settings you cannot change GitHub Pages & Jekyll override the following settings in your _config.yml file, which you cannot change: lsi: false safe: true source: [your repo's top level directory] incremental: false highlighter: rouge gist: noscript: false kramdown: math_engine: mathjax syntax_highlighter: rouge Tips: For the content of the repository metadata object, see repository metadata on GitHub Pages. Keep in mind that if you change the source setting, your pages may not build correctly. GitHub Pages only considers source files in the top-level directory of a repository. Front matter is required Jekyll requires that Markdown files have front matter defined at the top of every file. Front matter is just a set of metadata, delineated by three dashes: --- title: This is my title layout: post --- Here is my page. If you like, you can choose to omit front matter from your file, but you'll still need to make the triple-dashes: --- --- Here is my page. If your file is within the _posts directory, you can omit the dashes entirely. For more information on configuring the front matter, see the official Jekyll front matter documentation. Further reading "Configuring Jekyll plugins" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Troubleshooting GitHub Pages builds - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Customizing GitHub Pages / Troubleshooting GitHub Pages builds Troubleshooting GitHub Pages builds mac windows linux all If your GitHub Pages site fails to build on our servers or encounters other errors, you can troubleshoot your build error by reviewing common problems or specific error messages. You can also view Jekyll build error messages by email, in your repository, on the command line, or using a third party service. Viewing Jekyll build error messages You can view Jekyll build error messages by email, in your repository, on the command line, or with a third-party service that displays error messages after each commit. Generic Jekyll build failures Generic build failures will not produce an email with specific file and error information. If you receive an email that simply says "Page build failed" with no further details, or your GitHub Pages site is not showing up after the first push, check for these common errors. Page build failed: Missing docs folder If you have the master branch /docs folder source setting enabled and your /docs folder with your site's source files was removed from the root of your repository on the master branch, your GitHub Pages site will not build. Page build failed: Invalid submodule If your GitHub Pages code includes a reference to an invalid submodule, your GitHub Pages site will not build. Page build failed: Missing submodule If your GitHub Pages code includes a reference to a submodule that doesn't exist or hasn't been properly initialized, your GitHub Pages site will not build. Page build failed: Markdown errors If your GitHub Pages code contains Markdown errors, your GitHub Pages site will not build. Page build failed: Config file error If the _config.yml file in your GitHub Pages repository has syntax errors, your GitHub Pages site will not build. Page build failed: Unknown tag error If your GitHub Pages code contains an unrecognized Liquid tag, your GitHub Pages site will not build. Page build failed: Tag not properly terminated If your GitHub Pages code contains a Liquid output tag that is not properly terminated, your GitHub Pages site will not build. Page build failed: Tag not properly closed If your GitHub Pages code contains a Liquid logic tag that is not properly closed, your GitHub Pages site will not build. Page build failed: File does not exist in includes directory If your GitHub Pages code references a file that doesn't exist in your _includes directory, your GitHub Pages site will not build. Page build failed: File is a symlink If a file in your GitHub Pages repository references a symlinked file that does not exist in your repository, then your GitHub Pages site will not build. Page build failed: Symlink does not exist within your site's repository If your GitHub Pages site includes a symbolic link (also known as a symlink) to another file or directory that does not exist within your site's repository, your site will not build. Page build failed: File is not properly UTF-8 encoded If your GitHub Pages repository contains a file that is not properly UTF-8 encoded, your GitHub Pages site will not build. Page build failed: Invalid post date If your GitHub Pages repository contains a post with an invalid date, your GitHub Pages site will not build. Page build failed: Invalid Sass or SCSS If your GitHub Pages repository contains a Sass or SCSS file with invalid content, your GitHub Pages site will not build. Page build failed: Invalid highlighter language If your GitHub Pages code uses the highlighter tag with an invalid language identifier, your GitHub Pages site will not build. Updating your Markdown processor to kramdown If you are not already using kramdown, Jekyll 3.0.0's default Markdown processor, then you must update your Markdown processor in your _config.yml file. Page build failed: Date is not a valid datetime If your GitHub Pages repository contains a page which displays an invalid datetime, your GitHub Pages site will not build. Page build failed: Relative permalinks If you have relative permalinks set up in your _config.yml file, then you should receive a page build failure advising you to remove the relative_permalink option from your _config.yml file and replace any relative permalinks in your site with absolute permalinks. Page build failed: Syntax error in 'for' loop If your GitHub Pages code contains invalid syntax in the Liquid for loop declaration, your GitHub Pages site will not be built. Files that start with an underscore are missing If your GitHub Pages site isn't publishing certain files then you might need to reformat their titles. If you are using Jekyll you can create a .nojekyll file or edit the _config.yml file to publish these files. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Viewing Jekyll build error messages - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Customizing GitHub Pages / Viewing Jekyll build error messages Viewing Jekyll build error messages mac windows linux all You can view Jekyll build error messages by email, in your repository, on the command line, or with a third-party service that displays error messages after each commit. There are two main types of Jekyll build error messages. "Page build warning" - Your build completed just fine, but there's something we think you ought to know. "Page build failed" - Your build failed to complete. If we are able to detect the specific error, we will send you a descriptive error message with a link to supporting documentation. If we are not able to detect a specific error with your page build failure, then you will receive a generic "page build failed" error message. Viewing Jekyll build error messages by email You can view all Jekyll build error messages by email if you have your email set up. To add a new email address or verify an old email, see "Changing your primary email address." Viewing Jekyll build failure messages in your repository You can view Jekyll build failure messages in the repository settings of your GitHub Pages site. On GitHub, navigate to the main page of the repository. Under your repository name, click Settings. Under GitHub Pages you can see current Jekyll build failure messages. Note: Page build warnings will not display in your repository settings. Viewing Jekyll build error messages in the command line Tip: We strongly recommend running Jekyll locally so you can easily debug and fix build errors before pushing to GitHub. To learn more about troubleshooting options, see "Troubleshooting GitHub Pages builds." To view all Jekyll build error messages on the command line, you must set up your Jekyll site locally on your computer, see "Setting up your GitHub Pages site locally with Jekyll" for more details. If your page isn't building after you push to GitHub, see "Troubleshooting GitHub Pages builds". Configuring a third-party service to display Jekyll build error messages You can configure a third-party service such as Travis CI to display error messages after each commit. Add a file named Gemfile (note that the "G" must be capitalized) to the root of your GitHub Pages repository with the following content: source 'https://rubygems.org' gem 'github-pages' Configure your GitHub Pages repository for the testing service of your choice. To set up Travis CI, for example, add a file named .travis.yml to the root of your GitHub Pages repository with the following content: language: ruby rvm: - 2.1 script: "bundle exec jekyll build" You may need to activate your GitHub Pages repository within the third-party testing service. For Travis, do this on your Travis CI profile page. If you have vendored your gems into a vendor folder (or a CI service like Travis has done it for you), be sure to add exclude: ["vendor"] to your _config.yml file to avoid potential conflicts. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Generic Jekyll build failures - User Documentation <meta name="Description" content="Generic build failures will not produce an email with specific file and error information. If you receive an email that simply says "Page build failed" with no further details, or your GitHub Pages site is not showing up after the first push, check for these common errors. …"> GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Customizing GitHub Pages / Generic Jekyll build failures Generic Jekyll build failures mac windows linux all Generic build failures will not produce an email with specific file and error information. If you receive an email that simply says "Page build failed" with no further details, or your GitHub Pages site is not showing up after the first push, check for these common errors. We recommend building your site locally to help you troubleshoot generic Jekyll build failures, such as syntax or tag errors. Unverified email address To trigger a build, the user who pushes a commit to the Pages repository must have a verified email address. After you verify an email address, your GitHub Pages sites will build automatically. Deploy key used for push Pushes must come from a user account with a verified email address. You won't trigger a build if you use a deploy key to push to an organization's Pages repository. Instead, you can set up a machine user as a member of your organization. Unsupported plugins The GitHub Pages server will not build with unsupported plugins. The only way to incorporate unsupported plugins in your site is to generate your site locally and then push your site's static files to your GitHub Pages site. For a list of supported plugins and instructions on how to include them in your GitHub Pages site, see "Adding Jekyll plugins to a GitHub Pages site." Size limits Repositories on GitHub have a soft limit of 1 GB per repository. Similarly, GitHub Pages sites also have a 1 GB soft limit. If your Pages site exceeds that limit, you may find that your site won't build. You may also receive a polite email from us requesting that you reduce the size of your site. Source setting Our build server overrides the source setting when it builds Pages sites. If you change this setting in your _config.yml file, your GitHub Pages site may not build correctly. Working with continuous integration services Some CI services, such as Travis CI, won't build your gh-pages branch unless you explicitly whitelist it. If you want your GitHub Pages site to integrate with a CI service, you'll need to specify the gh-pages branch in your CI's configuration file. For example, Travis CI's documentation suggests adding the following lines to a .travis.yml file: branches: only: - gh-pages Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Page build failed: Missing docs folder - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Customizing GitHub Pages / Page build failed: Missing docs folder Page build failed: Missing docs folder mac windows linux all If you have the master branch /docs folder source setting enabled and your /docs folder with your site's source files was removed from the root of your repository on the master branch, your GitHub Pages site will not build. If your GitHub Pages site fails to build because your /docs folder on the master branch was moved or deleted, you'll see a message in GitHub Pages settings that looks like this: Check GitHub Pages build error messages On GitHub, navigate to the main page of the repository. Under your repository name, click Settings. Read any applicable build error message under "GitHub Pages." Resolving the build error If your /docs folder was accidently moved, you can try moving the /docs folder back to the root of your repository on the master branch. If your /docs folder was deleted, you must either: use Git to revert or undo the deletion of your /docs folder with your site's source files recreate a /docs folder in the root of your repository on the master branch and add or recreate your site's source files in this folder change the source settings to gh-pages or the master branch and add or recreate your site's source files on the gh-pages or master branch Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Page build failed: Invalid submodule - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Customizing GitHub Pages / Page build failed: Invalid submodule Page build failed: Invalid submodule mac windows linux all If your GitHub Pages code includes a reference to an invalid submodule, your GitHub Pages site will not build. If your GitHub Pages site fails to build because of an invalid submodule, you'll get an email with this message: Subject: Page build failed The page build failed with the following error: "The submodule registered for `./EXAMPLE_SUBMODULE` could not be cloned. Make sure it's using https:// and that it's a public repo. Troubleshooting invalid submodule errors Tip: We strongly recommend running Jekyll locally so you can easily debug and fix build errors before pushing to GitHub. To learn more about troubleshooting options, see "Troubleshooting GitHub Pages builds." Check the submodule referenced in the build failure email. Ensure that: You use https:// when referencing the submodule, not http://. The submodule is in a public repository. The GitHub Pages server cannot build from submodules in private repositories. Once you've fixed all invalid submodule errors, you will need to commit your changes and push to your GitHub Pages repository again to trigger another build on the server. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Page build failed: Missing submodule - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Customizing GitHub Pages / Page build failed: Missing submodule Page build failed: Missing submodule mac windows linux all If your GitHub Pages code includes a reference to a submodule that doesn't exist or hasn't been properly initialized, your GitHub Pages site will not build. If your GitHub Pages site fails to build because of a missing or improperly initialized submodule, you'll receive an email that looks like this: Subject: Page build failed The page build failed with the following error: "The submodule `EXAMPLE_SUBMODULE` was not properly initialized with a `.gitmodules` file. Troubleshooting non-existent submodule errors Tip: We strongly recommend running Jekyll locally so you can easily debug and fix build errors before pushing to GitHub. To learn more about troubleshooting options, see "Troubleshooting GitHub Pages builds." If you haven't initialized your submodule, you will need to initialize it with the following steps: In the submodule's directory, run git submodule init, then git submodule update. Commit and push your changes to trigger another build on the server. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Page build failed: Markdown errors - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Customizing GitHub Pages / Page build failed: Markdown errors Page build failed: Markdown errors mac windows linux all If your GitHub Pages code contains Markdown errors, your GitHub Pages site will not build. If your GitHub Pages site fails to build because of invalid Markdown, you'll receive an email that looks like this: Subject: Page build failed The page build failed with the following error: The file `example.md` contains markdown errors. Troubleshooting Markdown errors Tip: We strongly recommend running Jekyll locally so you can easily debug and fix build errors before pushing to GitHub. To learn more about troubleshooting options, see "Troubleshooting GitHub Pages builds." If you are not using kramdown as your Markdown processor, then you must update your Markdown processor to kramdown. GitHub Pages only supports kramdown. Make sure the file mentioned in the email uses valid Markdown syntax. See "Getting started with writing and formatting on GitHub" for more help or the Daring Fireball Markdown guide for a more complete guide to Markdown syntax. Once you've fixed any Markdown errors, you will need to commit your changes and push to your GitHub Pages repository again to trigger another build on the server. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Page build failed: Config file error - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Customizing GitHub Pages / Page build failed: Config file error Page build failed: Config file error mac windows linux all If the _config.yml file in your GitHub Pages repository has syntax errors, your GitHub Pages site will not build. If your GitHub Pages site fails to build because the _config.yml file contains syntax errors, we'll send you an email that looks like this: Subject: Page build failed The page build failed with the following error: You have an error on line 1 of your _config.yml file. Troubleshooting _config.yml syntax errors Tip: We strongly recommend running Jekyll locally so you can easily debug and fix build errors before pushing to GitHub. To learn more about troubleshooting options, see "Troubleshooting GitHub Pages builds." Check your _config.yml file at the line referenced in the build failure email. Ensure that: You are using spaces instead of tabs in the file. You have included a space after the ":" for each key/value pair. Correct example: timezone: Africa/Nairobi Build fail example: timezone:Africa/Nairobi. You are only using UTF-8 characters. You quote any special characters. Correct example: title: "my awesome site: an adventure in parse errors" Build fail example: title: my awesome site: an adventure in parse errors Use a YAML linter, such as http://codebeautify.org/yaml-validator, to validate your YAML code. If you run into parse errors with your _config.yml file, try copying and pasting the contents of the file into such a tool for more details. Once you've fixed any syntax errors in your _config.yml file, you will need to commit your changes and push to your GitHub Pages repository again to trigger another build on our servers. Fixing highlighting errors If you attempt to use a syntax highlighter other than Rouge on your GitHub Pages site with Jekyll, you'll receive a page build warning. GitHub Pages does not support other highlighters and will automatically use the default Rouge. For more information, see "Using syntax highlighting on GitHub Pages." To fix page build warnings, you must change your highlighter value to rouge in your _config.yml file. On GitHub, navigate to the main page of the repository. In your repository, browse to _config.yml. In the upper right corner of the file view, click to open the file editor. Find the line that starts with highlighter: and change the value to rouge. At the bottom of the page, type a short, meaningful commit message that describes the change you made to the file. Below the commit message fields, decide whether to add your commit to the current branch or to a new branch. If your current branch is master, you should choose to create a new branch for your commit and then create a pull request. Click Propose file change. Further reading: YAML documentation Jekyll configuration documentation Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Page build failed: Unknown tag error - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Customizing GitHub Pages / Page build failed: Unknown tag error Page build failed: Unknown tag error mac windows linux all If your GitHub Pages code contains an unrecognized Liquid tag, your GitHub Pages site will not build. If your GitHub Pages site fails to build because of an unrecognized Liquid tag, you'll get an email that looks like this: Subject: Page build failed The page build failed with the following error: The tag `fake_tag` in `index.html` is not a recognized Liquid tag. Troubleshooting unrecognized tag errors Tip: We strongly recommend running Jekyll locally so you can easily debug and fix build errors before pushing to GitHub. To learn more about troubleshooting options, see "Troubleshooting GitHub Pages builds." Check the tags in the referenced file. They should match those in Jekyll's default variables. Make sure there are no typos in your tag names. Check plugin output for unrecognized tags Plugins are a common source of unrecognized tags. Since GitHub doesn't support most plugins, a common workaround is to build locally and include the results in the Pages repository. However, sometimes this workaround includes tags that are not in Jekyll's default variables, which the build cannot parse. For a list of supported plugins, see "Adding Jekyll plugins to a GitHub Pages site." Once you've fixed any tag errors, you will need to commit your changes and push to your GitHub Pages repository again to trigger another build on the server. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Page build failed: Tag not properly terminated - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Customizing GitHub Pages / Page build failed: Tag not properly terminated Page build failed: Tag not properly terminated mac windows linux all If your GitHub Pages code contains a Liquid output tag that is not properly terminated, your GitHub Pages site will not build. If your GitHub Pages site fails to build because of an improperly terminated Liquid output tag, you'll get an email with this message: Subject: Page build failed The page build failed with the following error: The variable `{ EXAMPLE_VARIABLE }` was not properly closed with `}}\ Troubleshooting improperly terminated tag errors Tip: We strongly recommend running Jekyll locally so you can easily debug and fix build errors before pushing to GitHub. To learn more about troubleshooting options, see "Troubleshooting GitHub Pages builds." Check the Liquid tags in the file referenced in the build failure email. All output tags must be terminated with }}. Example {{ page.title }} is properly opened and closed with double curly brackets. Once you've fixed any improperly terminated tags, you will need to commit your changes and push to your GitHub Pages repository again to trigger another build on the server. Further reading Jekyll variables Liquid output tags Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Page build failed: Tag not properly closed - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Customizing GitHub Pages / Page build failed: Tag not properly closed Page build failed: Tag not properly closed mac windows linux all If your GitHub Pages code contains a Liquid logic tag that is not properly closed, your GitHub Pages site will not build. If your GitHub Pages site fails to build because of an improperly closed Liquid logic tag, you'll get an email with this message: Subject: Page build failed The page build failed with the following error: The tag `capture` in `index.html` was not properly closed with `{% endcapture %}`. Troubleshooting improperly closed tag errors Tip: We strongly recommend running Jekyll locally so you can easily debug and fix build errors before pushing to GitHub. To learn more about troubleshooting options, see "Troubleshooting GitHub Pages builds." Check the Liquid tags in the file referenced in the build failure email. All logic tags (those that are wrapped in '{% %}') must have a matching closing tag. Example Here's an example of a correctly formatted set of tags: {% capture example_variable %} <p>I am an example being captured.</p> {% endcapture %} In this example, the opening {%capture%} tag is properly closed with an {% endcapture %} tag. Once you've fixed any improperly closed tags, you will need to commit your changes and push to GitHub Pages repository again to trigger another build on the server. Further reading Liquid logic tags Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Page build failed: File does not exist in includes directory - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Customizing GitHub Pages / Page build failed: File does not exist in includes directory Page build failed: File does not exist in includes directory mac windows linux all If your GitHub Pages code references a file that doesn't exist in your _includes directory, your GitHub Pages site will not build. If you reference a file that doesn't exist in your _includes directory, you'll get an email that looks like this: Subject: Page build failed The page build failed with the following error: A file was included in `example.html` that does not exist in your `_includes` directory Troubleshooting a nonexistent file error Tip: We strongly recommend running Jekyll locally so you can easily debug and fix build errors before pushing to GitHub. To learn more about troubleshooting options, see "Troubleshooting GitHub Pages builds." Use your favorite text editor to open the file mentioned in the build failure email. Search for the include tag to see where you've referenced other files. For example: {% include example_header.html %}. If you've referenced any files that aren't in the _includes directory of your GitHub Pages repository, you will need to copy or move them into the _includes directory. If the files don't exist at all, you will need to create them. Commit the changes and push them to your GitHub Pages repository to trigger another build on the server. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Page build failed: File is a symlink - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Customizing GitHub Pages / Page build failed: File is a symlink Page build failed: File is a symlink mac windows linux all If a file in your GitHub Pages repository references a symlinked file that does not exist in your repository, then your GitHub Pages site will not build. If your GitHub Pages site fails to build because of a reference to a symlinked file, you'll get an email that looks like this: Subject: Page build failed The page build failed with the following error: A file was included in `example.html` that is a symlink or does not exist in your `_includes` directory. Troubleshooting a symlinked file error Tip: We strongly recommend running Jekyll locally so you can easily debug and fix build errors before pushing to GitHub. To learn more about troubleshooting options, see "Troubleshooting GitHub Pages builds." Use your favorite text editor to open the file mentioned in the build failure email. Search for the include tag to see where you've referenced other files. For example: {% include cool_header.html %}. Copy or move any symlinked files into the _includes directory of your GitHub Pages repository. Commit and push to your GitHub Pages repository on GitHub to trigger another build on the server. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Page build failed: Symlink does not exist within your site's repository - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Customizing GitHub Pages / Page build failed: Symlink does not exist within your site's repository Page build failed: Symlink does not exist within your site's repository mac windows linux all If your GitHub Pages site includes a symbolic link (also known as a symlink) to another file or directory that does not exist within your site's repository, your site will not build. If your GitHub Pages site fails to build because of an invalid symlink, you'll get an email that looks like this: Subject: Page build failed The page build failed with the following error: The symbolic link `/foo` targets a file which does not exist within your site's repository. Troubleshooting invalid symlink errors If you do not intend the indicated file to be a symlink, or if you do not use the indicated file to build your site, in many cases, you may safely delete it. If the symlinked file is necessary to build your site, make sure the file or directory it references is in your repository. To include external assets, consider using a git submodule or third-party package manager such as Bower. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Page build failed: File is not properly UTF-8 encoded - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Customizing GitHub Pages / Page build failed: File is not properly UTF-8 encoded Page build failed: File is not properly UTF-8 encoded mac windows linux all If your GitHub Pages repository contains a file that is not properly UTF-8 encoded, your GitHub Pages site will not build. If your GitHub Pages site fails to build because of encoding errors, you'll get an email that looks like this: Subject: Page build failed The page build failed with the following error: The file `example.html` was not properly UTF-8 encoded. Troubleshooting UTF-8 encoding errors Tip: We strongly recommend running Jekyll locally so you can easily debug and fix build errors before pushing to GitHub. To learn more about troubleshooting options, see "Troubleshooting GitHub Pages builds." Computers expect text to appear as Latin characters. Encoding errors occur when you use non-Latin characters, like 日本語, without telling the computer to expect these symbols. To force UTF-8 encoding, add the following line to your _config.yml file: encoding: UTF-8 After you make this change, you will need to commit your changes and push to your Pages repository on GitHub to trigger another build on the server. For more help with Jekyll configuration, see the Jekyll documentation. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Page build failed: Invalid post date - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Customizing GitHub Pages / Page build failed: Invalid post date Page build failed: Invalid post date mac windows linux all If your GitHub Pages repository contains a post with an invalid date, your GitHub Pages site will not build. If your GitHub Pages site fails to build because of a post with an invalid date in the filename, you'll get an email that looks like this: Subject: Page build failed The page build failed with the following error: "The post `2012-02-30-time-is-an-illusion.md` does not have a valid date in the filename." And if your GitHub Pages site fails to build because of a post with an invalid date in the YAML front matter, you'll get an email that looks like this: Subject: Page build failed The page build failed with the following error: "The post `2012-02-30-time-is-an-illusion.md` does not have a valid date in the YAML front matter." Troubleshooting post date errors Tip: We strongly recommend running Jekyll locally so you can easily debug and fix build errors before pushing to GitHub. To learn more about troubleshooting options, see "Troubleshooting GitHub Pages builds." Make sure you're using proper date formatting for filenames with dates and any date values in the YAML front matter of your files. Dates must be formatted as YYYY-MM-DD HH:MM:SS for UTC, and must be actual calendar dates. If you specify a date format in your _config.yml file, make sure you format it correctly. To specify a time zone with an offset from UTC, use the format YYYY-MM-DD HH:MM:SS +/-TTTT. For example: 2014-04-18 11:30:00 +0800. Once you've fixed all post date errors, you will need to commit your changes and push to your GitHub Pages repository again to trigger another build on the server. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Page build failed: Invalid Sass or SCSS - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Customizing GitHub Pages / Page build failed: Invalid Sass or SCSS Page build failed: Invalid Sass or SCSS mac windows linux all If your GitHub Pages repository contains a Sass or SCSS file with invalid content, your GitHub Pages site will not build. If your GitHub Pages site fails to build because of invalid SCSS or Sass, you'll get an email that looks like this: Subject: Page build failed The page build failed with the following error: Your SCSS file example.scss has an error on line 47: Invalid CSS after "...on: relative; }": expected selector or at-rule, was "}". Troubleshooting SCSS or Sass Tip: We strongly recommend running Jekyll locally so you can easily debug and fix build errors before pushing to GitHub. To learn more about troubleshooting options, see "Troubleshooting GitHub Pages builds." Reproduce the error by building your Jekyll site locally with the github-pages gem. From the error described in the email, review the indicated line number. Install a Sass or SCSS linter for your favorite text editor to help you find errors before you publish. Once you've fixed any Sass and SCSS errors, trigger another build on the server by committing and pushing your changes to your GitHub Pages repository. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Page build failed: Invalid highlighter language - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Customizing GitHub Pages / Page build failed: Invalid highlighter language Page build failed: Invalid highlighter language mac windows linux all If your GitHub Pages code uses the highlighter tag with an invalid language identifier, your GitHub Pages site will not build. If your GitHub Pages site fails to build because you specify an invalid highlighter language, you'll get an email with this message: Subject: Page build failed The page build failed with the following error: The highlighter language identifier `invalidlanguage` is invalid. Troubleshooting invalid highlighter language errors Tip: We strongly recommend running Jekyll locally so you can easily debug and fix build errors before pushing to GitHub. To learn more about troubleshooting options, see "Troubleshooting GitHub Pages builds." Rouge is Jekyll's default syntax highlighter and is compatible with the Pygments highlighter. Ensure that: you're using Rouge's syntax highlighting correctly, follow the guidelines in "Using syntax highlighting on GitHub Pages." your site's configuration is set up correctly for Rouge, see "Fixing highlighting errors." Further reading Jekyll's official documentation on code snippet highlighting Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Updating your Markdown processor to kramdown - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Customizing GitHub Pages / Updating your Markdown processor to kramdown Updating your Markdown processor to kramdown mac windows linux all If you are not already using kramdown, Jekyll 3.0.0's default Markdown processor, then you must update your Markdown processor in your _config.yml file. GitHub Pages only supports kramdown as a Markdown processor. GitHub-flavored Markdown is supported by kramdown by default, so you can use Markdown with GitHub Pages the same way you use Markdown on GitHub. Tip: If you're currently using Markdown processors that support GitHub-flavored Markdown, such as Rdiscount or Redcarpet, then you don't need to change your Markdown files for them to render properly. If you're using a Markdown processor other than Kramdown, then you must change the Markdown setting in your site's configuration file. On GitHub, navigate to the main page of the repository. In your repository, browse to _config.yml. In the upper right corner of the file view, click to open the file editor. Find the line that starts with markdown: and change the value to kramdown. At the bottom of the page, type a short, meaningful commit message that describes the change you made to the file. Below the commit message fields, decide whether to add your commit to the current branch or to a new branch. If your current branch is master, you should choose to create a new branch for your commit and then create a pull request. Click Propose file change. For more information on using kramdown, see kramdown's quick reference guide or kramdown's official documentation. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Page build failed: Relative permalinks configured - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Customizing GitHub Pages / Page build failed: Relative permalinks configured Page build failed: Relative permalinks configured mac windows linux all If you have relative permalinks set up in your _config.yml file, then you should receive a page build failure advising you to remove the relative_permalink option from your _config.yml file and replace any relative permalinks in your site with absolute permalinks. If your GitHub Pages site is configured for relative permalinks in your _config.yml file, then you'll get an email that looks like this: Subject: Page build failed The page build failed with the following error: Your site is using the relative_permalinks configuration option. This setting is deprecated as has been removed from the latest version of Jekyll. To ensure your site continues to build as expected, remove the option from your site's configuration and update any post or page permalinks to be absolute to the site root, not the parent folder. Understanding relative and absolute permalinks Permalinks are permanent URLs that reference a particular post or page on your GitHub Pages site. Absolute permalinks are URLs that begin with the root of the site. Relative permalinks are modified URLs that begin with parent folder (the folder containing the referenced webpage) instead of the root of the site. For more information, see Jekyll's official documentation on permalinks. Troubleshooting relative permalink errors GitHub Pages and Jekyll no longer support relative permalinks. You must remove the relative_permalinks configuration option from your GitHub Pages site's _config.yml file and reformat any relative permalinks in your site to absolute permalinks. Removing relative_permalinks: from config.yml On GitHub, navigate to the main page of the repository. In your repository, browse to _config.yml. In the upper right corner of the file view, click to open the file editor. Find the line that starts with relative_permalinks: and delete the whole line. At the bottom of the page, type a short, meaningful commit message that describes the change you made to the file. Below the commit message fields, decide whether to add your commit to the current branch or to a new branch. If your current branch is master, you should choose to create a new branch for your commit and then create a pull request. Click Propose file change. Replacing relative permalinks with absolute permalinks Search your site's posts or pages for relative permalinks. Replace any relative permalinks with absolute permalinks. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Page build failed: Syntax error in 'for' loop - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Customizing GitHub Pages / Page build failed: Syntax error in 'for' loop Page build failed: Syntax error in 'for' loop mac windows linux all If your GitHub Pages code contains invalid syntax in the Liquid for loop declaration, your GitHub Pages site will not be built. If your GitHub Pages site fails to build because of invalid syntax in the Liquid for loop declaration, you'll get an email that looks like this: Subject: Page build failed The page build failed with the following error: There is a syntax error in the 'for' loop in index.html. Valid syntax is 'for <item> in <collection>', and the <item> variable may not contain hyphens or quotation marks. Troubleshooting 'for' loop syntax errors Tip: To debug and fix build errors before you push to GitHub, run Jekyll locally. Check the tags in the referenced file. Ensure any for loops have the proper syntax. They should look something like: {% for item in array %} <!-- for loop body --> {% endfor %} Once you've fixed any for loop errors, you will need to commit your changes and push to your GitHub Pages repository again to trigger another build on the server. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Files that start with an underscore are missing - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Customizing GitHub Pages / Files that start with an underscore are missing Files that start with an underscore are missing mac windows linux all If your GitHub Pages site isn't publishing certain files then you might need to reformat their titles. If you are using Jekyll you can create a .nojekyll file or edit the _config.yml file to publish these files. By default, Jekyll does not build any files or directories that are hidden or used for backup (indicated by names that start with . or #, or that end with ~); contain site content (indicated by names that start with _); or are excluded in the site configuration. To work around this behavior, you can include a .nojekyll file in the root path to turn off Jekyll; use [the include directive][global-config] in your _config.yml to specify files that should not be ignored; or do not use file or directory names that start with an underscore (_), period (.), or hash symbol (#), or that end with a tilde (~). If you add a .nojekyll file, your source files will be published without any modifications. Do not use this option if you want Jekyll to process them. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Page build failed: Invalid YAML in data file - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Customizing GitHub Pages / Page build failed: Invalid YAML in data file Page build failed: Invalid YAML in data file mac windows linux all If one or more files in the _data folder of your GitHub Pages site contains invalid YAML, your GitHub Pages site will not build. If your GitHub Pages site fails to build because of YAML parsing errors, you'll get an email that looks like this: Subject: Page build failed The page build failed with the following error: There was a YAML syntax error on line `line_number` column `column_number` in `filename`: `syntax_error`. Troubleshooting YAML parsing errors Tip: We strongly recommend running Jekyll locally so you can easily debug and fix build errors before pushing to GitHub. To learn more about troubleshooting options, see "Troubleshooting GitHub Pages builds." Check the YAML files in your _data folder for the following: Check the indentation in your YAML file and remove any tab characters, as these may not conform to the suggested spacing for YAML files. Ensure that you have a space between a key's value and its preceding colon. Correct example: key: value Build fail example: key:value Check your entries for multi-line values. Including a | will create newlines for each line in the value while including > will ignore newlines and leave all content on a single line. Ensure that you're using appropriate quotations. You may need to quote URLs as well as variables or strings that begin with or contain YAML special characters following a colon. Tip: You can use a tool like YAML Lint to help diagnose and fix YAML errors. Once you've fixed any YAML errors, you will need to commit your changes and push to your GitHub Pages repository again to trigger another build on the server. For more help with Jekyll data files, see the Jekyll documentation. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Page build failed: Date is not a valid datetime - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Customizing GitHub Pages / Page build failed: Date is not a valid datetime Page build failed: Date is not a valid datetime mac windows linux all If your GitHub Pages repository contains a page which displays an invalid datetime, your GitHub Pages site will not build. If your GitHub Pages site fails to build because of an invalid datetime, you'll get an email that looks like this: Subject: Page build failed The page build failed with the following error: The value '' was passed to a date-related filter that expects valid dates in `example.md` or one of its layouts Troubleshooting invalid datetimes Tip: We strongly recommend running Jekyll locally so you can easily debug and fix build errors before pushing to GitHub. To learn more about troubleshooting options, see "Troubleshooting GitHub Pages builds." Reproduce the error by building your Jekyll site locally with the github-pages gem. From the error described in the email, review the file and its layouts for calls to any date-related Liquid filters. Ensure variables being passed into date-related Liquid filters have values in all cases (passing nil or "" will trigger this error). Once you've fixed any invalid datetimes, trigger another build on the server by committing and pushing your changes to your GitHub Pages repository. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Adding Jekyll plugins to a GitHub Pages site - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Customizing GitHub Pages / Adding Jekyll plugins to a GitHub Pages site Adding Jekyll plugins to a GitHub Pages site mac windows linux all You can further customize your GitHub Pages site by adding Jekyll plugins. GitHub Pages officially supports the Jekyll plugins found in the GitHub Pages gem. For the exact versions of the Jekyll plugins that GitHub Pages supports, see this list of GitHub Pages dependencies. Other plugins are not supported, so the only way to incorporate them in your site is to generate your site locally and then push your site's static files to your GitHub Pages site. Jekyll is an active open source project. For information on contributing, see the contributing guidelines. Configuring Jekyll plugins You must edit your _config.yml file to add Jekyll plugins to your GitHub Pages site. Sitemaps for GitHub Pages GitHub Pages can automatically create sitemaps for your projects. Search engine optimization for GitHub Pages GitHub Pages can optimize your site for search engines and social media networks, using the Jekyll SEO tag plugin. Repository metadata on GitHub Pages Common repository information, such as the project name and description, is available to Jekyll sites hosted on GitHub Pages. Atom (RSS) feeds for GitHub Pages GitHub Pages can automatically create an Atom feed for your Jekyll blog. Atom is an XML-based feed format, similar to RSS, that allows other readers to subscribe to new blog posts. Redirects on GitHub Pages When a Jekyll post or page's title or date changes, existing links to the site may break. For the security of our users, GitHub Pages does not support customer server configuration files such as .htaccess or .conf. However, using the Jekyll Redirect From plugin, you can automatically redirect visitors to the updated URL. Emoji on GitHub Pages You can use emoji within any Jekyll page or post, just like you would in a comment or issue within a repository on GitHub. @Mentions on GitHub Pages You can use @mentions within any Jekyll page or post, just like you would in a comment or issue within a repository. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Configuring Jekyll plugins - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Customizing GitHub Pages / Configuring Jekyll plugins Configuring Jekyll plugins mac windows linux all You must edit your _config.yml file to add Jekyll plugins to your GitHub Pages site. To add Jekyll plugins to your site, you need to configure your _config.yml file by adding your plugin's Jekyll gem. This is an example of a _config.yml file that has several supported jekyll plugins enabled: plugins: - jekyll-mentions - jemoji - jekyll-redirect-from - jekyll-sitemap - jekyll-feed If you don't have a _config.yml file, you will need to create one in the root of your GitHub Pages repository. For more information, see Jekyll's official plugins documentation. Tip: Make sure you're using the latest version of the GitHub Pages Gem, which contains these dependencies and plugins. Default plugins Default plugins are enabled by default and cannot be disabled. - jekyll-coffeescript - jekyll-gist - jekyll-github-metadata - jekyll-paginate - jekyll-relative-links - jekyll-optional-front-matter - jekyll-readme-index - jekyll-default-layout - jekyll-titles-from-headings Optional plugins To enable an optional plugin, you must add it to your _config.yml file. - jekyll-feed - jekyll-redirect-from - jekyll-seo-tag - jekyll-sitemap - jekyll-avatar - jemoji - jekyll-mentions - jekyll-include-cache Further reading "Configuring Jekyll" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Sitemaps for GitHub Pages - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Customizing GitHub Pages / Sitemaps for GitHub Pages Sitemaps for GitHub Pages mac windows linux all GitHub Pages can automatically create sitemaps for your projects. Note: GitHub Pages will not override a sitemap.xml file that exists in the root of your repository. Setting up To enable automatic sitemap generation, you must add the following line to your site's _config.yml file: plugins: - jekyll-sitemap If you don't have a _config.yml file, you will need to create one in the root of your GitHub Pages repository. For more information, see Jekyll's official plugins documentation. Testing locally To preview the output of your sitemap locally: Add jekyll-sitemap to your site's _config.yml file Make sure you're using the latest version of the GitHub Pages Gem, which contains these dependencies and plugins. You should see a new sitemap.xml file generated in your Jekyll _site folder. For more information, see The Jekyll Sitemap Gem. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Search engine optimization for GitHub Pages - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Customizing GitHub Pages / Search engine optimization for GitHub Pages Search engine optimization for GitHub Pages mac windows linux all GitHub Pages can optimize your site for search engines and social media networks, using the Jekyll SEO tag plugin. Setting up To enable the Jekyll SEO tag plugin, you must add the following line to your site's _config.yml file: plugins: - jekyll-seo-tag If you don't have a _config.yml file, you will need to create one in the root of your GitHub Pages repository. For more information, see Jekyll's official plugins documentation. To tell the plugin where to put your meta tag information, you must add the SEO tag right before </head> in your site template files. For example, in _layouts/_default.html: <html> <head> {% include head.html %} {% seo %} </head> </html> Customizing meta tags You can add meta tags for titles, descriptions, and several other attributes by editing your site's _config.yml file or by updating the front matter of your site files. For more information, see the Jekyll SEO plugin's reference guide on using meta tags. Further reading "Jekyll SEO tag" "Configuring Jekyll plugins" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Repository metadata on GitHub Pages - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Customizing GitHub Pages / Repository metadata on GitHub Pages Repository metadata on GitHub Pages mac windows linux all Common repository information, such as the project name and description, is available to Jekyll sites hosted on GitHub Pages. Usage Repository metadata is exposed to your Jekyll site's configuration in the site.github namespace. Simply, reference any of the below keys as you would any other site configuration value present in your _config.yml file, prefacing the key with site.github. For example, to list a project's name, you might write something like The project is called {{ site.github.project_title }} or to list an organization's open source repositories, you might use the following: {% for repository in site.github.public_repositories %} * [{{ repository.name }}]({{ repository.html_url }}) {% endfor %} Using repository metadata locally To recreate the site.github namespace locally, ensure you have the latest version of the GitHub Pages Gem installed, and that you have the following line in your site's _config.yml file: repository: <USERNAME>/<PROJECT> Some metadata fields, such as your repository's custom domain, may require additional authentication. Follow the GitHub Metadata plugin documentation to provide the appropriate credentials by creating a personal access token, and selecting the public_repo scope in step five. Available repository metadata Note: For the latest dependency versions see "GitHub Pages Dependencies Versions." The following sample information is exposed to Jekyll templates in the site.github namespace: { "versions": { "jekyll": <version>, "kramdown": <version>, "liquid": <version>, "maruku": <version>, "rdiscount": <version>, "redcarpet": <version>, "RedCloth": <version>, "jemoji": <version>, "jekyll-mentions": <version>, "jekyll-redirect-from": <version>, "jekyll-sitemap": <version>, "github-pages": <version>, "ruby": <version>" }, "hostname": "github.com", "pages_hostname": "github.io", "api_url": "https://api.github.com", "help_url": "https://help.github.com", "environment": "dotcom", "pages_env": "dotcom", "public_repositories": [ Repository Objects ], "organization_members": [ User Objects ], "build_revision": "cbd866ebf142088896cbe71422b949de7f864bce", "project_title": "metadata-example", "project_tagline": "A GitHub Pages site to showcase repository metadata", "owner_name": "github", "owner_url": "https://github.com/github", "owner_gravatar_url": "https://github.com/github.png", "repository_url": "https://github.com/github/metadata-example", "repository_nwo": "github/metadata-example", "repository_name": "metadata-example", "zip_url": "https://github.com/github/metadata-example/zipball/gh-pages", "tar_url": "https://github.com/github/metadata-example/tarball/gh-pages", "clone_url": "https://github.com/github/metadata-example.git", "releases_url": "https://github.com/github/metadata-example/releases", "issues_url": "https://github.com/github/metadata-example/issues", "wiki_url": "https://github.com/github/metadata-example/wiki", "language": null, "is_user_page": false, "is_project_page": true, "show_downloads": true, "url": "http://username.github.io/metadata-example", // (or the CNAME) "baseurl": "/metadata-example", "contributors": [ User Objects ], "releases": [ Release Objects ], "latest_release": [ Release Object ], "private": false, "license": { "key": "mit", "name": "MIT License", "spdx_id": "MIT", "url": "https://api.github.com/licenses/mit" }, "source": { "branch": "gh-pages", "path": "/" } } For more information on the contents of the repository and user objects, see these API endpoints: List organization repositories Members list List contributors List releases Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Atom (RSS) feeds for GitHub Pages - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Customizing GitHub Pages / Atom (RSS) feeds for GitHub Pages Atom (RSS) feeds for GitHub Pages mac windows linux all GitHub Pages can automatically create an Atom feed for your Jekyll blog. Atom is an XML-based feed format, similar to RSS, that allows other readers to subscribe to new blog posts. Note: If a feed.xml file exists in the root of your repository, GitHub Pages will not override it. Setting up To enable automatic feed generation, you must add the following line to your site's _config.yml file: plugins: - jekyll-feed If you don't have a _config.yml file, you will need to create one in the root of your GitHub Pages repository. For more information, see Jekyll's official plugins documentation. You may also wish to add the {% feed_meta %} tag to your layout's <head> section to allow browsers to more easily discover your site's feed. Testing locally To preview the output of your feed locally: Add jekyll-feed to your site's _config.yml file Make sure you're using the latest version of the GitHub Pages Gem, which contains these dependencies and plugins. You should see a new feed.xml file generated in your Jekyll _site folder. Further reading Jekyll Feed Gem "Configuring Jekyll plugins" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Redirects on GitHub Pages - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Customizing GitHub Pages / Redirects on GitHub Pages Redirects on GitHub Pages mac windows linux all When a Jekyll post or page's title or date changes, existing links to the site may break. For the security of our users, GitHub Pages does not support customer server configuration files such as .htaccess or .conf. However, using the Jekyll Redirect From plugin, you can automatically redirect visitors to the updated URL. Setting up To enable redirects, you must add the following line to your site's _config.yml file: plugins: - jekyll-redirect-from If you don't have a _config.yml file, you will need to create one in the root of your GitHub Pages repository. For more information, see Jekyll's official plugins documentation. Usage To redirect a page from /foo/ to another page, add the following to the top of the target page: --- redirect_from: "/foo/" --- Testing locally To verify redirects locally: Add jekyll-redirect-from to your site's _config.yml file Make sure you're using the latest version of the GitHub Pages Gem, which contains these dependencies and plugins. For more information, see The Jekyll Redirect From Gem. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Emoji on GitHub Pages - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Customizing GitHub Pages / Emoji on GitHub Pages Emoji on GitHub Pages mac windows linux all You can use emoji within any Jekyll page or post, just like you would in a comment or issue within a repository on GitHub. Setting up To enable emoji, you must add the following line to your site's _config.yml file: plugins: - jemoji If you don't have a _config.yml file, you will need to create one in the root of your GitHub Pages repository. For more information, see Jekyll's official plugins documentation. Usage Use emoji within your Jekyll posts or pages as you would elsewhere on GitHub. Testing locally To preview the output of emoji locally: Add jemoji to your site's _config.yml file Make sure you're using the latest version of the GitHub Pages Gem, which contains these dependencies and plugins. Note: Emoji are currently only supported in the page and post body. Emoji within includes, layouts, and other sources of content may not render properly. For more information, see The Jemoji Gem. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support @Mentions on GitHub Pages - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Customizing GitHub Pages / @Mentions on GitHub Pages @Mentions on GitHub Pages mac windows linux all You can use @mentions within any Jekyll page or post, just like you would in a comment or issue within a repository. Setting up To enable @mentions, you must add the following line to your site's _config.yml file: plugins: - jekyll-mentions If you don't have a _config.yml file, you will need to create one in the root of your GitHub Pages repository. For more information, see Jekyll's official plugins documentation. Usage @mention a user within your Jekyll posts or pages as you would elsewhere on GitHub. Note: @mentions link the mention to the user's GitHub profile. However, they don't notify the user. Testing locally To preview the output of @mentions locally: Add jekyll-mentions to your site's _config.yml file Make sure you're using the latest version of the GitHub Pages Gem, which contains these dependencies and plugins. Note: @mentions are currently only supported in the page and post body. @mentions within includes, layouts, and other sources of content may not render properly. For more information, see The Jekyll Mentions Gem. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Using a custom domain with GitHub Pages - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Customizing GitHub Pages / Using a custom domain with GitHub Pages Using a custom domain with GitHub Pages mac windows linux all You can customize the domain name of your GitHub Pages site. Quick start: Setting up a custom domain There are three main stages to setting up a custom domain for your GitHub Pages site: choosing your custom domain and registering it with a DNS provider, adding your custom domain to your GitHub Pages site on GitHub, and configuring your domain with your DNS provider. About supported custom domains If you're setting up a custom domain for your GitHub Pages site, choose a supported custom domain for the easiest setup and more support. GitHub Pages is designed to work with two types of custom domains: apex domains and subdomains. Custom domain redirects for GitHub Pages sites The type of pages site you're using determines how your site redirects custom domains. Adding or removing a custom domain for your GitHub Pages site Before setting up your custom domain with your DNS provider you need to add a custom domain to your GitHub Pages site on GitHub. Setting up an apex domain and www subdomain You can set up an apex domain and a www subdomain through your DNS provider and GitHub Pages' servers will automatically create redirects between them. For example, your site can be found at www.example.com or example.com. Setting up an apex domain To set up an apex domain, such as example.com, you must configure an ALIAS, ANAME, or A record with your DNS provider. Setting up a www subdomain To set up a www subdomain, such as www.example.com you must configure a CNAME record with your DNS provider. Setting up a custom subdomain You can set up a custom subdomain, such as blog.example.com, by creating a CNAME record through your DNS provider. Troubleshooting custom domains If your GitHub Pages site isn't loading at your custom domain, you may have an error in your GitHub repository setup or your DNS configuration. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Quick start: Setting up a custom domain - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Customizing GitHub Pages / Quick start: Setting up a custom domain Quick start: Setting up a custom domain mac windows linux all There are three main stages to setting up a custom domain for your GitHub Pages site: choosing your custom domain and registering it with a DNS provider, adding your custom domain to your GitHub Pages site on GitHub, and configuring your domain with your DNS provider. Tips: For more information about choosing a custom domain, see: "About supported custom domains" "Custom domain redirects for GitHub Pages sites" Pick a custom domain and register it with a DNS provider (if you haven't already done so). A DNS provider is a company that allows users to buy and register a unique domain name and connect that name to an IP (Internet Protocol) address by pointing your domain name to an IP address or a different domain name. A DNS provider may also be called a domain registrar or DNS host. Add your custom domain to your GitHub Pages site. Set up your custom domain with your DNS provider. Our guides outline how to set up your pages custom domain with your DNS provider depending on the type of custom domain you have: Setting up an apex domain such as example.com Setting up a www subdomain such as www.example.com Setting up an apex domain and www subdomain such as example.com and www.example.com Setting up a custom subdomain such as blog.example.com Further reading "Using a custom domain with GitHub Pages" "Custom domain redirects for GitHub Pages sites" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support About supported custom domains - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Customizing GitHub Pages / About supported custom domains About supported custom domains mac windows linux all If you're setting up a custom domain for your GitHub Pages site, choose a supported custom domain for the easiest setup and more support. GitHub Pages is designed to work with two types of custom domains: apex domains and subdomains. In this article: Subdomains www subdomains Custom subdomains Setting up subdomains Apex domains Setting up apex domains Further reading We recommend choosing a supported custom domain because unsupported custom domains are not guaranteed to work and may require a domain forwarding service or extra setup with your DNS provider. These supported custom domains are optimized for GitHub Pages. The most recommended custom domain types are bold. Supported custom domain type Example domain www subdomain www.example.com one apex domain & one www subdomain example.com & www.example.com apex domain example.com custom subdomain blog.example.com Tip: We recommend using a www subdomain as your custom domain. If you choose to use an apex domain as your custom domain then we recommend setting up a www subdomain as well. To learn why, see "www subdomains" Subdomains The term subdomain has two common meanings: A customizable and optional part of a domain name located before the root or apex domain that looks like a domain prefix. A type of domain that contains a subdomain part. To avoid confusion, custom domains with different subdomain parts are assigned different labels. A custom domain without a subdomain part, such as example.com, is called an apex domain. Subdomain Subdomain part Subdomain type www.example.com www www subdomain blog.example.com blog custom subdomain www subdomains A www subdomain is the most commonly used type of subdomain, in which the www stands for World Wide Web. For example, www.example.com is a www subdomain because it contains the subdomain part www. We strongly recommend that you use a www subdomain for these reasons: It gives your GitHub Pages site the benefit of our Content Delivery Network. It is more stable because it is not affected by changes to the IP addresses of GitHub's servers. Pages will load significantly faster because Denial of Service attack protection can be implemented more efficiently. Custom subdomains A custom subdomain is a type of subdomain that doesn't use the standard www subdomain part. It is commonly used to manage different host locations or computer servers. For example, blog in blog.example.io may be hosted on a different computer server than www.example.io or photos.example.io. GitHub Pages supports one custom subdomain per pages site. Setting up subdomains A subdomain is configured with a CNAME record through your DNS provider. To learn more about setting up a subdomain, see one of these articles: Setting up a www subdomain Setting up an apex domain and www subdomain Setting up a custom subdomain Apex domains An apex domain is a root domain that does not contain a subdomain part. Apex domains are also known as base, bare, naked, root apex, or zone apex domains. In DNS provider settings apex domains are sometimes symbolized by an @ symbol. For example: example.com is an apex domain because it doesn't have any subdomain parts. Whereas www.example.com is not an apex domain because it contains the subdomain part www. Setting up apex domains An apex domain is usually configured with an A, ALIAS, or ANAME record through your DNS provider. To learn more about setting up an apex domain, see one of these articles: "Setting up an apex domain" "Setting up an apex domain and www subdomain" Tip: If you are using an apex domain as your custom domain, we recommend setting up a www subdomain as well. To learn more, see "Setting up an apex domain and www subdomain." Further reading "Quick start: Setting up a custom domain" "Using a custom domain with GitHub Pages" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Custom domain redirects for GitHub Pages sites - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Customizing GitHub Pages / Custom domain redirects for GitHub Pages sites Custom domain redirects for GitHub Pages sites mac windows linux all The type of pages site you're using determines how your site redirects custom domains. Warning: If the URL for your Pages site contains a username or organization name that begins or ends in a dash, or contains consecutive dashes, then people browsing with Linux will receive a server error when they visit the site. To fix this, change your GitHub username to remove non-alphanumeric characters. For instructions on how to do this, see "Changing your GitHub username." Type of GitHub Pages site Pages default domain & host location on GitHub How the page is redirected Example custom domain User Pages site username.github.io Automatically redirected to the custom domain that has been set for it user.example.com Organization Pages site orgname.github.io Automatically redirected to the custom domain that has been set for it org.example.com Project Pages site owned by a user account username.github.io/projectname Automatically redirected to a subdirectory of a User Pages site custom domain (user.example.com/projectname) project.example.com Project Pages site owned by an organization orgname.github.io/projectname Automatically redirected to a subdirectory of an Organization Pages site custom domain (org.example.com/projectname) project.example.com To learn more about the different GitHub Pages site types, including whether to use master or gh-pages as a publishing branch, see this User, Organization, and Project pages chart. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Adding or removing a custom domain for your GitHub Pages site - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Customizing GitHub Pages / Adding or removing a custom domain for your GitHub Pages site Adding or removing a custom domain for your GitHub Pages site mac windows linux all Before setting up your custom domain with your DNS provider you need to add a custom domain to your GitHub Pages site on GitHub. On GitHub, navigate to your GitHub Pages site's repository. Under your repository name, click Settings. Under "Custom domain", add or remove your custom domain and click Save. Tip: To check if your custom domain is supported, see "About supported custom domains." Set up your custom domain with your DNS provider. For an overview of the next steps, see "Quick start: Setting up a custom domain." Further reading "Using a custom domain with GitHub Pages" "GitHub repository setup errors" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Setting up an apex domain - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Customizing GitHub Pages / Setting up an apex domain Setting up an apex domain mac windows linux all To set up an apex domain, such as example.com, you must configure an ALIAS, ANAME, or A record with your DNS provider. Tip: If you have trouble configuring an ALIAS, ANAME or A record, then contact your DNS provider for help. They can help confirm that you have configured your custom domain correctly with their services. Warning: Unless your DNS provider supports CNAME flattening, don't create a CNAME record for your custom apex domain! Doing so may cause issues with other services, such as email, on that domain. We highly recommend adding your custom domain to your GitHub Pages site's repository before configuring your domain name with your DNS provider. For more information, see "Adding or removing a custom domain for your GitHub Pages site." For more information on apex domains, see "About supported custom domains." To determine which type of DNS record to configure with your DNS provider, check if your DNS provider supports ALIAS or ANAME records. We recommend configuring your apex domain with an ALIAS or ANAME record when possible because they are easier to set up and require less updating since they point your site to another domain name instead of an IP address. A records point your site to one or more IP address and require updating when the IP address changes. Note: Some DNS providers support configuring apex domains with an ALIAS or ANAME record, but there is no industry standard for these. Only DNS Made Easy currently supports ANAME records and DNSimple is one of the few DNS providers that support ALIAS records. If your DNS provider does support ALIAS or ANAME records, then see configuring an ALIAS or ANAME record with your DNS provider. If your DNS provider does not support ALIAS or ANAME records, then see configuring A records with your DNS provider Configuring an ALIAS or ANAME record with your DNS provider Confirm that you have added a custom domain to your GitHub Pages site. Contact your DNS provider for detailed instructions on how to set up ALIAS or ANAME records. Follow your DNS provider's instructions to create an ALIAS or ANAME record that points your apex domain to the GitHub Pages server at your default pages domain. Your DNS changes can take over a full day to update and the wait varies among DNS providers. Note: Your default GitHub Pages domain is determined by the type of pages site you have. For examples, see this domain chart. To confirm that your DNS record is set up correctly, use the dig command with your custom domain. Using a custom domain as an example: $ dig example.com +noall +answer > example.com. 3600 IN A 199.27.XX.XXX When you use the dig command with your GitHub Pages default domain, your domain should resolve or point to the same IP address. For example: $ dig YOUR-USERNAME.github.io +noall +answer > YOUR-USERNAME.github.io 3600 IN A 199.27.XX.XXX Configuring A records with your DNS provider Confirm that you have added a custom domain to your GitHub Pages site. Contact your DNS provider for detailed instructions on how to set up A records. Follow your DNS provider's instructions to create two A records that point your custom domain to the following IP addresses: 192.30.252.153 192.30.252.154 Tip: Your DNS changes can take over a full day to update and the wait varies among DNS providers. To confirm that your DNS record is set up correctly, use the dig command with your custom domain. Using a custom domain as an example: $ dig +noall +answer example.com ;example.com. example.com. 73 IN A 192.30.252.153 example.com. 73 IN A 192.30.252.154 Your apex domain should point to the two IP addresses you configured. Further reading "Using a custom domain with GitHub Pages" "Troubleshooting custom domains" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Setting up a www subdomain - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Customizing GitHub Pages / Setting up a www subdomain Setting up a www subdomain mac windows linux all To set up a www subdomain, such as www.example.com you must configure a CNAME record with your DNS provider. Tip: If you have trouble configuring your CNAME record, then contact your DNS provider for help. They can help confirm that you have configured your custom domain correctly with their services. Warning: We highly recommend adding your custom domain to your GitHub Pages site's repository before configuring your domain name with your DNS provider. For more information, see "Adding or removing a custom domain for your GitHub Pages site." For more information on www subdomains, see "About supported custom domains." Configuring a CNAME record with your DNS provider Confirm that you have added a custom domain to your GitHub Pages site. Contact your DNS provider for detailed instructions on how to set up the subdomain you added to your repository's CNAME file. Follow your DNS provider's instructions to create a CNAME record that points to your default pages domain, such as YOUR-GITHUB-USERNAME.github.io to your subdomain. Your DNS changes can take over a full day to update and the wait varies among DNS and hosting providers. Danger: Do not use wildcard DNS records (e.g. *.example.com) with GitHub Pages! A wildcard DNS record will allow anyone to host a GitHub Pages site at one of your subdomains. Note: Your default GitHub Pages domain is determined by the type of pages site you have. For examples, see this domain chart. To confirm that your DNS record is set up correctly, use the dig command with your custom domain. Using a custom domain as an example: dig www.example.com +nostats +nocomments +nocmd ;www.example.com. IN A www.example.com. 3592 IN CNAME YOUR-USERNAME.github.io. YOUR-USERNAME.github.io. 43192 IN CNAME < GITHUB-PAGES-SERVER >. < GITHUB-PAGES-SERVER >. 22 IN A 199.27.XX.XXX Further reading "Using a custom domain with GitHub Pages" "Troubleshooting custom domains" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Setting up an apex domain and www subdomain - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Customizing GitHub Pages / Setting up an apex domain and www subdomain Setting up an apex domain and www subdomain mac windows linux all You can set up an apex domain and a www subdomain through your DNS provider and GitHub Pages' servers will automatically create redirects between them. For example, your site can be found at www.example.com or example.com. If you want an apex domain to work with a www subdomain, such as example.com and www.example.com, then you must configure each domain through your DNS provider and GitHub Pages' servers will automatically create redirects for you. For example: If the custom domain you added to your GitHub Pages site is example.com, then www.example.com will redirect to example.com If the custom domain you added to your GitHub Pages site is www.example.com, then example.com will redirect to www.example.com. Setting up an apex domain To set up an apex domain, such as example.com, you must configure an ALIAS, ANAME, or A record with your DNS provider. Setting up a www subdomain To set up a www subdomain, such as www.example.com you must configure a CNAME record with your DNS provider. Further reading "Using a custom domain with GitHub Pages" "Troubleshooting custom domains" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Setting up a custom subdomain - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Customizing GitHub Pages / Setting up a custom subdomain Setting up a custom subdomain mac windows linux all You can set up a custom subdomain, such as blog.example.com, by creating a CNAME record through your DNS provider. Tip: If you have trouble configuring your CNAME record, then contact your DNS provider for help. They can help confirm that you have configured your custom domain correctly with their services. Warning: We highly recommend adding your custom domain to your GitHub Pages site's repository before configuring your domain name with your DNS provider. For more information, see "Adding or removing a custom domain for your GitHub Pages site." For more information on custom subdomains, see "About supported custom domains." Configuring a CNAME record with your DNS provider Confirm that you have added a custom domain to your GitHub Pages site. Contact your DNS provider for detailed instructions on how to set up the subdomain you added to your repository's CNAME file. Follow your DNS provider's instructions to create a CNAME record that points to your default pages domain, such as YOUR-GITHUB-USERNAME.github.io to your subdomain. Your DNS changes can take over a full day to update and the wait varies among DNS and hosting providers. Danger: Do not use wildcard DNS records (e.g. *.example.com) with GitHub Pages! A wildcard DNS record will allow anyone to host a GitHub Pages site at one of your subdomains. Note: Your default GitHub Pages domain is determined by the type of pages site you have. For examples, see this domain chart. To confirm that your DNS record is set up correctly, use the dig command with your custom domain. Using a custom domain as an example: dig docs.example.com +nostats +nocomments +nocmd ;docs.example.com. IN A docs.example.com. 3592 IN CNAME YOUR-USERNAME.github.io. YOUR-USERNAME.github.io. 43192 IN CNAME < GITHUB-PAGES-SERVER >. < GITHUB-PAGES-SERVER >. 22 IN A 199.27.XX.XXX Further reading "Using a custom domain with GitHub Pages" "Troubleshooting custom domains" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Troubleshooting custom domains - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Customizing GitHub Pages / Troubleshooting custom domains Troubleshooting custom domains mac windows linux all If your GitHub Pages site isn't loading at your custom domain, you may have an error in your GitHub repository setup or your DNS configuration. Tip: If you've recently changed or removed your custom domain and can't access the new URL in your browser, you may need to clear your browser's cache to reach the new custom domain. For more information on clearing your cache, see your browser's help site. GitHub repository setup errors Tip: Custom domains are stored in a CNAME file in the root of your repository. You can add or update your custom domain through your repository settings. You can also edit the file directly to update your custom domain, although we recommend the procedure in "Adding or removing a custom domain for your GitHub Pages site." The CNAME file isn't properly formatted The CNAME filename must be uppercase Only the bare domain or subdomain should be listed, e.g., example.com or blog.example.com, not https://example.com. For more information on setting up your custom domain, see "Adding or removing a custom domain for your GitHub Pages site." Multiple domains in CNAME file A CNAME file can contain only one domain. To point multiple domains to the same Page, set up redirects through your DNS provider. CNAME already taken If your custom domain is already used by another GitHub Pages site, you will receive a page build warning. When you add or edit your custom domain in your GitHub Pages site's repository settings, we automatically create a CNAME file in the root of your repository. A custom domain in a CNAME file can only be used once. Here are some examples of when you'll receive a page build warning for a duplicate custom domain: If you have an apex domain such as example.com in your CNAME file, this means that either example.com or its www subdomain (www.example.com) has been used in a CNAME file in another repository and is being used by the corresponding GitHub Pages site. Likewise, if you have a www subdomain such as www.example.com in your CNAME file, this means that either www.example.com or its apex domain (example.com) has been used in a CNAME file in another repository and is being used by the corresponding GitHub Pages site. If you own the other GitHub Pages repository that is using your custom domain in its CNAME file, then you must remove the custom domain from your other repository's CNAME file before you can use it in a different pages site repository. To remove the custom domain from a different GitHub Pages site repository you own, you can add a different custom domain to your GitHub Pages site or just remove your old custom domain. If you don't own the repository that contains the CNAME file with your custom domain, try to contact the owner and ask them to update their custom domain. If you're unsure which repository contains the CNAME file with your custom domain, contact GitHub Support. Reached limit for User or Organization pages site You can only create one User or Organization pages site per GitHub account. For instance, there can only be one Organization pages site per organization account. Likewise, there can only be one User pages site per individual user account. Project pages sites are unlimited. DNS configuration errors Tip: If you have trouble pointing your GitHub Pages default domain to your custom domain, then contact your DNS provider for help. They can help confirm that you have configured your custom domain correctly. DNS record doesn't point to GitHub's server In order to serve the Page, your DNS records must point to GitHub's server. To confirm that your custom domain points to GitHub's servers, use the dig command with your custom domain. The dig command shows you where your custom domain points. For example: dig example.com +nostats +nocomments +nocmd example.com. 3600 IN A 192.30.252.153 In the example above, example.com points to the IP address 192.30.252.153. If you configured A records through your DNS provider, then your A records should point your custom domain to the following IP addresses: 192.30.252.153 192.30.252.154 Notes: You may see a different IP address, since we serve Pages with a global Content Delivery Network. Use dig username.github.io to see the full resolution path. Note that DNS caching may cause a delay. If you're using an A record that points to 207.97.227.245 or 204.232.175.78, you'll need to update your DNS settings, as we no longer serve Pages directly from those servers. If you configured ALIAS, ANAME, or CNAME records through your DNS provider, then you your DNS record should point to your GitHub Pages default domain, such as YOUR-GITHUB-USERNAME.github.io. Your default GitHub Pages domain is determined by the type of pages site you have. For examples, see this domain chart. If you need help creating these records, contact your DNS provider as they should have the most detailed instructions. For some guidelines on configuring a DNS record with DNS providers, see "Using a custom domain with GitHub Pages." Unsupported custom domain name If your custom domain is unsupported then you may need to change your custom domain. You can also contact your DNS provider to see if they offer domain name forwarding services to redirect your site to an unsupported custom domain. Unsupported custom domains include: using more than one apex domain (example.com and anotherexample.com) using more than one www subdomain (www.example.com and www.anotherexample.com) combination of an apex domain and custom subdomain (example.com and docs.example.com) Danger: Do not use wildcard DNS records (e.g., *.example.com) with GitHub Pages! A wildcard DNS record will allow anyone to host a GitHub Pages site at one of your subdomains. For a list of supported custom domains, see "About supported custom domains." URL formatting error on Linux Warning: If the URL for your Pages site contains a username or organization name that begins or ends in a dash, or contains consecutive dashes, then people browsing with Linux will receive a server error when they visit the site. To fix this, change your GitHub username to remove non-alphanumeric characters. For instructions on how to do this, see "Changing your GitHub username." Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Additional customizations for GitHub Pages - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Customizing GitHub Pages / Additional customizations for GitHub Pages Additional customizations for GitHub Pages mac windows linux all You can further customize your GitHub Pages site in many ways. Creating a custom 404 page for your GitHub Pages site You can display a custom 404 error page when people try to access nonexistent pages on your site. MIME types on GitHub Pages GitHub Pages supports more than 750 MIME types across 1,000s of file extensions. The list of supported MIME types is generated from the mime-db project, which aggregates MIME types from the Apache and Nginx projects as well as the official IANA list of internet content types. Should I rename <username.github.com> repositories to <username.github.io>? You do not need to rename old repositories from the .com name to the .io name, as GitHub Pages will continue to route the old repositories. However, we highly recommend that new repositories take the username.github.io format. Using a static site generator other than Jekyll You can use a static site generator other than Jekyll for your GitHub Pages site by using a different build process. Using submodules with Pages You can use submodules with GitHub Pages with a few conditions. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Creating a custom 404 page for your GitHub Pages site - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Customizing GitHub Pages / Creating a custom 404 page for your GitHub Pages site Creating a custom 404 page for your GitHub Pages site mac windows linux all You can display a custom 404 error page when people try to access nonexistent pages on your site. Navigate to your GitHub Pages repository. Switch to the master branch for a User/Organization Pages site, or to the gh-pages branch for a Project Pages site. Create a HTML file named 404.html or create a new Markdown file named 404.md at the root level of your GitHub Pages repository. In the YAML front matter of your new 404 file, add permalink: /404.html. Add the content you want to display to lost souls and weary travelers. Commit your changes and, if you're working on a local clone of your repository, push them up to GitHub. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Using syntax highlighting on GitHub Pages - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Customizing GitHub Pages / Using syntax highlighting on GitHub Pages Using syntax highlighting on GitHub Pages mac windows linux all You can have code snippets highlighted so that they are easier to read on your GitHub Pages site using Rouge, Jekyll's default syntax highlighter. Syntax highlighting on GitHub Pages works the same way it does on GitHub with GitHub flavored Markdown. For more information, see "Creating and highlighting code blocks." Rouge is Jekyll's default syntax highlighter and is compatible with the Pygments highlighter. If Pygments is set in your _config.yml file then your pages site will automatically build with Rouge as the default highlighter instead. For more information, see "Fixing highlighting errors." Further reading Rouge's supported languages and lexers Rouge highlighting code preview Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Using a static site generator other than Jekyll - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Customizing GitHub Pages / Using a static site generator other than Jekyll Using a static site generator other than Jekyll mac windows linux all You can use a static site generator other than Jekyll for your GitHub Pages site by using a different build process. GitHub Pages supports any HTML or static files you push to it so you can use any static site generator to build your site. You can even just push raw HTML files to GitHub Pages and it will build your site. You can also customize your own build process locally or on another server. The main difference between using Jekyll, a popular static site generator with built-in support for GitHub Pages and a different static site generator is the build process. For more information on Jekyll's simplified build process, see "About GitHub Pages and Jekyll." The build process for non-Jekyll sites Follow your static site generators' instructions to build your site locally. This may involve pushing your static files to a certain branch. Your static site generator builds your site locally. Push the built site's static files to your pages publishing branch (gh-pages or master depending on your site type). GitHub Pages publishes your site. Note: If you are using a static site generator other than Jekyll, consult their documentation on how to build your site locally before deploying your site to GitHub Pages. Your static site generator may have some different steps involved in building your site locally. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support MIME types on GitHub Pages - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Customizing GitHub Pages / MIME types on GitHub Pages MIME types on GitHub Pages mac windows linux all GitHub Pages supports more than 750 MIME types across 1,000s of file extensions. The list of supported MIME types is generated from the mime-db project, which aggregates MIME types from the Apache and Nginx projects as well as the official IANA list of internet content types. MIME types are additional headers that servers send to provide browsers with information about the types of files being requested and how to handle the file once downloaded. To add or modify MIME types for use on GitHub Pages, see the mime-db Contributing instructions. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Should I rename <username.github.com> repositories to <username.github.io>? - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Customizing GitHub Pages / Should I rename <username.github.com> repositories to <username.github.io>? Should I rename <username.github.com> repositories to <username.github.io>? mac windows linux all You do not need to rename old repositories from the .com name to the .io name, as GitHub Pages will continue to route the old repositories. However, we highly recommend that new repositories take the username.github.io format. Previously, repositories named username.github.com would become GitHub Pages. However, the new format for User and Organization Page repository names is username.github.io. While both formats are supported, we highly recommend new repositories use the username.github.io format. If both a username.github.io and a username.github.com repository exist, the username.github.io version is used. You do not need to rename old repositories from the .com name to the .io name, as GitHub Pages will continue to route the old repositories. However, keep in mind that a .com name will send you to a username.github.io website. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Using submodules with Pages - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Customizing GitHub Pages / Using submodules with Pages Using submodules with Pages mac windows linux all You can use submodules with GitHub Pages with a few conditions. If your GitHub Pages site repository contains submodules, they will automatically be pulled in when the Page is built. Submodule requirements You can only use submodules with GitHub Pages sites that point to public repositories. Using a submodule that points to a private repository is not possible because the Pages server cannot access private repositories. If you're adding a submodule to a private GitHub Pages repository, your pages site will still be published publicly. Make sure you use the https:// read-only URL for your submodules, including nested submodules. You can make this change in your .gitmodules file. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Using GitHub for your schoolwork - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Teaching and learning with GitHub Education / Using GitHub for your schoolwork Using GitHub for your schoolwork mac windows linux all As a student, use GitHub to collaborate on your school projects and build real-world experience. About GitHub Education for students GitHub Education offers students real-world experience with free access to various developer tools and private repositories on GitHub. Applying for a student developer pack As a student, you can apply for the Student Developer Pack, which offers a free subscription to various developer tools and a free Developer plan with unlimited private repositories for your personal user account for a year. Applying for a discount for your FIRST Robotics team As a student or educator, you can apply for a free Team plan, which allows unlimited users and private repositories for your FIRST robotics team's organization account with valid proof of your team participation. Why was my application for a student developer pack denied? Review common reasons that applications for a student discount are denied and learn tips for reapplying successfully. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support About GitHub Education for students - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Teaching and learning with GitHub Education / About GitHub Education for students About GitHub Education for students mac windows linux all GitHub Education offers students real-world experience with free access to various developer tools and private repositories on GitHub. Using GitHub for your school projects is a practical way to collaborate with others and build a portfolio that showcases real-world experience. As a student, you can apply for a Student Developer Pack, which offers a free Developer plan with unlimited private repositories for personal user accounts. The Student Developer Pack also offers free access to tools and services used by professional developers. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Applying for a student developer pack - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Teaching and learning with GitHub Education / Applying for a student developer pack Applying for a student developer pack mac windows linux all As a student, you can apply for the Student Developer Pack, which offers a free subscription to various developer tools and a free Developer plan with unlimited private repositories for your personal user account for a year. Requirements To be eligible for a Student Developer Pack, you must: Be currently enrolled in a degree or diploma granting course of study Have a verifiable school-issued email address or share documents that prove your current student status Have a GitHub user account Be at least 13 years old Your application will be processed more quickly if you add your academic email address to your account and verify your email address before applying for the Student Developer Pack. For more information, see "Adding an email address to your GitHub account" and "Verifying your email address." If you don’t have an academic email address, you can upload your school ID, academic transcript, or other proof of affiliation that shows at least one date to prove your current academic status. Note: You cannot transfer academic discounts from one account to another. If you have more than one account you want to apply the discount to, consider merging your user accounts and renaming the retained account if desired. For information about renewing your Student Developer Pack, see "Expiration and renewals." Go to GitHub's Student Developer Pack page and click Get your pack. Review the eligibility requirements. If you meet them, click Yes, I'm a student. Type your name. Verify your academic status. If you have a school-issued email address, use the drop-down menu and click the desired email address. If you don't have a school-issued email-address, use the drop-down menu and click I don't have a school-issued email address. Next, upload an image of your school or faculty ID, employment verification letter, academic transcript, or other proof of affiliation that shows at least one date to prove your current academic status. Enter the school name. Select your graduation year. Describe how you plan to use GitHub. Verify your application details, then click Submit Request. If your application is approved, you'll receive a confirmation email. Applications are usually processed within a few days, but it may take longer during peak times, such as during the start of a new semester. Expiration and renewals Once your Student Developer Pack access expires, you may reapply if you're still eligible, although some of our partner offers cannot renew. Most of the timed offers from our partners start once you set them up. For more information, see the Student Developer Pack page. To see when your free Developer plan expires, visit your account's billing settings. Further reading "Signing up for a new GitHub account" GitHub Education Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Applying for a discount for your FIRST Robotics team - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Teaching and learning with GitHub Education / Applying for a discount for your FIRST Robotics team Applying for a discount for your FIRST Robotics team mac windows linux all As a student or educator, you can apply for a free Team plan, which allows unlimited users and private repositories for your FIRST robotics team's organization account with valid proof of your team participation. To receive a FIRST Robotics Competition (FRC) discount you must have: A personal user account An organization account to use for your FIRST Robotics team Verification of your FRC team: Your FRC team number A link to your team page on the FIRST Robotics site A photo of a robot, banner, or something else displaying your team nickname If your discount request is approved, your organization is automatically upgraded to your new billing plan. After your discount expires, you may reapply for a discount if you're still eligible. Go to GitHub's Education page and click Request a discount. Select your academic role. Select Organization account, then click Next. To describe your organization's purpose, select Student group. Complete the form with information about your team. Under "Student group URL", use a link to your team page from the FIRST Robotics site. Then, click Next. Type your name. Verify your academic status. If you have a school-issued email address, use the drop-down menu and click the desired email address. If you don't have a school-issued email-address, use the drop-down menu and click I don't have a school-issued email address. Next, upload an image of your school or faculty ID, employment verification letter, academic transcript, or other proof of affiliation that shows at least one date to prove your current academic status. Enter the school name. If you're a student, select your graduation year. Describe how you plan to use GitHub in your FIRST Robotics team and include your FRC team number and a link to a photo of a robot, banner, or something else displaying your team nickname. Verify your application details, then click Submit Request. If your application is approved, you'll receive a confirmation email. Applications are usually processed within a few days, but it may take longer during peak times, such as during the start of a new semester. Further reading "GitHub Education" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Why was my application for a student developer pack denied? - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Teaching and learning with GitHub Education / Why was my application for a student developer pack denied? Why was my application for a student developer pack denied? mac windows linux all Review common reasons that applications for a student discount are denied and learn tips for reapplying successfully. Unclear academic affiliation documents If the image or document you uploaded doesn't clearly identify your current academic affiliation, your application will be denied. To reapply, you need to upload an image of your school ID, academic transcript, or other document showing your proof of affiliation that clearly shows at least one date to prove your current academic status. Using an academic email with an unverified domain If your academic email address has an unverified domain, you must reapply by uploading proof of your current academic affiliation. Use the "I do not have a school-issued email" drop-down option and upload an image of your school ID, academic transcript, or other official proof of affiliation that clearly shows at least one date to prove your current academic status. Academic email address already used If your academic email was already used to request a Student Developer Pack for a different GitHub account, you cannot reuse the academic email address to successfully apply for another Student Developer Pack until your discount expires. Note: It is against the GitHub Terms of Service to maintain more than one individual account. If you have more than one personal user account, you must merge your accounts. To retain the discount, keep the account that was granted the discount. You can rename the retained account and keep your contribution history by adding all your email addresses to the retained account. For more information, see: "Merging multiple user accounts" "Changing your GitHub username" "Adding an email address to your GitHub account" Requesting a student discount for a organization account To successfully apply for a Student Developer Pack, you must apply with your personal user account. If you apply for a Student Developer Pack with an organizational account, your application will be rejected. You can reapply at any time using your personal user account. As a student, you can use private repositories in your personal user account to work in teams by adding collaborators. To learn more, see "Adding collaborators to a personal repository." You may ask your teacher to create an organization account for classroom use. Educators with proof of school affiliation may apply for free private repositories. If you're a part of an official research organization or school club that is ongoing, you may ask your faculty advisor to apply for a researcher discount. Ineligible student status You're ineligible for a Student Developer Pack if: You're enrolled in an informal learning program, such as a coding school or bootcamp and not enrolled in a degree or diploma granting course of study. You're under 13 years old. Your instructor may still apply for a GitHub Education discount for classroom use. Further reading "Applying for a student developer pack" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Using GitHub in your classroom and research - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Teaching and learning with GitHub Education / Using GitHub in your classroom and research Using GitHub in your classroom and research mac windows linux all As an educator or researcher, use GitHub to collaborate on your work in a classroom, student or research group, and more. About GitHub Education for educators and researchers GitHub Education offers a variety of tools to help educators and researchers work more effectively inside and outside of the classroom. Applying for a classroom discount If you're an educator, you can apply for a free Team plan, which allows unlimited users and private repositories for your classroom's organization account. Applying for a discount for your school club As an educator, you can apply for a free Team plan, which allows unlimited users and private repositories for your student club's GitHub organization. Applying for an academic research discount As an academic researcher, you can apply for a free Team plan for your organization account and a free Developer plan for your personal user account. Why was my application for an educator or researcher discount denied? Review common reasons that applications for an educator or researcher discount are denied and learn tips for reapplying successfully. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support About GitHub Education for educators and researchers - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Teaching and learning with GitHub Education / About GitHub Education for educators and researchers About GitHub Education for educators and researchers mac windows linux all GitHub Education offers a variety of tools to help educators and researchers work more effectively inside and outside of the classroom. GitHub Education for educators With GitHub Education's tools and services for educators of all levels, you can: Use GitHub Classroom to distribute code, give students feedback, and collect assignments on GitHub. Join our Education Community to discuss current trends in technology education with your peers from around the world. Access and adapt our open source lesson plans for teaching Git and GitHub. Request a GitHub swag bag with educational materials and goodies for your students. Apply for unlimited free private repositories for your classroom or student group. GitHub Education for Researchers With GitHub Education's tools and services for researchers, you can: Collaborate with others on your research work around the world on GitHub. Learn how academic institutions around the world are using GitHub for their research. Apply for unlimited free private repositories for your academic research work. GitHub Education for other academic uses If you're not a researcher, educator, or student, you can still apply for a 25% discount for all other academic use cases. This includes administration, departmental use, and pretty much anything else. Students can apply for the student developer pack. Discounts for educators and researchers Educational role Purpose Discount type Non-faculty staff (Administration, IT, etc.) Departmental use, other valid education-related purpose 25% off of the Team plan for organization accounts or the Developer plan for personal user accounts Faculty or educator Managing a valid classroom or student group Free Team plan for organization accounts, which allows unlimited users and private repositories. Free Developer plan, which allows unlimited private repositories for personal user accounts Researcher Non-profit academic research Free Team plan for organization accounts, which allows unlimited users and private repositories. Free Developer plan, which allows unlimited private repositories for personal user accounts Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Applying for a classroom discount - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Teaching and learning with GitHub Education / Applying for a classroom discount Applying for a classroom discount mac windows linux all If you're an educator, you can apply for a free Team plan, which allows unlimited users and private repositories for your classroom's organization account. To apply for an education discount for your classroom, you must: Have a personal user account Have an organization account to use for your classroom discount Be an educator or faculty member Have a verifiable school-issued email address or share documents that prove your school affiliation If your discount request is approved, your organization is automatically upgraded to your new billing plan. After your discount expires, you may reapply for a discount if you're still eligible. Go to GitHub's Education page and click Request a discount. Select your academic role. Select Organization account, then click Next. Use the organization drop-down menu, and click the organization you want to apply the education discount to. To describe your organization's purpose, select Classroom. Complete the form with information about your class, including the number of private repositories you need, then click Next. Type your name. Verify your academic status. If you have a school-issued email address, use the drop-down menu and click the desired email address. If you don't have a school-issued email-address, use the drop-down menu and click I don't have a school-issued email address. Next, upload an image of your school or faculty ID, employment verification letter, academic transcript, or other proof of affiliation that shows at least one date to prove your current academic status. Enter the school name. Describe how you plan to use GitHub in your classroom. Verify your application details, then click Submit Request. If your application is approved, you'll receive a confirmation email. Applications are usually processed within a few days, but it may take longer during peak times, such as during the start of a new semester. Further reading GitHub Education Classroom guide GitHub Classroom Videos Education Community Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Applying for a discount for your school club - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Teaching and learning with GitHub Education / Applying for a discount for your school club Applying for a discount for your school club mac windows linux all As an educator, you can apply for a free Team plan, which allows unlimited users and private repositories for your student club's GitHub organization. To apply for an education discount for your school club, you must: Have a personal user account Have an organization account to use for your school club discount Be an educator or faculty member Have a verifiable school-issued email address or share documents that prove your school affiliation If your discount request is approved, your organization is automatically upgraded to your new billing plan. After your discount expires, you may reapply for a discount if you're still eligible. Go to GitHub's Education page and click Request a discount. Select your academic role. Select Organization account, then click Next. Use the organization drop-down menu, and click the organization you want to apply the education discount to. To describe your organization's purpose, select Student group. Complete the form with information about your student group, answer any questions, then click Next. Type your name. Verify your academic status. If you have a school-issued email address, use the drop-down menu and click the desired email address. If you don't have a school-issued email-address, use the drop-down menu and click I don't have a school-issued email address. Next, upload an image of your school or faculty ID, employment verification letter, academic transcript, or other proof of affiliation that shows at least one date to prove your current academic status. Enter the school name. Describe how you plan to use GitHub in your school club. Verify your application details, then click Submit Request. If your application is approved, you'll receive a confirmation email. Applications are usually processed within a few days, but it may take longer during peak times, such as during the start of a new semester. Further reading "Differences between user and organization accounts" GitHub Education Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Applying for an academic research discount - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Teaching and learning with GitHub Education / Applying for an academic research discount Applying for an academic research discount mac windows linux all As an academic researcher, you can apply for a free Team plan for your organization account and a free Developer plan for your personal user account. To apply for an academic research discount, you must: Have a personal user account Have a verifiable school-issued email address or share documents that prove your school affiliation If you're applying for a free Team plan for an organization you must also have an organization account, which you can set up on the free plan. If your discount request is approved, your organization will be automatically upgraded to the Team plan. After your discount expires, you may reapply for a discount if you're still eligible. Applying for a free Developer plan for your personal account Go to GitHub's Education page and click Request a discount. Select Researcher. To apply this discount to your personal account, select Individual account and click Next. Type your name. Verify your academic status. If you have a school-issued email address, use the drop-down menu and click the desired email address. If you don't have a school-issued email-address, use the drop-down menu and click I don't have a school-issued email address. Next, upload an image of your school or faculty ID, employment verification letter, academic transcript, or other proof of affiliation that shows at least one date to prove your current academic status. Enter the school name. Describe how you plan to use GitHub in your research group. Verify your application details, then click Submit Request. If your application is approved, you'll receive a confirmation email. Applications are usually processed within a few days, but it may take longer during peak times, such as during the start of a new semester. Applying for a free Team plan for your organization Go to GitHub's Education page and click Request a discount. Select Researcher. To apply this discount to your organization, select Organization account and click Next. Use the organization drop-down menu, and click the organization you want to apply the education discount to. To describe your organization's purpose, select Research group. Complete the form with information about your research group and answer all questions, then click Next. Type your name. Verify your academic status. If you have a school-issued email address, use the drop-down menu and click the desired email address. If you don't have a school-issued email-address, use the drop-down menu and click I don't have a school-issued email address. Next, upload an image of your school or faculty ID, employment verification letter, academic transcript, or other proof of affiliation that shows at least one date to prove your current academic status. Enter the school name. Describe how you plan to use GitHub in your research group. Verify your application details, then click Submit Request. If your application is approved, you'll receive a confirmation email. Applications are usually processed within a few days, but it may take longer during peak times, such as during the start of a new semester. Further reading "Differences between user and organization accounts" GitHub Education Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Why was my application for an educator or researcher discount denied? - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Teaching and learning with GitHub Education / Why was my application for an educator or researcher discount denied? Why was my application for an educator or researcher discount denied? mac windows linux all Review common reasons that applications for an educator or researcher discount are denied and learn tips for reapplying successfully. Unclear proof of affiliation documents If the image or document you uploaded doesn't clearly identify your current employment with a school or university, you must reapply by uploading an image of your faculty ID or employment verification letter with clear information. Using an academic email with an unverified domain If your academic email address has an unverified domain, you must reapply by uploading proof of your current employment. When you reapply, use the "I do not have a school-issued email" drop-down option and upload an image of your faculty ID or employment verification letter. Non-student applying for Student Developer Pack If you're a not a student, you're not eligible for the partner offers that come with the Student Developer Pack. You can reapply for an applicable discount. Using the wrong account type To successfully apply for a discount for your classroom or school club, you must apply using an organization account. You can create an organization account on the free plan and if your discount request is approved, your organization will be automatically upgraded to the Team plan. For more information, see "Creating a new organization from scratch." Further reading "Applying for an academic research discount" "Applying for a classroom discount" "Applying for a discount for your school club" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support How to write a great job post - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Jobs / How to write a great job post How to write a great job post mac windows linux all Here are some guidelines for writing a great job post for GitHub Jobs. Title Give your job post a title that sets it apart from others. Try to mention the language or technologies the job requires. For example, instead of writing Looking for a good developer You may want to try something more descriptive: Seeking bad-ass Ruby specialist for working on rockets Job description Position It's important to the reader of the job posting to understand everything they can about the position before contacting you. Try to answer the following questions in your job description: What is the position all about? What are the intriguing aspects to the position? What will the candidate be responsible for? Will the candidate work with a great team or use some new tools? Company You should try to describe what makes your company stand above all the others. What kind of culture do you have? For example, at GitHub, everyone manages their own time. Similar qualities could be something to include in your job post. When talking about your company, don't be shy. You should mention anything you are proud of and that differentiates your company from others. Benefits Mentioning benefits will help demonstrate how much you care for employees. Talk about any health benefits for employees and their partners, as well as any general benefits to working for you. Skills When listing skills, avoid including every available technology. Simply listing the main ones in order of importance will help potential candidates scan the list quickly. Ideally, someone who already does the job should proofread your posting and be able to answer the following questions: What is a list of skills that makes sense considering the skill level of the candidate? What skills are mandatory? If there are secondary skills that you'd like candidates to have or to learn, how important are they? Length The total length of the job post is something you should definitely think about. Shorter is always better. After writing your description, edit it down. Format The format of your job post really matters. GitHub Jobs supports writing in the standard Markdown format. You should consider using bullet points, links, and headers to make your post more legible. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support About GitHub Support - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Working with GitHub Support / About GitHub Support About GitHub Support mac windows linux all GitHub Support can help you troubleshoot issues you run into while using GitHub. You can contact GitHub Support anytime. For information about support for organizations on the Business plan, see "Business plan support." Ask and answer questions in the GitHub Community Forum You can connect with developers around the world in the GitHub Community Forum to ask and answer questions, learn, and interact directly with GitHub staff. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Business plan support - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Working with GitHub Support / Business plan support Business plan support mac windows linux all The Business plan includes a target eight-hour response time for priority support requests, Monday to Friday in your local time zone. You can submit priority questions if you have purchased a Business plan for your organization or if you're a member, outside collaborator, or billing manager of a GitHub organization currently subscribed to the Business plan. Questions that qualify for priority responses: Include questions related to your inability to access or use GitHub's core version control functionality Include situations related to your account security Do not include peripheral services and features, such as questions about Gists, GitHub Pages, or email notifications Do not include questions about organizations not currently on the Business plan To qualify for a priority response, you must: Submit your question to GitHub Support from a verified email address that's associated with an organization currently on the Business plan Submit a new support ticket for each individual priority situation Submit your question from Monday-Friday in your local time zone Understand that the response to a priority question will be received via email Cooperate with GitHub Support and provide all of the information that GitHub Support asks for Tip: Questions do not qualify for a priority response if they are submitted on a local holiday in your jurisdiction. The target eight-hour response time: Begins when GitHub receives your qualifying question Does not begin until you have provided sufficient information to answer the question, unless you specifically indicate that you do not have sufficient information Does not apply on weekends in your local timezone or local holidays in your jurisdiction Note: GitHub Support does not guarantee a resolution to your priority question. GitHub Support may escalate or deescalate issues to or from priority question status, based on our reasonable evaluation of the information you give to us. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support GitHub Marketplace support - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Working with GitHub Support / GitHub Marketplace support GitHub Marketplace support mac windows linux all For help with purchasing or paying for an app from GitHub Marketplace, contact GitHub Support. For help using a GitHub Marketplace app, contact the app's provider. Contacting your app's provider for support Every app in GitHub Marketplace includes a link to contact the app's support team. At the top of any page, click Marketplace. Browse to your app's page. In the left sidebar, under "Developer tools," click Support. On the app's support page, follow the instructions on the app's page to contact the app's support team. Further reading "About GitHub Marketplace" "Purchasing and installing apps in GitHub Marketplace" "Managing your personal account's apps" "Managing your organization's apps" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support About GitHub's use of your data - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Understanding how GitHub uses and protects your data / About GitHub's use of your data About GitHub's use of your data mac windows linux all GitHub uses your repository's data to connect you to relevant tools, people, projects, and information. GitHub aggregates metadata and parses content patterns for the purposes of delivering generalized insights within the product. It uses data from public repositories, and also uses metadata and aggregate data from private repositories when a repository's owner has chosen to share the data with GitHub through an opt-in. If you opt a private repository into data use, then it will perform read-only analysis of that specific private repository. If you opt in to data use, we will continue to treat your private data, source code, or trade secrets as confidential and private consistent with our Terms of Service. The information we learn only comes from aggregated data. For more information, see "Opting into or out of data use for your private repository." We'll announce substantial new features that use metadata or aggregate data on the GitHub blog. How data improves security recommendations As an example of how your data might be used, we can detect and alert you to a security vulnerability in your public repository's dependencies. For more information, see "About security alerts for vulnerable dependencies." To detect potential security vulnerabilities, GitHub scans the contents of your dependency manifest file to draw a list of your project's dependencies. GitHub also learns from changes you make to your dependency manifest. For example, if you upgrade a vulnerable dependency to a safe version after getting a security alert and others do the same, GitHub learns how to patch the vulnerability and can recommend a similar patch to affected repos. Privacy and data sharing Private repository data is scanned by machine and never read by GitHub staff. Human eyes will never see the contents of your private repositories, except as described in our Terms of Service. Your individual personal or repository data will not be shared with third parties. We may share aggregate data learned from our analysis with our partners. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Opting into or out of data use for your private repository - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Understanding how GitHub uses and protects your data / Opting into or out of data use for your private repository Opting into or out of data use for your private repository mac windows linux all To help GitHub connect you to relevant tools, people, projects, and information, you can opt into data use for your private repository. If you have opted into data use for your private repository and no longer want GitHub to use your data, you can opt out. When you opt in to data use for your private repository, you'll be able to access the dependency graph, where you can track your repository's dependencies and receive security alerts when GitHub detects vulnerable dependencies. For more information, see "About security alerts for vulnerable dependencies." Opting into data use for your private repository On GitHub, navigate to the main page of the repository. Under your repository name, click Settings. Under "Data services," select Allow GitHub to perform read-only analysis of this repository. Optionally, select the checkbox next to any additional services you'd like to enable data use for. Opting out of data use for your private repository Tip: To opt out of data use for specific services, unselect the checkbox next to the service. On GitHub, navigate to the main page of the repository. Under your repository name, click Settings. Under "Data services," unselect Allow GitHub to perform read-only analysis of this repository. Further reading "About GitHub's use of your data" "Viewing and updating vulnerable dependencies in your repository "Managing alerts for vulnerable dependencies in your organization's repositories" Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support GitHub Logo Policy - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Site Policy / GitHub Logo Policy GitHub Logo Policy mac windows linux all You can add GitHub logos to your website or third-party application in some scenarios. For more information and specific guidelines on logo usage, see the GitHub Logos and Usage page. You can also use an octocat as your personal avatar or on your website to link to your GitHub account, but not for your company or a product you're building. GitHub has an extensive collection of octocats in the Octodex. For more information on using the octocats from the Octodex, see the Octodex FAQ. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Name Squatting Policy - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Site Policy / Name Squatting Policy Name Squatting Policy mac windows linux all GitHub account names are provided on a first-come, first-served basis, and are intended for immediate and active use. Account names may not be inactively held for future use. GitHub account name squatting is prohibited. Inactive accounts may be renamed or removed by GitHub staff at their discretion. Keep in mind that not all activity on GitHub is publicly visible. Staff will not remove or rename any active account. Attempts to sell, buy, or solicit other forms of payment in exchange for account names are prohibited and may result in permanent account suspension. If you believe someone's account is violating your trademark rights, you can find more information about making a trademark complaint on our Trademark Policy page. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support DMCA Takedown Policy - User Documentation <meta name="Description" content="Welcome to GitHub's Guide to the Digital Millennium Copyright Act, commonly known as the \"DMCA.\" This page is not meant as a comprehensive primer to the statute. However, if you've received a DMCA ta…"> GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Site Policy / DMCA Takedown Policy DMCA Takedown Policy mac windows linux all Welcome to GitHub's Guide to the Digital Millennium Copyright Act, commonly known as the "DMCA." This page is not meant as a comprehensive primer to the statute. However, if you've received a DMCA takedown notice targeting content you've posted on GitHub or if you're a rights-holder looking to issue such a notice, this page will hopefully help to demystify the law a bit as well as our policies for complying with it. (If you just want to submit a notice, you can skip to the end.) As with all legal matters, it is always best to consult with a professional about your specific questions or situation. We strongly encourage you to do so before taking any action that might impact your rights. This guide isn't legal advice and shouldn't be taken as such. What Is the DMCA? In order to understand the DMCA and some of the policy lines it draws, it's perhaps helpful to consider life before it was enacted. Before the DMCA, an Internet-based service provider like GitHub could be liable for copyright infringement in the United States just for hosting its users' pictures, music, videos or code. This was true even if it had no actual knowledge of any infringing content. This was a problem, since even a single claim of copyright infringement can carry statutory damages of up to $150,000. With potential damages that high multiplied across millions of users, cloud-computing and user-generated content sites like YouTube, Facebook or GitHub probably never would have existed (or at least not without passing some of that cost downstream to their users). The DMCA attempted to fix this problem by creating a so-called copyright liability "safe harbor" for internet service providers hosting allegedly infringing user-generated content. (See U.S. Code, Title 17, Section 512.) Essentially, so long as a service provider follows the DMCA's notice-and-takedown rules, it won't be liable for copyright infringement based on user-generated content. Because of this it is important for GitHub to maintain its DMCA safe-harbor status. DMCA Notices In a Nutshell The DMCA provides two simple, straightforward procedures that all GitHub users should know about: (i) a takedown-notice procedure for copyright holders to request that content be removed; and (ii) a counter-notice procedure for users to get content reenabled when content is taken down by mistake. DMCA takedown notices are used by copyright owners to ask GitHub to take down infringing content. If you are a software designer or developer, you create copyrighted content every day. If someone else is using your copyrighted content in an unauthorized manner on GitHub you can send us a DMCA takedown notice to request that the infringing content be changed or removed. On the other hand, counter notices can be used to correct mistakes. Maybe the person sending the takedown notice does not hold the copyright or did not realize that you have a license or made some other mistake in their takedown notice. Since GitHub usually cannot know if there has been a mistake, the DMCA counter notice allows you to let us know and ask that we put the content back up. A. How Does This Actually Work? The DMCA framework is a bit like passing notes in class. The copyright owner hands GitHub a complaint about a user. If it's written correctly, we pass the complaint along to the user. If the user disputes the complaint, they can pass a note back saying so. GitHub exercises little discretion in the process other than determining whether the notices meet the minimum requirements of the DMCA. It is up to the parties (and their lawyers) to evaluate the merit of their claims, bearing in mind that notices must be made under penalty of perjury. Here are the basic steps in the process. Copyright Owner Investigates. A copyright owner should always conduct an initial investigation to confirm both (a) that they own the copyright to an original work and (b) that the content on GitHub is unauthorized and infringing. Example: An employee of Acme Web Company finds some of the company's code in a GitHub repository. Acme Web Company licenses its source code out to several trusted partners. Before sending in a take-down notice, Acme should review those licenses and its agreements to confirm that the code on GitHub is not authorized under any of them. Copyright Owner Sends A Notice. After conducting an investigation, a copyright owner prepares and sends a takedown notice to GitHub. Assuming the takedown notice is sufficiently detailed according to the statutory requirements (as explained in the how-to guide), we will post the notice to our public repository and pass the link along to the affected user. GitHub Asks User to Make Changes. If the notice alleges that the entire contents of a repository infringe, we will skip to Step 6 and disable the entire repository expeditiously. Otherwise, because GitHub cannot disable access to specific files within a repository, we will contact the user who created the repository and give them approximately 24 hours to delete or modify the content specified in the notice. We'll notify the copyright owner if and when we give the user a chance to make changes. User Notifies GitHub of Changes. If the user chooses to make the specified changes, they must tell us so within the approximately 24-hour window. If they don't, we will disable the repository (as described in Step 6). If the user notifies us that they made changes, we will verify that the changes have been made and then notify the copyright owner. Copyright Owner Revises or Retracts the Notice. If the user makes changes, the copyright owner must review them and renew or revise their takedown notice if the changes are insufficient. GitHub will not take any further action unless the copyright owner contacts us to either renew the original takedown notice or submit a revised one. If the copyright owner is satisfied with the changes, they may either submit a formal retraction or else do nothing. GitHub will interpret silence longer than two weeks as an implied retraction of the takedown notice. GitHub May Disable Access to the Content. GitHub will disable a user's content if: (i) the copyright owner has alleged copyright over the user's entire repository (as noted in Step 3); (ii) the user has not made any changes after being given an opportunity to do so (as noted in Step 4); or (iii) the copyright owner has renewed their takedown notice after the user had a chance to make changes. If the copyright owner chooses instead to revise the notice, we will go back to Step 2 and repeat the process as if the revised notice were a new notice. User May Send A Counter Notice. We encourage users who have had content disabled to consult with a lawyer about their options. If a user believes that their content was disabled as a result of a mistake or misidentification, they may send us a counter notice. As with the original notice, we will make sure that the counter notice is sufficiently detailed (as explained in the how-to guide). If it is, we will post it to our public repository and pass the notice back to the copyright owner by sending them the link. Copyright Owner May File a Legal Action. If a copyright owner wishes to keep the content disabled after receiving a counter notice, they will need to initiate a legal action seeking a court order to restrain the user from engaging in infringing activity relating to the content on GitHub. In other words, you might get sued. If the copyright owner does not give GitHub notice within 10-14 days, by sending a copy of a valid legal complaint filed in a court of competent jurisdiction, GitHub will reenable the disabled content. B. What About Forks? (or What's a Fork?) One of the best features of GitHub is the ability for users to "fork" one another's repositories. What does that mean? In essence, it means that users can make a copy of a project on GitHub into their own repositories. As the license or the law allows, users can then make changes to that fork to either push back to the main project or just keep as their own variation of a project. Each of these copies is a "fork" of the original repository, which in turn may also be called the "parent" of the fork. GitHub will not automatically disable forks when disabling a parent repository. This is because forks belong to different users, may have been altered in significant ways, and may be licensed or used in a different way that is protected by the fair-use doctrine. GitHub does not conduct any independent investigation into forks. We expect copyright owners to conduct that investigation and, if they believe that the forks are also infringing, expressly include forks in their takedown notice. C. What If I Inadvertently Missed the Window to Make Changes? We recognize that there are many valid reasons that you may not be able to make changes within the approximate 24-hour window we provide before your repository gets disabled. Maybe our message got flagged as spam, maybe you were on vacation, maybe you don't check that email account regularly, or maybe you were just busy. We get it. If you respond to let us know that you would have liked to make the changes, but somehow missed the first opportunity, we will re-enable the repository one additional time for approximately 24 hours to allow you to make the changes. Again, you must notify us that you have made the changes in order to keep the repository enabled after that 24-hour window, as noted above in Step A.4. Please note that we will only provide this one additional chance. D. Transparency We believe that transparency is a virtue. The public should know what content is being removed from GitHub and why. An informed public can notice and surface potential issues that would otherwise go unnoticed in an opaque system. We post redacted copies of any legal notices we receive (including original notices, counter notices or retractions) at https://github.com/github/dmca. We will not publicly publish your personal contact information; we will remove personal information (except for usernames in URLs) before publishing notices. We will not, however, redact any other information from your notice unless you specifically ask us to. Here are some examples of a published notice and counter notice for you to see what they look like. When we remove content, we will post a link to the related notice in its place. Please also note that, although we will not publicly publish unredacted notices, we may provide a complete unredacted copy of any notices we receive directly to any party whose rights would be affected by it. E. Repeated Infringement It is the policy of GitHub, in appropriate circumstances and in its sole discretion, to disable and/or terminate the accounts of users who may infringe upon the copyrights or other intellectual property rights of GitHub and/or others. F. Submitting Notices If you are ready to submit a notice or a counter notice: How to Submit a DMCA Notice How to Submit a DMCA Counter Notice Learn More and Speak Up If you poke around the Internet, it is not too hard to find commentary and criticism about the copyright system in general and the DMCA in particular. While GitHub acknowledges and appreciates the important role that the DMCA has played in promoting innovation online, we believe that the copyright laws could probably use a patch or two—if not a whole new release. In software, we are constantly improving and updating our code. Think about how much technology has changed since 1998 when the DMCA was written. Doesn't it just make sense to update these laws that apply to software? We don't presume to have all the answers. But if you are curious, here are a few links to scholarly articles and blog posts we have found with opinions and proposals for reform: Unintended Consequences: Twelve Years Under the DMCA (Electronic Frontier Foundation) Statutory Damages in Copyright Law: A Remedy in Need of Reform (William & Mary Law Review) Is the Term of Protection of Copyright Too Long? (The 1709 Blog) If We're Going to Change DMCA's 'Notice & Takedown,' Let's Focus on How Widely It's Abused (TechDirt) Opportunities for Copyright Reform (Cato Unbound) Fair Use Doctrine and the Digital Millennium Copyright Act: Does Fair Use Exist on the Internet Under the DMCA? (Santa Clara Law Review) GitHub doesn't necessarily endorse any of the viewpoints in those articles. We provide the links to encourage you to learn more, form your own opinions, and then reach out to your elected representative(s) (e.g, in the U.S. Congress or E.U. Parliament) to seek whatever changes you think should be made. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Guide to Submitting a DMCA Takedown Notice - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Site Policy / Guide to Submitting a DMCA Takedown Notice Guide to Submitting a DMCA Takedown Notice mac windows linux all This guide describes the information that GitHub needs in order to process a DMCA takedown request. If you have more general questions about what the DMCA is or how GitHub processes DMCA takedown requests, please review our DMCA Takedown Policy. Due to the type of content GitHub hosts (mostly software code) and the way that content is managed (with Git), we need complaints to be as specific as possible. These guidelines are designed to make the processing of alleged infringement notices as straightforward as possible. Our form of notice set forth below is consistent with the form suggested by the DMCA statute, which can be found at the U.S. Copyright Office's official website: http://www.copyright.gov. As with all legal matters, it is always best to consult with a professional about your specific questions or situation. We strongly encourage you to do so before taking any action that might impact your rights. This guide isn't legal advice and shouldn't be taken as such. Before You Start Tell the Truth. The DMCA requires that you swear to the facts in your copyright complaint under penalty of perjury. It is a federal crime to intentionally lie in a sworn declaration. (See U.S. Code, Title 18, Section 1621.) Submitting false information could also result in civil liability—that is, you could get sued for money damages. Investigate. Millions of users and organizations pour their hearts and souls into the projects they create and contribute to on GitHub. Filing a DMCA complaint against such a project is a serious legal allegation that carries real consequences for real people. Because of that, we ask that you conduct a thorough investigation and consult with an attorney before submitting a takedown to make sure that the use isn't actually permissible. Ask Nicely First. A great first step before sending us a takedown notice is to try contacting the user directly. They may have listed contact information on their public profile page or in the repository's README, or you could get in touch by opening an issue or pull request on the repository. This is not strictly required, but it is classy. Code Is Different From Other Creative Content. GitHub is built for collaboration on software code. This makes identifying a valid copyright infringement more complicated than it might otherwise be for, say, photos, music, or videos. For instance: A repository may include bits and pieces of code from many different people, but only one file or even a sub-routine within a file infringes your copyrights. Code mixes functionality with creative expression, but copyright only protects the expressive elements. There are often licenses to consider. Just because a piece of code has a copyright notice does not necessarily mean that it is infringing. It is possible that the code is being used in accordance with an open-source license. A particular use may be fair-use if it only uses a small amount of copyrighted content, uses that content in a transformative way, uses it for educational purposes, or some combination of the above. Because code naturally lends itself to such uses, each use case is different and must be considered separately. Code may be alleged to infringe, not because it is a direct copy, but because it is used to circumvent access controls. This list isn't exhaustive, which is why speaking to a legal professional about your proposed complaint is doubly important when dealing with code. No Bots. You should have a trained professional evaluate the facts of every takedown notice you send. If you are outsourcing your efforts to a third party, make sure you know how they operate, and make sure they are not using automated bots to submit complaints in bulk. These complaints are often invalid and processing them results in needlessly taking down projects! You May Receive a Counter Notice. Any user affected by your takedown notice may decide to submit a counter notice. If they do, we will re-enable their content within 10-14 days unless you notify us that you have initiated a legal action seeking to restrain the user from engaging in infringing activity relating to the content on GitHub. Your Complaint Will Be Published. As noted in our DMCA Takedown Policy, after redacting personal information, we publish all complete and actionable takedown notices at https://github.com/github/dmca. GitHub Isn't The Judge. GitHub exercises little discretion in the process other than determining whether the notices meet the minimum requirements of the DMCA. It is up to the parties (and their lawyers) to evaluate the merit of their claims, bearing in mind that notices must be made under penalty of perjury. Your Complaint Must ... Include the following statement: "I have read and understand GitHub's Guide to Filing a DMCA Notice." We won't refuse to process an otherwise complete complaint if you don't include this statement. But we'll know that you haven't read these guidelines and may ask you to go back and do so. Identify the copyrighted work you believe has been infringed. This information is important because it helps the affected user evaluate your claim and give them the ability to compare your work to theirs. The specificity of your identification will depend on the nature of the work you believe has been infringed. If you have published your work, you might be able to just link back to a web page where it lives. If it is proprietary and not published, you might describe it and explain that it is proprietary. If you have registered it with the Copyright Office, you should include the registration number. If you are alleging that the hosted content is a direct, literal copy of your work, you can also just explain that fact. Identify the material that you allege is infringing the copyrighted work listed in item #2, above. It is important to be as specific as possible in your identification. This identification needs to be reasonably sufficient to permit GitHub to locate the material. At a minimum, this means that you should include the URL to the material allegedly infringing your copyright. If you allege that less than a whole repository infringes, identify the specific file(s) or line numbers within a file that you allege infringe. If you allege that all of the content at a URL infringes, please be explicit about that as well. Finally, please note that GitHub will not automatically disable forks when disabling a parent repository. If you have investigated and analyzed the forks of a repository and believe that they are also infringing, please explicitly identify each allegedly infringing fork. Please also confirm that you have investigated each individual case and that your sworn statements apply to each identified fork. Explain what the affected user would need to do in order to remedy the infringement. Again, specificity is important. When we pass your complaint along to the user, this will tell them what they need to do in order to avoid having the rest of their content disabled. Does the user just need to add a statement of attribution? Do they need to delete certain lines within their code, or entire files? Of course, we understand that in some cases, all of a user's content may be alleged to infringe and there's nothing they could do short of deleting it all. If that's the case, please make that clear as well. Provide your contact information. Include your email address, name, telephone number and physical address. Provide contact information, if you know it, for the alleged infringer. Usually this will be satisfied by providing the GitHub username associated with the allegedly infringing content. But there may be cases where you have additional knowledge about the alleged infringer. If so, please share that information with us. Include the following statement: "I have a good faith belief that use of the copyrighted materials described above on the infringing web pages is not authorized by the copyright owner, or its agent, or the law. I have taken fair use into consideration." Also include the following statement: "I swear, under penalty of perjury, that the information in this notification is accurate and that I am the copyright owner, or am authorized to act on behalf of the owner, of an exclusive right that is allegedly infringed." Include your physical or electronic signature. How to Submit Your Complaint The fastest way to get a response is to enter your information and answer all the questions on our Copyright claims form. You can also send an email notification to copyright@github.com. You may include an attachment if you like, but please also include a plain-text version of your letter in the body of your message. If you must send your notice by physical mail, you can do that too, but it will take substantially longer for us to receive and respond to it. Notices we receive via plain-text email have a much faster turnaround than PDF attachments or physical mail. If you still wish to mail us your notice, our physical address is: GitHub, Inc Attn: DMCA Agent 88 Colin P Kelly Jr St San Francisco, CA. 94107 Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Guide to Submitting a DMCA Counter Notice - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Site Policy / Guide to Submitting a DMCA Counter Notice Guide to Submitting a DMCA Counter Notice mac windows linux all This guide describes the information that GitHub needs in order to process a counter notice to a DMCA takedown request. If you have more general questions about what the DMCA is or how GitHub processes DMCA takedown requests, please review our DMCA Takedown Policy. If you believe your content on GitHub was mistakenly disabled by a DMCA takedown request, you have the right to contest the takedown by submitting a counter notice. If you do, we will wait 10-14 days and then re-enable your content unless the copyright owner initiates a legal action against you before then. Our counter-notice form, set forth below, is consistent with the form suggested by the DMCA statute, which can be found at the U.S. Copyright Office's official website: http://www.copyright.gov. As with all legal matters, it is always best to consult with a professional about your specific questions or situation. We strongly encourage you to do so before taking any action that might impact your rights. This guide isn't legal advice and shouldn't be taken as such. Before You Start Tell the Truth. The DMCA requires that you swear to your counter notice under penalty of perjury. It is a federal crime to intentionally lie in a sworn declaration. (See U.S. Code, Title 18, Section 1621.) Submitting false information could also result in civil liability—that is, you could get sued for money damages. Investigate. Submitting a DMCA counter notice can have real legal consequences. If the complaining party disagrees that their takedown notice was mistaken, they might decide to file a lawsuit against you to keep the content disabled. You should conduct a thorough investigation into the allegations made in the takedown notice and probably talk to a lawyer before submitting a counter notice. You Must Have a Good Reason to Submit a Counter Notice. In order to file a counter notice, you must have "a good faith belief that the material was removed or disabled as a result of mistake or misidentification of the material to be removed or disabled." (U.S. Code, Title 17, Section 512(g).) Whether you decide to explain why you believe there was a mistake is up to you and your lawyer, but you do need to identify a mistake before you submit a counter notice. In the past, we have received counter notices citing mistakes in the takedown notice such as: the complaining party doesn't have the copyright; I have a license; the code has been released under an open-source license that permits my use; or the complaint doesn't account for the fact that my use is protected by the fair-use doctrine. Of course, there could be other defects with the takedown notice. Copyright Laws Are Complicated. Sometimes a takedown notice might allege infringement in a way that seems odd or indirect. Copyright laws are complicated and can lead to some unexpected results. In some cases a takedown notice might allege that your source code infringes because of what it can do after it is compiled and run. For example: The law says that it is infringement to distribute software that is used to circumvent access controls to copyrighted works. Sometimes distributing software can be copyright infringement, if you induce end users to use the software to infringe copyrighted works. A copyright complaint might also be based on non-literal copying of design elements in the software, rather than the source code itself—in other words, they think your design looks too similar to theirs. These are just a few examples of the complexities of copyright law. Since there are many nuances to the law and some unsettled questions in these types of cases, it is especially important to get professional advice if the infringement allegations do not seem straightforward. A Counter Notice Is A Legal Statement. We require you to fill out all fields of a counter notice completely, because a counter notice is a legal statement — not just to us, but to the complaining party. As we mentioned above, if the complaining party wishes to keep the content disabled after receiving a counter notice, they will need to initiate a legal action seeking a court order to restrain you from engaging in infringing activity relating to the content on GitHub. In other words, you might get sued (and you consent to that in the counter notice). Your Counter Notice Will Be Published. As noted in our DMCA Takedown Policy, after redacting personal information, we publish all complete and actionable counter notices at https://github.com/github/dmca. Please also note that, although we will only publicly publish redacted notices, we may provide a complete unredacted copy of any notices we receive directly to any party whose rights would be affected by it. If you are concerned about your privacy, you may have a lawyer or other legal representative file the counter notice on your behalf. GitHub Isn't The Judge. GitHub exercises little discretion in this process other than determining whether the notices meet the minimum requirements of the DMCA. It is up to the parties (and their lawyers) to evaluate the merit of their claims, bearing in mind that notices must be made under penalty of perjury. Additional Resources. If you need additional help, there are many self-help resources online. Lumen has an informative set of guides on copyright and DMCA safe harbor. If you are involved with an open-source project in need of legal advice, you can contact the Software Freedom Law Center. And if you think you have a particularly challenging case, non-profit organizations such as the Electronic Frontier Foundation may also be willing to help directly or refer you to a lawyer. Your Counter Notice Must... Include the following statement: "I have read and understand GitHub's Guide to Filing a DMCA Counter Notice." We won't refuse to process an otherwise complete counter notice if you don't include this statement; however, we will know that you haven't read these guidelines and may ask you to go back and do so. Identify the content that was disabled and the location where it appeared. The disabled content should have been identified by URL in the takedown notice. You simply need to copy the URL(s) that you want to challenge. Provide your contact information. Include your email address, name, telephone number, and physical address. Include the following statement: "I swear, under penalty of perjury, that I have a good-faith belief that the material was removed or disabled as a result of a mistake or misidentification of the material to be removed or disabled." You may also choose to communicate the reasons why you believe there was a mistake or misidentification. If you think of your counter notice as a "note" to the complaining party, this is a chance to explain why they should not take the next step and file a lawsuit in response. This is yet another reason to work with a lawyer when submitting a counter notice. Include the following statement: "I consent to the jurisdiction of Federal District Court for the judicial district in which my address is located (if in the United States, otherwise the Northern District of California where GitHub is located), and I will accept service of process from the person who provided the DMCA notification or an agent of such person." Include your physical or electronic signature. How to Submit Your Counter Notice The fastest way to get a response is to enter your information and answer all the questions on our Copyright claims form. You can also send an email notification to copyright@github.com. You may include an attachment if you like, but please also include a plain-text version of your letter in the body of your message. If you must send your notice by physical mail, you can do that too, but it will take substantially longer for us to receive and respond to it—and the 10-14 day waiting period starts from when we receive your counter notice. Notices we receive via plain-text email have a much faster turnaround than PDF attachments or physical mail. If you still wish to mail us your notice, our physical address is: GitHub, Inc Attn: DMCA Agent 88 Colin P Kelly Jr St San Francisco, CA. 94107 Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support GitHub Trademark Policy - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Site Policy / GitHub Trademark Policy GitHub Trademark Policy mac windows linux all What is a GitHub Trademark Policy Violation? Using a company or business name, logo, or other trademark-protected materials in a manner that may mislead or confuse others with regard to its brand or business affiliation may be considered a trademark policy violation. What is not a GitHub Trademark Policy Violation? Using another's trademark in a way that has nothing to do with the product or service for which the trademark was granted is not a trademark policy violation. GitHub user names are available on a first come, first served basis and may not be reserved. A GitHub account with a user name that happens to be the same as a registered trademark is not, by itself, necessarily a violation of our trademark policy. How Does GitHub Respond To Reported Trademark Policy Violations? When we receive reports of trademark policy violations from holders of federal or international trademark registrations, we review the account and may take the following actions: When there is a clear intent to mislead others through the unauthorized use of a trademark, GitHub will suspend the account and notify the account holder. When we determine that an account appears to be confusing users, but is not purposefully passing itself off as the trademarked good or service, we give the account holder an opportunity to clear up any potential confusion. We may also release a username for the trademark holder's active use. How Do I Report a Trademark Policy Violation? Holders of registered trademarks can report possible trademark policy violations to GitHub via email to support@github.com. Please submit trademark-related requests from your company email address and include all the information requested below to help expedite our response. Also be sure to clearly describe to us why the account may cause confusion with your mark or how the account may dilute or tarnish your mark. What Information is Required When Reporting Trademark Policy Violations? In order to investigate trademark policy violations, please provide all of the following information: Username of the reported account Your company name Your company GitHub account (if there is one) Company website Your trademarked word, symbol, etc. Trademark registration number Trademark registration office (e.g., USPTO) Description of confusion (e.g., passing off as your company, including specific descriptions of content or behavior) Requested Action (e.g., removal of violating account or transfer of trademarked username to an existing company account) Note: A federal or international trademark registration number is required. If the name you are reporting is not a registered mark (e.g., a government agency or non-profit organization), please let us know: Your first and last name Title Address Phone Email (must be from company domain) Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support GitHub Sensitive Data Removal Policy - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Site Policy / GitHub Sensitive Data Removal Policy GitHub Sensitive Data Removal Policy mac windows linux all If you believe that content on GitHub infringes rights you hold in it, please see our DMCA Takedown Policy and our Guide to Submitting a DMCA Takedown Notice. We rely on the DMCA notice and takedown process for the majority of our removal actions. However, we understand that sensitive, security-related content may get published on GitHub – whether accidentally or on purpose – from time to time. We provide our Sensitive Data Removal process to remove this sensitive data in certain exceptional circumstances where the DMCA process would not be applicable, such as when your security is at risk from exposed passwords and you do not own the copyright to the specific content that you need removed, or the content is not protectable by copyright. This guide describes the information GitHub needs from you in order to process a request to remove sensitive data from a repository. What is Sensitive Data? For the purposes of this document, “Sensitive data” refers to content that should have been kept confidential and whose public availability poses a specific or targeted security risk to you or your organization. Sensitive data removal requests are appropriate for: Access credentials, such as user names along with passwords, access tokens, or other sensitive secrets that can grant access to your organization's server, network, or domain. AWS tokens and other similar access credentials that grant access to a third party on your behalf. You must be able to show that the token does belong to you. Documentation (such as network diagrams) that pose a specific security risk for an organization. As discussed below, internal server names, on their own, are not sufficiently sensitive; you must be able to show that the internal server name's use in a particular file or piece of code poses a security threat. Sensitive data removal requests are not appropriate for: Requests to remove content that may infringe your or your organization's copyright rights. If you have questions about how GitHub handles copyright-related matters or would like us to remove potentially infringing content, please review our DMCA Takedown Policy. Trademark disputes. If you have questions about how GitHub handles trademark-related matters or would like us to remove content containing your organization's trade or service marks, please review our Trademark Policy. Privacy complaints. If you have concerns about your own privacy or you are contacting us on behalf of your employees due to a privacy concern, please contact us via our Privacy contact form. Entire files or repositories that do not pose a specific security risk, but you believe are otherwise objectionable. This process is not generally intended for the removal of copyrightable content, such as full files or repositories – only for the specific pieces of sensitive data in those files. If you believe a full file is infringing, please follow our DMCA process. While there may be cases where files are filled entirely with sensitive information, you must justify the security risk for the removal of such files, and this may increase the time required to process your request. Content governed by our Community Guidelines, such as malware or general-purpose tools. If you have questions about our Community Guidelines or believe that content on GitHub might violate our guidelines, please contact our Support Team. Mere mentions of your company's identity, name, brand, domain name, or other reference to your company in files on GitHub. You must be able to articulate why a use of your company's identity is a threat to your company's security posture before we will take action under this policy. Things to Know Investigate. It is up to the requesting party to conduct their own investigation and to provide us with the details we require. GitHub is not in a position to search for or make determinations about sensitive data on any indvidual's or organization's behalf. Ask Nicely First. A great first step before sending us a request to remove data is to try contacting the user directly. They may have listed contact information on their public profile page or in the repository's README or Support file, or you could get in touch by opening an issue or pull request on the repository. This is not strictly required, but it is appreciated. No Bots. You should have a trained professional evaluate the facts of every request you send. If you're outsourcing your efforts to a third party, make sure you know how they operate, and make sure they are not using automated bots to submit complaints in bulk. These complaints are often invalid and the extra back-and-forth required when we receive such reports results in delays, even when the complaint is valid. The Repository Owner(s) May Dispute Your Request. Any user affected by your request may decide to dispute your request. If they do, we will generally leave it up to you to contact the user and work things out with them directly. Send In The Correct Request. We offer this Sensitive Data Removal process as an exceptional service only for high-risk content. We are not able to use this process to remove other kinds of content, such as potentially infringing content, and we are not able to process any other kinds of removal requests simultaneously while processing sensitive removal requests. We will be able to help you more quickly if you send in your sensitive data removal requests separately from any requests to remove potentially infringing content. If you are unsure whether your request involves only sensitive data or also involves other legal matters, please consult legal counsel. Processing Time. While we do process Sensitive Data Removal Requests as quickly as possible, due to the volume of requests we process, it may take three to four business days for your request to be reviewed. Additional requests, or multiple requests from additional points of contact, may result in delays. Sending A Sensitive Data Removal Request Due to the type of content GitHub hosts (mostly software code) and the way that content is managed (with Git), we need complaints to be as specific as possible. In most situations, when we receive a complete and actionable request to remove sensitive data, we pass that request (with any personally identifying information redacted) along to the repository owner. In order for us to verify that the owner has removed the data completely, we need to know exactly where to look. These guidelines are designed to make the processing of requests to remove sensitive data as straightforward as possible. Your Request Must Include: A working link to each file containing sensitive data. Specific line numbers within each file containing the sensitive data OR a clear indication that an entire file contains sensitive data. A brief description of how each item you've identified poses a security risk to you or your organization. If you are a third party acting as an agent for an organization facing a security risk, include a statement that you have a legal right to act on behalf of that organization. OPTIONAL: Let us know if your request is particularly urgent, and why. We respond to all Sensitive Data Removal Requests as quickly as possible. However, if this request is especially time-sensitive, such as a very recent credential exposure, please explain why. How to Submit Your Request You can email your request to remove sensitive data to support@github.com or submit your request via our Contact form. Please include a plain-text version of your request in the body of your message. Sending your request in an attachment may result in processing delays. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support GitHub Privacy Statement - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Site Policy / GitHub Privacy Statement GitHub Privacy Statement mac windows linux all Effective date: October 11, 2017 Thanks for entrusting GitHub with your source code, your projects, and your personal information. Holding onto your private information is a serious responsibility, and we want you to know how we're handling it. The short version We collect your information only with your consent; we only collect the minimum amount of personal information that is necessary to fulfill the purpose of your interaction with us; we don't sell it to third parties; and we only use it as this Privacy Statement describes. If you're visiting us from the EU: we comply with the Privacy Shield framework. Of course, the short version doesn't tell you everything, so please read on for more details! What information GitHub collects and why Information from website browsers If you're just browsing the website, we collect the same basic information that most websites collect. We use common internet technologies, such as cookies and web server logs. This is stuff we collect from everybody, whether they have an account or not. The information we collect about all visitors to our website includes the visitor’s browser type, language preference, referring site, additional websites requested, and the date and time of each visitor request. We also collect potentially personally-identifying information like Internet Protocol (IP) addresses. Why do we collect this? We collect this information to better understand how our website visitors use GitHub, and to monitor and protect the security of the website. Information from users with accounts If you create an account, we require some basic information at the time of account creation. You will create your own user name and password, and we will ask you for a valid email account. You also have the option to give us more information if you want to, and this may include "User Personal Information." "User Personal Information" is any information about one of our users which could, alone or together with other information, personally identify him or her. Information such as a user name and password, an email address, a real name, and a photograph are examples of “User Personal Information.” User Personal Information does not include aggregated, non-personally identifying information. We may use aggregated, non-personally identifying information to operate, improve, and optimize our website and service. Why do we collect this? We need your User Personal Information to create your account, and to provide the services you request. We use your User Personal Information, specifically your user name, to identify you on GitHub. We use it to fill out your profile and share that profile with other users if you ask us to. We will use your email address to communicate with you, if you've said that's okay, and only for the reasons you’ve said that’s okay. Please see our section on email communication for more information. We limit our use of your User Personal Information to the purposes listed in this Privacy Statement. If we need to use your User Personal Information for other purposes, we will ask your permission first. You can always see what information we have, how we're using it, and what permissions you have given us in your user profile. What information GitHub does not collect We do not intentionally collect sensitive personal information, such as social security numbers, genetic data, health information, or religious information. Although GitHub does not request or intentionally collect any sensitive personal information, we realize that you might store this kind of information in your account, such as in a repository. If you store any sensitive personal information on our servers, you are consenting to our storage of that information on our servers, which are in the United States. We do not intentionally collect information that is stored in your repositories or other free-form content inputs. Information in your repositories belongs to you, and you are responsible for it, as well as for making sure that your content complies with our Terms of Service. GitHub employees do not access private repositories unless required to for security or maintenance, or for support reasons, with the consent of the repository owner. If your repository is public, anyone (including us) may view its contents. If you have included private or sensitive information in your public repository, such as email addresses, that information may be indexed by search engines or used by third parties. In addition, while we do not generally search for content in your repositories, we may scan our servers for certain tokens or security signatures. If you're a child under the age of 13, you may not have an account on GitHub. GitHub does not knowingly collect information from or direct any of our content specifically to children under 13. If we learn or have reason to suspect that you are a user who is under the age of 13, we will unfortunately have to close your account. We don't want to discourage you from learning to code, but those are the rules. Please see our Terms of Service for information about account termination. How we share the information we collect We do not share, sell, rent, or trade User Personal Information with third parties for their commercial purposes. We do not disclose User Personal Information outside GitHub, except in the situations listed in this section or in the section below on Compelled Disclosure. We do share certain aggregated, non-personally identifying information with others about how our users, collectively, use GitHub, or how our users respond to our other offerings, such as our conferences or events. For example, we may compile statistics on the usage of open source licenses across GitHub. However, we do not sell this information to advertisers or marketers. We do not host advertising on GitHub. We may occasionally embed content from third party sites, such as YouTube, and that content may include ads. While we try to minimize the amount of ads our embedded content contains, we can't always control what third parties show. We may share User Personal Information with your permission, so we can perform services you have requested. We may share User Personal Information with a limited number of third-party vendors who process it on our behalf to provide or improve our service, and who have agreed to privacy restrictions similar to our own Privacy Statement. Our vendors perform services such as payment processing, customer support ticketing, network data transmission, and other similar services. When we transfer your data to our vendors under Privacy Shield, we remain responsible for it. We may share User Personal Information if we are involved in a merger, sale, or acquisition. If any such change of ownership happens, we will ensure that it is under terms that preserve the confidentiality of User Personal Information, and we will notify you on our website or by email before any transfer of your User Personal Information. The organization receiving any User Personal Information will have to honor any promises we have made in our Privacy Statement or in our Terms of Service. Public Information on GitHub Much of GitHub is public-facing. If your content is public-facing, third parties may access and use it in compliance with our Terms of Service. We do not sell that content; it is yours. However, we do allow third parties, such as research organizations or archives, to compile public-facing GitHub information. Your Personal Information, associated with your content, may be gathered by third parties in these compilations of GitHub data. If you do not want your Personal Information to appear in third parties’ compilations of GitHub data, please do not make your Personal Information publicly available and be sure to configure your email address to be private in your user profile. If you would like to compile GitHub data, you may only use any public-facing Personal Information you gather for the purpose for which our user has authorized it. For example, where a GitHub user has made an email address public-facing for the purpose of identification and attribution, do not use that email address for commercial advertising. We expect you to reasonably secure any Personal Information you have gathered from GitHub, and to respond promptly to complaints, removal requests, and "do not contact" requests from GitHub or GitHub users. Similarly, projects on GitHub may include publicly available Personal Information collected as part of the collaborative process. In the event that a GitHub project contains publicly available Personal Information that does not belong to GitHub users, we will only use that Personal Information for the limited purpose for which it was collected, and we will secure that Personal Information as we would secure any User Personal Information. If you have a complaint about any Personal Information on GitHub, please see our section on resolving complaints. Our use of cookies and tracking Cookies GitHub uses cookies to make interactions with our service easy and meaningful. We use cookies (and similar technologies, like HTML5 localStorage) to keep you logged in, remember your preferences, and provide information for future development of GitHub. A cookie is a small piece of text that our web server stores on your computer or mobile device, which your browser sends to us when you return to our site. Cookies do not necessarily identify you if you are merely visiting GitHub; however, a cookie may store a unique identifier for each logged in user. The cookies GitHub sets are essential for the operation of the website, or are used for performance or functionality. By using our website, you agree that we can place these types of cookies on your computer or device. If you disable your browser or device’s ability to accept cookies, you will not be able to log in or use GitHub’s services. Google Analytics We use Google Analytics as a third party tracking service, but we don’t use it to track you individually or collect your User Personal Information. We use Google Analytics to collect information about how our website performs and how our users, in general, navigate through and use GitHub. This helps us evaluate our users' use of GitHub; compile statistical reports on activity; and improve our content and website performance. Google Analytics gathers certain simple, non-personally identifying information over time, such as your IP address, browser type, internet service provider, referring and exit pages, time stamp, and similar data about your use of GitHub. We do not link this information to any of your personal information such as your user name. GitHub will not, nor will we allow any third party to, use the Google Analytics tool to track our users individually; collect any User Personal Information other than IP address; or correlate your IP address with your identity. Google provides further information about its own privacy practices and offers a browser add-on to opt out of Google Analytics tracking. Certain pages on our site may set other third party cookies. For example, we may embed content, such as videos, from another site that sets a cookie. While we try to minimize these third party cookies, we can’t always control what cookies this third party content sets. Tracking "Do Not Track" is a privacy preference you can set in your browser if you do not want online services to collect and share certain kinds of information about your online activity from third party tracking services. We do not track your online browsing activity on other online services over time and we do not permit third-party services to track your activity on our site beyond our basic Google Analytics tracking, which you may opt out of here. Because we do not share this kind of data with third party services or permit this kind of third party data collection on GitHub for any of our users, and we do not track our users on third-party websites ourselves, we do not need to respond differently to an individual browser's Do Not Track setting. If you are interested in turning on your browser’s privacy and Do Not Track settings, the Do Not Track website has browser-specific instructions. Please see our section on email communication to learn about our use of pixel tags in marketing emails. How GitHub secures your information GitHub takes all measures reasonably necessary to protect User Personal Information from unauthorized access, alteration, or destruction; maintain data accuracy; and help ensure the appropriate use of User Personal Information. We follow generally accepted industry standards to protect the personal information submitted to us, both during transmission and once we receive it. No method of transmission, or method of electronic storage, is 100% secure. Therefore, we cannot guarantee its absolute security. For more information, see our security disclosures. GitHub's global privacy practices Information that we collect will be stored and processed in the United States in accordance with this Privacy Statement. However, we understand that we have users from different countries and regions with different privacy expectations, and we try to meet those needs. We provide the same standard of privacy protection to all our users around the world, regardless of their country of origin or location, and we are proud of the levels of notice, choice, accountability, security, data integrity, access, and recourse we provide. We have appointed a Privacy Counsel and we work hard to comply with the applicable data privacy laws wherever we do business. Additionally, we require that if our vendors or affiliates have access to User Personal Information, they must comply with our privacy policies and with applicable data privacy laws, including signing data transfer agreements such as Standard Contractual Clause agreements. In particular: GitHub provides clear methods of unambiguous, informed consent at the time of data collection, when we do collect your personal data. We collect only the minimum amount of personal data necessary, unless you choose to provide more. We encourage you to only give us the amount of data you are comfortable sharing. We offer you simple methods of accessing, correcting, or deleting the data we have collected. We provide our users notice, choice, accountability, security, and access, and we limit the purpose for processing. We also provide our users a method of recourse and enforcement. These are the Privacy Shield Principles, but they are also just good practices. GitHub adheres to the Privacy Shield Framework. You may view our entry in the Privacy Shield List. In addition to providing our users methods of unambiguous, informed consent and control over their data, we participate in and comply with the Privacy Shield framework, and we are committed to subject any Personal Information we receive from the EU and EEA to the Privacy Shield Principles. In addition, we continue to participate in the Safe Harbor Framework for Swiss data transfers to the US. Please read more about GitHub's Privacy Shield and Safe Harbor commitments. Resolving Complaints If you have concerns about the way GitHub is handling your User Personal Information, please let us know immediately. We want to help. You may contact us by filling out the Privacy contact form. You may also email us directly at privacy@github.com with the subject line "Privacy Shield Concerns." We will respond within 45 days at the latest. Dispute Resolution Process In the unlikely event that a dispute arises between you and GitHub regarding our handling of your User Personal Information, we will do our best to resolve it. If we cannot, we have selected JAMS, an independent dispute resolution provider, to handle unresolved Privacy Shield complaints. If we are unable to resolve your concerns after a good faith effort to address them, you may contact JAMS and submit a Privacy Shield claim. JAMS is a US-based private alternate dispute resolution provider, and we have contracted with JAMS to provide an independent recourse mechanism for any of our users for privacy concerns at no cost to you. You do not need to appear in court; you may conduct this dispute resolution process via telephone or video conference. If you are not based in the EU or EEA, but you would still like to use the JAMS arbitration process to resolve your dispute, please let us know and we will provide access to you. Independent Arbitration Under certain limited circumstances, European Union individuals may invoke binding Privacy Shield arbitration as a last resort if all other forms of dispute resolution have been unsuccessful. To learn more about this method of resolution and its availability to you, please read more about Privacy Shield. We are subject to the jurisdiction of the Federal Trade Commission. How we respond to compelled disclosure GitHub may disclose personally-identifying information or other information we collect about you to law enforcement in response to a valid subpoena, court order, warrant, or similar government order, or when we believe in good faith that disclosure is reasonably necessary to protect our property or rights, or those of third parties or the public at large. In complying with court orders and similar legal processes, GitHub strives for transparency. When permitted, we will make a reasonable effort to notify users of any disclosure of their information, unless we are prohibited by law or court order from doing so, or in rare, exigent circumstances. For more information, see our Guidelines for Legal Requests of User Data. How you can access and control the information we collect If you're already a GitHub user, you may access, update, alter, or delete your basic user profile information by editing your user profile or contacting GitHub Support. Data Retention and Deletion GitHub will retain User Personal Information for as long as your account is active or as needed to provide you services. We may retain certain User Personal Information indefinitely, unless you delete it or request its deletion. For example, we don’t automatically delete inactive user accounts, so unless you choose to delete your account, we will retain your account information indefinitely. If you would like to cancel your account or delete your User Personal Information, you may do so in your user profile. We will retain and use your information as necessary to comply with our legal obligations, resolve disputes, and enforce our agreements, but barring legal requirements, we will delete your full profile (within reason) within 30 days. How we communicate with you We will use your email address to communicate with you, if you've said that's okay, and only for the reasons you’ve said that’s okay. You have a lot of control over how your email address is used and shared on and through GitHub. You may manage your communication preferences in your user profile. If you would like your email to remain private, even when you’re commenting on public repositories, you can create a private email address in your user profile. You can also update your local Git configuration to use your private email address. This will not change how we contact you, but it will affect how others see you. Depending on your email settings, GitHub may occasionally send notification emails about changes in a repository you’re watching, new features, requests for feedback, important policy changes, or offer customer support. We also send marketing emails, but only with your consent. There's an unsubscribe link located at the bottom of each of the emails we send you. Our emails might contain a pixel tag, which is a small, clear image that can tell us whether or not you have opened an email and what your IP address is. We use this pixel tag to make our email more effective for you and to make sure we’re not sending you unwanted email. If you prefer not to receive pixel tags, please opt out of marketing emails. Changes to our Privacy Statement Although most changes are likely to be minor, GitHub may change our Privacy Statement from time to time. We will provide notification to Users of material changes to this Privacy Statement through our Website at least 30 days prior to the change taking effect by posting a notice on our home page or sending email to the email address specified in your GitHub primary account. For changes to this Privacy Statement that do not affect your rights, we encourage visitors to check this page frequently. License This Privacy Statement is licensed under this Creative Commons Zero license. For details, see our site-policy repository. Contacting GitHub Questions regarding GitHub's Privacy Statement or information practices should be directed to our Privacy contact form. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support GitHub Security - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Site Policy / GitHub Security GitHub Security mac windows linux all We know your code is extremely important to you and your business, and we're very protective of it. After all, GitHub's code is hosted on GitHub, too! Need to report a security vulnerability? Please visit our security bug bounty site for information about our responsible disclosure process and to submit a vulnerability report. Physical Security Data center access limited to data center technicians and approved GitHub staff Biometric scanning for controlled data center access Security camera monitoring at all data center locations 24x7 onsite staff provides additional protection against unauthorized entry Unmarked facilities to help maintain low profile Physical security audited by an independent firm System Security System installation using hardened, patched OS Dedicated firewall and VPN services to help block unauthorized system access Distributed Denial of Service (DDoS) mitigation services powered by industry-leading solutions Operational Security Our primary data center operations are regularly audited by independent firms against an ISAE 3000/AT 101 Type 2 Examination standard Systems access logged and tracked for auditing purposes Secure document-destruction policies for all sensitive information Fully documented change-management procedures Software Security We employ a team of 24/7/365 server specialists at GitHub to keep our software and its dependencies up to date eliminating potential security vulnerabilities. We employ a wide range of monitoring solutions for preventing and eliminating attacks to the site. Communications All private data exchanged with GitHub is always transmitted over SSL (which is why your dashboard is served over HTTPS, for instance). All pushing and pulling of private data is done over SSH authenticated with keys, or over HTTPS using your GitHub username and password. The SSH login credentials used to push and pull can not be used to access a shell or the filesystem. All users are virtual and have no user account on our machines. File system and backups Every piece of hardware we use has an identical copy ready and waiting for an immediate hot-swap in case of hardware or software failure. Every line of code we store is saved on a minimum of three different servers, including an off-site backup. We do not retroactively remove repositories from backups when deleted by the user, as we may need to restore the repository for the user if it was removed accidentally. We do not encrypt repositories on disk because it would not be any more secure: the website and git back-end would need to decrypt the repositories on demand, slowing down response times. Any user with shell access to the file system would have access to the decryption routine, thus negating any security it provides. Therefore, we focus on making our machines and network as secure as possible. Employee access No GitHub employees ever access private repositories unless required to for support reasons. Staff working directly in the file store access the compressed Git database, your code is never present as plaintext files like it would be in a local clone. Support staff may sign into your account to access settings related to your support issue. In rare cases staff may need to pull a clone of your code, this will only be done with your consent. Support staff does not have direct access to clone any repository, they will need to temporarily attach their SSH key to your account to pull a clone. When working a support issue we do our best to respect your privacy as much as possible, we only access the files and settings needed to resolve your issue. All cloned repositories are deleted as soon as the support issue has been resolved. Maintaining security We protect your login from brute force attacks with rate limiting. All passwords are filtered from all our logs and are one-way encrypted in the database using bcrypt. Login information is always sent over SSL. We also allow you to use two-factor authentication, or 2FA, as an additional security measure when accessing your GitHub account. Enabling 2FA adds security to your account by requiring both your password as well as access to a security code on your phone to access your account. We have full time security staff to help identify and prevent new attack vectors. We always test new features in order to rule out potential attacks, such as XSS-protecting wikis, and ensuring that Pages cannot access cookies. We also maintain relationships with reputable security firms to perform regular penetration tests and ongoing audits of GitHub and its code. We're extremely concerned and active about security, but we're aware that many companies are not comfortable hosting code outside their firewall. For these companies we offer GitHub Enterprise, a version of GitHub that can be installed to a server within the company's network. Credit card safety When you sign up for a paid account on GitHub, we do not store any of your card information on our servers. It's handed off to Braintree Payment Solutions, a company dedicated to storing your sensitive data on PCI-Compliant servers. Contact Us Have a question, concern, or comment about GitHub security? Please contact GitHub Support. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Responsible Disclosure of Security Vulnerabilities - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Site Policy / Responsible Disclosure of Security Vulnerabilities Responsible Disclosure of Security Vulnerabilities mac windows linux all We want to keep GitHub safe for everyone. If you've discovered a security vulnerability in GitHub, we appreciate your help in disclosing it to us in a responsible manner. Bounty Program Like several other large software companies, GitHub provides a "bug bounty" to better engage with security researchers. The idea is simple: hackers and security researchers (like you) find and report vulnerabilities through our responsible disclosure process. Then, to recognize the significant effort that these researchers often put forth when hunting down bugs, we reward them with some cold hard cash. Check out the GitHub Bug Bounty site for full details, and happy hunting! Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support GitHub Terms of Service - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Site Policy / GitHub Terms of Service GitHub Terms of Service mac windows linux all Thank you for using GitHub! We're happy you're here. Please read this Terms of Service agreement carefully before accessing or using GitHub. Because it is such an important contract between us and our users, we have tried to make it as clear as possible. For your convenience, we have presented these terms in a short non-binding summary followed by the full legal terms. Summary Section What can you find there? A. Definitions Some basic terms, defined in a way that will help you understand this agreement. Refer back up to this section for clarification. B. Account Terms These are the basic requirements of having an account on GitHub. C. Acceptable Use These are the basic rules you must follow when using your GitHub account. D. User-Generated Content You own the content you post on GitHub. However, you have some responsibilities regarding it, and we ask you to grant us some rights so we can provide services to you. E. Private Repositories This section talks about how GitHub will treat content you post in private repositories. F. Copyright & DMCA Policy This section talks about how GitHub will respond if you believe someone is infringing your copyrights on GitHub. G. Intellectual Property Notice This describes GitHub's rights in the website and service. H. API Terms These are the rules for using GitHub's APIs, whether you are using the API for development or data collection. I. Additional Terms for GitHub Pages We have a few specific rules for content hosted using GitHub Pages. J. Additional Terms for GitHub Marketplace We have another set of terms for GitHub Marketplace. K. Advertising on GitHub If you want to promote your content on GitHub, this section lays out some rules you must follow. L. Payment You are responsible for payment. We are responsible for billing you accurately. M. Cancellation and Termination You may cancel this agreement and close your account at any time. N. Communications with GitHub We only use email and other electronic means to stay in touch with our users. We do not provide phone support. O. Disclaimer of Warranties We provide our service as is, and we make no promises or guarantees about this service. Please read this section carefully; you should understand what to expect. P. Limitation of Liability We will not be liable for damages or losses arising from your use or inability to use the service or otherwise arising under this agreement. Please read this section carefully; it limits our obligations to you. Q. Release and Indemnification You are fully responsible for your use of the service. R. Changes to these Terms of Service We may modify this agreement, but we will give you 30 days' notice of changes that affect your rights. S. Miscellaneous Please see this section for legal details including our choice of law. The GitHub Terms of Service Effective date: October 11, 2017 A. Definitions Short version: We use these basic terms throughout the agreement, and they have specific meanings. You should know what we mean when we use each of the terms. There's not going to be a test on it, but it's still useful information. The “Agreement” refers, collectively, to all the terms, conditions, notices contained or referenced in this document (the “Terms of Service” or the "Terms") and all other operating rules, policies (including the GitHub Privacy Statement, available at github.com/site/privacy) and procedures that we may publish from time to time on the Website. Most of our site policies are available at help.github.com/categories/site-policy. The “Service” refers to the applications, software, products, and services provided by GitHub. The “Website” refers to GitHub’s website located at github.com, and all content, services, and products provided by GitHub at or through the Website. It also refers to GitHub-owned subdomains of github.com, such as education.github.com and pages.github.com. These Terms also govern GitHub’s conference websites, such as githubuniverse.com, and product websites, such as atom.io. Occasionally, websites owned by GitHub may provide different or additional terms of service. If those additional terms conflict with this Agreement, the more specific terms apply to the relevant page or service. “The User,” “You,” and “Your” refer to the individual person, company, or organization that has visited or is using the Website or Service; that accesses or uses any part of the account; or that directs the use of the account in the performance of its functions. A User must be at least 13 years of age. Special terms may apply for business or government accounts (See Section B(4): Additional Terms). “GitHub,” “We,” and “Us” refer to GitHub, Inc., as well as our affiliates, directors, subsidiaries, contractors, licensors, officers, agents, and employees. “Content” refers to content featured or displayed through the Website, including without limitation text, data, articles, images, photographs, graphics, software, applications, designs, features, and other materials that are available on the Website or otherwise available through the Service. "Content" also includes Services. “User-Generated Content” is Content, written or otherwise, created or uploaded by our Users. "Your Content" is Content that you create or own. B. Account Terms Short version: A human must create your account; you must be 13 or over; you must provide a valid email address; and you may not have more than one free account. You alone are responsible for your account and anything that happens while you are signed in to or using your account. You are responsible for keeping your account secure. 1. Required Information You must provide a valid email address in order to complete the signup process. Any other information requested, such as your real name, is optional, unless you are accepting these terms on behalf of a legal entity (in which case we need more information about the legal entity) or if you opt for a paid account, in which case additional information will be necessary for billing purposes. 2. Account Requirements We have a few simple rules for accounts on GitHub's Service. You must be a human to create an account. Accounts registered by "bots" or other automated methods are not permitted. We do permit machine accounts: A machine account is an account set up by an individual human who accepts the Terms on behalf of the account, provides a valid email address, and is responsible for its actions. A machine account is used exclusively for performing automated tasks. Multiple users may direct the actions of a machine account, but the owner of the account is ultimately responsible for the machine's actions. You may maintain no more than one free machine account in addition to your free personal account. One person or legal entity may maintain no more than one free account (if you choose to control a machine account as well, that's fine, but it can only be used for running a machine). You must be age 13 or older. While we are thrilled to see brilliant young coders get excited by learning to program, we must comply with United States law. GitHub does not target our Service to children under 13, and we do not permit any Users under 13 on our Service. If we learn of any User under the age of 13, we will terminate that User’s account immediately. If you are a resident of a country outside the United States, your country’s minimum age may be older; in such a case, you are responsible for complying with your country’s laws. Your login may only be used by one person — i.e., a single login may not be shared by multiple people. A paid organization account may create separate logins for as many users as its subscription allows. Overall, the number of Users must not exceed the number of accounts you've ordered from us. 3. User Account Security You are responsible for keeping your account secure while you use our Service. We offer tools such as two-factor authentication to help you maintain your account's security, but the content of your account and its security are up to you. You are responsible for all content posted and activity that occurs under your account (even when content is posted by others who have accounts under your account). You are responsible for maintaining the security of your account and password. GitHub cannot and will not be liable for any loss or damage from your failure to comply with this security obligation. You will promptly notify GitHub if you become aware of any unauthorized use of, or access to, our Service through your account, including any unauthorized use of your password or account. 4. Additional Terms In some situations, third parties' terms may apply to your use of GitHub. For example, you may be a member of an organization on GitHub with its own terms or license agreements; you may download an application that integrates with GitHub; or you may use GitHub to authenticate to another service. Please be aware that while these Terms are our full agreement with you, other parties' terms govern their relationships with you. If you are a government User or otherwise accessing or using any GitHub Service in a government capacity, this Government Amendment to GitHub Terms of Service applies to you, and you agree to its provisions. If you have signed up for a Business plan, the Business Plan Addendum applies to you, and you agree to its provisions. C. Acceptable Use Short version: GitHub hosts a wide variety of collaborative projects from all over the world, and that collaboration only works when our users are able to work together in good faith. While using the service, you must follow this Acceptable Use Policy, which includes some restrictions on content you can post, conduct on the service, and other limitations. In short, be excellent to each other. 1. Compliance with Laws and Regulations Your use of the Website and Service must not violate any applicable laws, including copyright or trademark laws, export control laws, or other laws in your jurisdiction. You are responsible for making sure that your use of the Service is in compliance with laws and any applicable regulations. 2. Content Restrictions You agree that you will not under any circumstances upload, post, host, or transmit any content that: is unlawful or promotes unlawful activities; is or contains sexually obscene content; is libelous, defamatory, or fraudulent; is discriminatory or abusive toward any individual or group; contains or installs any active malware or exploits, or uses our platform for exploit delivery (such as part of a command and control system); or infringes on any proprietary right of any party, including patent, trademark, trade secret, copyright, right of publicity, or other rights. 3. Conduct Restrictions While using GitHub, you agree that you will not under any circumstances: harass, abuse, threaten, or incite violence towards any individual or group, including GitHub employees, officers, and agents, or other GitHub Users; use our servers for any form of excessive automated bulk activity (for example, spamming), or relay any other form of unsolicited advertising or solicitation through our servers, such as get-rich-quick schemes; attempt to disrupt or tamper with GitHub's servers in ways that could harm our Website or Service, to place undue burden on GitHub's servers through automated means, or to access GitHub's Service in ways that exceed your authorization (other than those authorized by the GitHub Bug Bounty program); impersonate any person or entity, including any of our employees or representatives, including through false association with GitHub, or by fraudulently misrepresenting your identity or site's purpose; or violate the privacy of any third party, such as by posting another person's personal information without consent. 4. Services Usage Limits You agree not to reproduce, duplicate, copy, sell, resell or exploit any portion of the Service, use of the Service, or access to the Service without GitHub's express written permission. 5. Scraping Scraping refers to extracting data from our Website via an automated process, such as a bot or webcrawler. It does not refer to the collection of information through GitHub's API. Please see Section H for our API Terms. You may scrape the website for the following reasons: Researchers may scrape public, non-personal information from GitHub for research purposes, only if any publications resulting from that research are open access. Archivists may scrape GitHub for public data for archival purposes. You may not scrape GitHub for spamming purposes, including for the purposes of selling GitHub users' personal information, such as to recruiters, headhunters, and job boards. All use of GitHub data gathered through scraping must comply with the GitHub Privacy Statement. 6. Privacy Misuse of GitHub Users' Personal Information is prohibited. Any person, entity, or service collecting data from GitHub must comply with the GitHub Privacy Statement, particularly in regards to the collection of our Users' Personal Information (as defined in the GitHub Privacy Statement). If you collect any GitHub User's Personal Information from GitHub, you agree that you will only use the Personal Information you gather for the purpose for which our User has authorized it. You agree that you will reasonably secure any Personal Information you have gathered from GitHub, and you will respond promptly to complaints, removal requests, and "do not contact" requests from GitHub or GitHub Users. 7. Excessive Bandwidth Use If we determine your bandwidth usage to be significantly excessive in relation to other GitHub customers, we reserve the right to suspend your account or throttle your file hosting until you can reduce your bandwidth consumption. 8. User Protection You agree not to engage in activity that significantly harms our Users. We will resolve disputes in favor of protecting our Users as a whole. D. User-Generated Content Short version: You own content you create, but you allow us certain rights to it, so that we can display and share the content you post. You still have control over your content, and responsibility for it, and the rights you grant us are limited to those we need to provide the service. We have the right to remove content or close accounts if we need to. 1. Responsibility for User-Generated Content You may create or upload User-Generated Content while using the Service. You are solely responsible for the content of, and for any harm resulting from, any User-Generated Content that you post, upload, link to or otherwise make available via the Service, regardless of the form of that Content. We are not responsible for any public display or misuse of your User-Generated Content. 2. GitHub May Remove Content We do not pre-screen User-Generated Content, but we have the right (though not the obligation) to refuse or remove any User-Generated Content that, in our sole discretion, violates any GitHub terms or policies. 3. Ownership of Content, Right to Post, and License Grants You retain ownership of and responsibility for Content you create or own ("Your Content"). If you're posting anything you did not create yourself or do not own the rights to, you agree that you are responsible for any Content you post; that you will only submit Content that you have the right to post; and that you will fully comply with any third party licenses relating to Content you post. Because you retain ownership of and responsibility for Your Content, we need you to grant us — and other GitHub Users — certain legal permissions, listed in Sections D.4 — D.7. These license grants apply to Your Content. If you upload Content that already comes with a license granting GitHub the permissions we need to run our Service, no additional license is required. You understand that you will not receive any payment for any of the rights granted in Sections D.4 — D.7. The licenses you grant to us will end when you remove Your Content from our servers, unless other Users have forked it. 4. License Grant to Us We need the legal right to do things like host Your Content, publish it, and share it. You grant us and our legal successors the right to store, parse, and display Your Content, and make incidental copies as necessary to render the Website and provide the Service. This includes the right to do things like copy it to our database and make backups; show it to you and other users; parse it into a search index or otherwise analyze it on our servers; share it with other users; and perform it, in case Your Content is something like music or video. This license does not grant GitHub the right to sell Your Content or otherwise distribute or use it outside of our provision of the Service. 5. License Grant to Other Users Any User-Generated Content you post publicly, including issues, comments, and contributions to other Users' repositories, may be viewed by others. By setting your repositories to be viewed publicly, you agree to allow others to view and "fork" your repositories (this means that others may make their own copies of Content from your repositories in repositories they control). If you set your pages and repositories to be viewed publicly, you grant each User of GitHub a nonexclusive, worldwide license to use, display, and perform Your Content through the GitHub Service and to reproduce Your Content solely on GitHub as permitted through GitHub's functionality (for example, through forking). You may grant further rights if you adopt a license. If you are uploading Content you did not create or own, you are responsible for ensuring that the Content you upload is licensed under terms that grant these permissions to other GitHub Users. 6. Contributions Under Repository License Whenever you make a contribution to a repository containing notice of a license, you license your contribution under the same terms, and you agree that you have the right to license your contribution under those terms. If you have a separate agreement to license your contributions under different terms, such as a contributor license agreement, that agreement will supersede. Isn't this just how it works already? Yep. This is widely accepted as the norm in the open-source community; it's commonly referred to by the shorthand "inbound=outbound". We're just making it explicit. 7. Moral Rights You retain all moral rights to Your Content that you upload, publish, or submit to any part of the Service, including the rights of integrity and attribution. However, you waive these rights and agree not to assert them against us, to enable us to reasonably exercise the rights granted in Section D.4, but not otherwise. To the extent this agreement is not enforceable by applicable law, you grant GitHub the rights we need to use Your Content without attribution and to make reasonable adaptations of Your Content as necessary to render the Website and provide the Service. E. Private Repositories Short version: You may have access to private repositories. We treat the content of private repositories as confidential, and we only access it for support reasons, with your consent, or if required to for security reasons. 1. Control of Private Repositories. Some accounts, such as paid accounts, may have private repositories, which allow the User to control access to Content. 2. Confidentiality of Private Repositories. GitHub considers the contents of private repositories to be confidential to you. GitHub will protect the contents of private repositories from unauthorized use, access, or disclosure in the same manner that we would use to protect our own confidential information of a similar nature and in no event with less than a reasonable degree of care. 3. Access. GitHub employees may only access the content of your private repositories in the following situations: With your consent and knowledge, for support reasons. If GitHub accesses a private repository for support reasons, we will only do so with the owner’s consent and knowledge. When access is required for security reasons. You may choose to enable additional access to your private repositories. For example: You may enable various GitHub services or features that require additional rights to Your Content in private repositories. These rights may vary depending on the service or feature, but GitHub will continue to treat your private repository Content as confidential. If those services or features require rights in addition to those we need to provide the GitHub Service, we will provide an explanation of those rights. You may also grant a third-party application authorization to use, access, and disclose the contents of your private repositories. Your use of third-party applications is at your sole risk; GitHub is not liable for disclosures to third parties that you authorize to access a private repository. 4. Exclusions. If we have reason to believe the contents of a private repository are in violation of the law or of these Terms, we have the right to access, review, and remove them. Additionally, we may be compelled by law to disclose the contents of your private repositories. F. Copyright Infringement and DMCA Policy If you believe that content on our website violates your copyright, please contact us in accordance with our Digital Millennium Copyright Act Policy. If you are a copyright owner and you believe that content on GitHub violates your rights, please contact us via our convenient DMCA form or by emailing copyright@github.com. There may be legal consequences for sending a false or frivolous takedown notice. Before sending a takedown request, you must consider legal uses such as fair use and licensed uses. We will terminate the accounts of repeat infringers of this policy. G. Intellectual Property Notice Short version: We own the service and all of our content. In order for you to use our content, we give you certain rights to it, but you may only use our content in the way we have allowed. 1. GitHub's Rights to Content GitHub and our licensors, vendors, agents, and/or our content providers retain ownership of all intellectual property rights of any kind related to the Website and Service. We reserve all rights that are not expressly granted to you under this Agreement or by law. The look and feel of the Website and Service is copyright © GitHub, Inc. All rights reserved. You may not duplicate, copy, or reuse any portion of the HTML/CSS, Javascript, or visual design elements or concepts without express written permission from GitHub. 2. GitHub Trademarks and Logos If you’d like to use GitHub’s trademarks, you must follow all of our trademark guidelines, including those on our logos page: https://github.com/logos. 3. License to GitHub Policies This Agreement is licensed under this Creative Commons Zero license. For details, see our site-policy repository. H. API Terms Short version: You agree to these Terms of Service, plus this Section H, when using any of GitHub's APIs (Application Provider Interface), including use of the API through a third party product that accesses GitHub. No Abuse or Overuse of the API Abuse or excessively frequent requests to GitHub via the API may result in the temporary or permanent suspension of your account's access to the API. GitHub, in our sole discretion, will determine abuse or excessive usage of the API. We will make a reasonable attempt to warn you via email prior to suspension. You may not share API tokens to exceed GitHub's rate limitations. You may not use the API to download data or Content from GitHub for spamming purposes, including for the purposes of selling GitHub users' personal information, such as to recruiters, headhunters, and job boards. All use of the GitHub API is subject to these Terms of Service and the GitHub Privacy Statement. GitHub may offer subscription-based access to our API for those Users who require high-throughput access or access that would result in resale of GitHub's Service. I. Additional Terms for GitHub Pages Short version: The GitHub Pages hosting service is subject to certain rules, in addition to the rest of the Terms. Each GitHub account comes with access to the GitHub Pages static hosting service. This hosting service is intended to host static web pages for GitHub users. GitHub Pages are subject to some specific bandwidth and usage limits, and may not be appropriate for some high-bandwidth uses. Please see our GitHub Pages guidelines for more information. GitHub reserves the right at all times to reclaim any GitHub subdomain without liability. J. Additional Terms for GitHub Marketplace Short version: GitHub Marketplace is subject to certain rules, in addition to the rest of this Agreement. GitHub Marketplace is a platform for developers of all kinds. Through GitHub Marketplace, you can list Developer Products (as defined in the GitHub Marketplace Terms of Service) or buy others' Developer Products. Prior to submitting a project to be listed, you must agree to the GitHub Marketplace Developer Agreement. If you buy Developer Products, the GitHub Marketplace Terms of Service controls your purchase. This Agreement, as well as the GitHub Marketplace Terms of Service, will govern your use of GitHub Marketplace. Many of these Developer Products are used exclusively for performing automated tasks. In addition, multiple Users may direct the actions of a Developer Product. However, if you purchase and/or set up a Developer Product on your account, or you are an owner of an account with an integrated Developer Product, then you will be responsible for the Developer Product's actions that are performed on or through your account. Any violation of the GitHub Marketplace Terms of Service is also a violation of this Agreement. K. Advertising on GitHub Short version: We do not generally prohibit use of GitHub for advertising. However, we expect our users to follow certain limitations, so GitHub does not become a spam haven. No one wants that. 1. GitHub Pages We offer Pages sites primarily as a showcase for personal and organizational projects. Some monetization efforts are permitted on Pages, such as donation buttons and crowdfunding links. 2. GitHub Repositories GitHub repositories are intended to host Content. You may include static images, links, and promotional text in the README documents associated with your repositories, but they must be related to the project you are hosting on GitHub. You may not advertise in other Users' repositories, such as by posting monetized or excessive bulk content in issues. 3. Spamming and Inappropriate Use of GitHub Advertising Content, like all Content, must not violate the law or these Terms of Use, for example through excessive bulk activity such as spamming. We reserve the right to remove any advertisements that, in our sole discretion, violate any GitHub terms or policies. L. Payment Short version: You are responsible for any fees associated with your use of GitHub. We are responsible for communicating those fees to you clearly and accurately, and letting you know well in advance if those prices change. 1. Pricing Our pricing and payment terms are available at github.com/pricing. If you agree to a subscription price, that will remain your price for the duration of the payment term; however, prices are subject to change at the end of a payment term. 2. Upgrades, Downgrades, and Changes We will immediately bill you when you upgrade from the free plan to any paying plan. If you change from a monthly billing plan to a yearly billing plan, GitHub will bill you for a full year at the next monthly billing date. If you upgrade to a higher level of service, we will bill you for the upgraded plan immediately. You may change your level of service at any time by choosing a plan option or going into your Billing settings. If you choose to downgrade your account, you may lose access to Content, features, or capacity of your account. Please see our section on Cancellation for information on getting a copy of that Content. 3. Billing Schedule; No Refunds For monthly or yearly payment plans, the Service is billed in advance on a monthly or yearly basis respectively and is non-refundable. There will be no refunds or credits for partial months of service, downgrade refunds, or refunds for months unused with an open account; however, the service will remain active for the length of the paid billing period. In order to treat everyone equally, no exceptions will be made. 4. Authorization By agreeing to these Terms, you are giving us permission to charge your on-file credit card, PayPal account, or other approved methods of payment for fees that you authorize for GitHub. 5. Responsibility for Payment You are responsible for all fees, including taxes, associated with your use of the Service. By using the Service, you agree to pay GitHub any charge incurred in connection with your use of the Service. If you dispute the matter, contact GitHub Support. You are responsible for providing us with a valid means of payment for paid accounts. Free accounts are not required to provide payment information. M. Cancellation and Termination Short version: You may close your account at any time. If you do, we'll treat your information responsibly. 1. Account Cancellation It is your responsibility to properly cancel your account with GitHub. You can cancel your account at any time by going into your Settings in the global navigation bar at the top of the screen. The Account screen provides a simple, no questions asked cancellation link. We are not able to cancel accounts in response to an email or phone request. 2. Upon Cancellation We will retain and use your information as necessary to comply with our legal obligations, resolve disputes, and enforce our agreements, but barring legal requirements, we will delete your full profile and the Content of your repositories within 90 days of cancellation or termination (though some information may remain in encrypted backups). This information can not be recovered once your account is cancelled. We will not delete Content that you have contributed to other Users' repositories or that other Users have forked. Upon request, we will make a reasonable effort to provide an account owner with a copy of your lawful, non-infringing account contents after account cancellation, termination, or downgrade. You must make this request within 90 days of cancellation, termination, or downgrade. 3. GitHub May Terminate GitHub has the right to suspend or terminate your access to all or any part of the Website at any time, with or without cause, with or without notice, effective immediately. GitHub reserves the right to refuse service to anyone for any reason at any time. 4. Survival All provisions of this Agreement which by their nature should survive termination will survive termination, including, without limitation, ownership provisions, warranty disclaimers, indemnity, and limitations of liability. N. Communications with GitHub Short version: We use email and other electronic means to stay in touch with our users. 1. Electronic Communication Required For contractual purposes, you (1) consent to receive communications from us in an electronic form via the email address you have submitted or via the Service; and (2) agree that all Terms of Service, agreements, notices, disclosures, and other communications that we provide to you electronically satisfy any legal requirement that those communications would satisfy if they were on paper. This section does not affect your non-waivable rights. 2. Legal Notice to GitHub Must Be in Writing Communications made through email or GitHub Support's messaging system will not constitute legal notice to GitHub or any of its officers, employees, agents or representatives in any situation where notice to GitHub is required by contract or any law or regulation. Legal notice to GitHub must be in writing and served on GitHub's legal agent. 3. No Phone Support GitHub only offers support via email, in-Service communications, and electronic messages. We do not offer telephone support. O. Disclaimer of Warranties Short version: We provide our service as is, and we make no promises or guarantees about this service. Please read this section carefully; you should understand what to expect. GitHub provides the Website and the Service “as is” and “as available,” without warranty of any kind. Without limiting this, we expressly disclaim all warranties, whether express, implied or statutory, regarding the Website and the Service including without limitation any warranty of merchantability, fitness for a particular purpose, title, security, accuracy and non-infringement. GitHub does not warrant that the Service will meet your requirements; that the Service will be uninterrupted, timely, secure, or error-free; that the information provided through the Service is accurate, reliable or correct; that any defects or errors will be corrected; that the Service will be available at any particular time or location; or that the Service is free of viruses or other harmful components. You assume full responsibility and risk of loss resulting from your downloading and/or use of files, information, content or other material obtained from the Service. P. Limitation of Liability Short version: We will not be liable for damages or losses arising from your use or inability to use the service or otherwise arising under this agreement. Please read this section carefully; it limits our obligations to you. You understand and agree that we will not be liable to you or any third party for any loss of profits, use, goodwill, or data, or for any incidental, indirect, special, consequential or exemplary damages, however arising, that result from the use, disclosure, or display of your User-Generated Content; your use or inability to use the Service; any modification, price change, suspension or discontinuance of the Service; the Service generally or the software or systems that make the Service available; unauthorized access to or alterations of your transmissions or data; statements or conduct of any third party on the Service; any other user interactions that you input or receive through your use of the Service; or any other matter relating to the Service. Our liability is limited whether or not we have been informed of the possibility of such damages, and even if a remedy set forth in this Agreement is found to have failed of its essential purpose. We will have no liability for any failure or delay due to matters beyond our reasonable control. Q. Release and Indemnification Short version: You are responsible for your use of the service. If you harm someone else or get into a dispute with someone else, we will not be involved. If you have a dispute with one or more Users, you agree to release GitHub from any and all claims, demands and damages (actual and consequential) of every kind and nature, known and unknown, arising out of or in any way connected with such disputes. You agree to indemnify us, defend us, and hold us harmless from and against any and all claims, liabilities, and expenses, including attorneys’ fees, arising out of your use of the Website and the Service, including but not limited to your violation of this Agreement, provided that GitHub (1) promptly gives you written notice of the claim, demand, suit or proceeding; (2) gives you sole control of the defense and settlement of the claim, demand, suit or proceeding (provided that you may not settle any claim, demand, suit or proceeding unless the settlement unconditionally releases GitHub of all liability); and (3) provides to you all reasonable assistance, at your expense. R. Changes to These Terms Short version: We want our users to be informed of important changes to our terms, but some changes aren't that important — we don't want to bother you every time we fix a typo. So while we may modify this agreement at any time, we will notify users of any changes that affect your rights and give you time to adjust to them. We reserve the right, at our sole discretion, to amend these Terms of Service at any time and will update these Terms of Service in the event of any such amendments. We will notify our Users of material changes to this Agreement, such as price changes, at least 30 days prior to the change taking effect by posting a notice on our Website. For non-material modifications, your continued use of the Website constitutes agreement to our revisions of these Terms of Service. We reserve the right at any time and from time to time to modify or discontinue, temporarily or permanently, the Website (or any part of it) with or without notice. S. Miscellaneous 1. Governing Law Except to the extent applicable law provides otherwise, this Agreement between you and GitHub and any access to or use of the Website or the Service are governed by the federal laws of the United States of America and the laws of the State of California, without regard to conflict of law provisions. You and GitHub agree to submit to the exclusive jurisdiction and venue of the courts located in the City and County of San Francisco, California. 2. Non-Assignability GitHub may assign or delegate these Terms of Service and/or the GitHub Privacy Statement, in whole or in part, to any person or entity at any time with or without your consent, including the license grant in Section D.4. You may not assign or delegate any rights or obligations under the Terms of Service or Privacy Statement without our prior written consent, and any unauthorized assignment and delegation by you is void. 3. Section Headings and Summaries Throughout this Agreement, each section includes titles and brief summaries of the following terms and conditions. These section titles and brief summaries are not legally binding. 4. Severability, No Waiver, and Survival If any part of this Agreement is held invalid or unenforceable, that portion of the Agreement will be construed to reflect the parties’ original intent. The remaining portions will remain in full force and effect. Any failure on the part of GitHub to enforce any provision of this Agreement will not be considered a waiver of our right to enforce such provision. Our rights under this Agreement will survive any termination of this Agreement. 5. Amendments; Complete Agreement This Agreement may only be modified by a written amendment signed by an authorized representative of GitHub, or by the posting by GitHub of a revised version in accordance with Section R. Changes to These Terms. These Terms of Service, together with the GitHub Privacy Statement, represent the complete and exclusive statement of the agreement between you and us. This Agreement supersedes any proposal or prior agreement oral or written, and any other communications between you and GitHub relating to the subject matter of these terms including any confidentiality or nondisclosure agreements. 6. Questions Questions about the Terms of Service? Contact us. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support GitHub Corporate Terms of Service - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Site Policy / GitHub Corporate Terms of Service GitHub Corporate Terms of Service mac windows linux all Thank you for choosing GitHub for your company's business needs. Please read our Corporate Terms of Service agreement carefully before accessing or using GitHub. Because it is such an important contract between us and our customers, we have tried to make it as clear as possible. For your convenience, we have presented these terms in a short non-binding summary followed by the full legal terms. Summary Section What can you find there? A. Definitions Some basic terms, defined in a way that will help you understand this agreement. Refer back up to this section for clarification. B. Account Terms These are the basic requirements of having an account on GitHub. C. Acceptable Use These are the basic rules you must follow when using your GitHub account. D. User-Generated Content You own the content you post on GitHub. However, you have some responsibilities regarding it, and we ask you to grant us some rights so we can provide services to you. E. Private Repositories This section talks about how GitHub will treat content you post in private repositories. F. Copyright & DMCA Policy This section talks about how GitHub will respond if you believe someone is infringing your copyrights on GitHub. G. Intellectual Property Notice This describes GitHub's rights in the website and service. H. API Terms These are the rules for using GitHub's APIs, whether you are using the API for development or data collection. I. Additional Terms for GitHub Pages We have a few specific rules for content hosted using GitHub Pages. J. Additional Terms for GitHub Marketplace We have another set of terms for GitHub Marketplace. K. Advertising on GitHub If you want to promote your content on GitHub, this section lays out some rules you must follow. L. Payment You are responsible for payment. We are responsible for billing you accurately. M. Cancellation and Termination You may cancel this agreement and close your account at any time. N. Communications with GitHub We only use email and other electronic means to stay in touch with our users. We do not provide phone support. O. Disclaimer of Warranties We provide our service as is, and we make no promises or guarantees about this service. Please read this section carefully; you should understand what to expect. P. Limitation of Liability Situations where either of us will be liable to the other for damages or losses arising from your use or inability to use the service or otherwise arising under this agreement are limited. Please read this section carefully; it limits our obligations to you. Q. Release and Indemnification You are fully responsible for your and your Users' use of the service. R. Changes to these Terms of Service We may modify this agreement, but we will give you 30 days' notice of changes that affect your rights. S. Miscellaneous Please see this section for legal details including our choice of law. The GitHub Corporate Terms of Service Effective date: October 11, 2017 A. Definitions Short version: We use these basic terms throughout the agreement, and they have specific meanings. You should know what we mean when we use each of the terms. There's not going to be a test on it, but it's still useful information. The “Agreement” refers, collectively, to all the terms, conditions, notices contained or referenced in this document (the “Corporate Terms of Service” or the "Terms") and all other operating rules, policies (including the GitHub Privacy Statement, available at github.com/site/privacy) and procedures that we may publish from time to time on the Website. Most of our site policies are available at help.github.com/categories/site-policy. The “Service” refers to the applications, software, products, and services provided by GitHub. The “Website” refers to GitHub’s website located at github.com, and all content, services, and products provided by GitHub at or through the Website. It also refers to GitHub-owned subdomains of github.com, such as education.github.com and pages.github.com. These Terms also govern GitHub’s conference websites, such as githubuniverse.com, and product websites, such as atom.io. Occasionally, websites owned by GitHub may provide different or additional terms of service. If those additional terms conflict with this Agreement, the more specific terms apply to the relevant page or service. "Customer", “You,” and “Your” refer to the company, or organization that has visited or is using the Website or Service; that accesses or uses any part of the account; or that directs the use of the account in the performance of its functions. Special terms may apply for business or government accounts (See Section B(6): Additional Terms). "User" refers to the individual who has visited or is using the Website or Service on your behalf; that accesses or uses any part of the account on your behalf; or that directs the use of the account in the performance of their functions on your behalf. A User must be at least 13 years of age. “GitHub,” “We,” and “Us” refer to GitHub, Inc., as well as our affiliates, directors, subsidiaries, contractors, licensors, officers, agents, and employees. A "Corporate Account" refers to any account created by a User on behalf of an entity, such as a company, non-profit organization, or group. A Corporate Account may include a Business plan, a Team plan, or a Developer plan. “Content” refers to content featured or displayed through the Website, including without limitation text, data, articles, images, photographs, graphics, software, applications, designs, features, and other materials that are available on the Website or otherwise available through the Service. "Content" also includes Services. “User-Generated Content” is Content, written or otherwise, created or uploaded by our Users. "Your Content" is Content that you create or own. B. Account Terms Short version: A human must create your account; the creator and Users of your account must be 13 or over; you must provide a valid email address; and you may not have more than one free account. You alone are responsible for your account and anything that happens while you are signed in to or using your account. You are responsible for keeping your account secure. 1. Required Information You must provide a valid email address and your company’s name in order to complete the signup process. Any other information requested, such as your real name, is optional, unless you upgrade to a paid account. Please see the section on Payment for information about paid accounts. 2. Corporate Terms Applicability The Corporate Terms of Service Agreement applies only if you are entering into an agreement with GitHub on behalf of an entity, such as a company, non-profit organization, or group. If you are entering into an agreement with GitHub as an individual, you should not sign this Agreement; please use the GitHub Terms of Service Agreement. To the extent these terms conflict with any other terms you've accepted for use of GitHub.com, these terms will govern with respect to any work you do on GitHub on behalf of Customer. If you are entering into this Agreement on behalf of an entity, you represent that you are authorized to enter into the Agreement and bind the entity to these Terms. 3. Corporate Account Association If you would like to associate your Corporate Account with a company name, we will do our best to confirm that association based on the information you provide to us. The more information you provide, the better able we will be to confirm that association. Information that helps us confirm a company's association with an account includes: the name of the business included at the time of acceptance of these Terms, the payment information, and the email addresses associated with the account. In the event that you do not provide sufficient information for us to confirm your company's association with the account, association will be determined by the email addresses and security settings within your account settings. 4. Corporate Account Requirements You must create an individual account before you can create a Corporate Account. We have a few simple rules for individual accounts on GitHub: You must be a human to create an account. Accounts registered by "bots" or other automated methods are not permitted. We do permit machine accounts: A machine account is an account set up by an individual human who accepts the Terms on behalf of the account, provides a valid email address, and is responsible for its actions. A machine account is used exclusively for performing automated tasks. Multiple users may direct the actions of a machine account, but the owner of the account is ultimately responsible for the machine's actions. You may maintain no more than one free machine account in addition to your free personal account. One person or legal entity may maintain no more than one free account (if you choose to control a machine account as well, that's fine, but it can only be used for running a machine). You may not create an account for the use of any User under the age of 13. While we are thrilled to see brilliant young coders get excited by learning to program, we must comply with United States law. GitHub does not target our Service to children under 13, and we do not permit any Users under 13 on our Service. If we learn of any User under the age of 13, we will terminate that User’s account immediately. If you are a resident of a country outside the United States, your country’s minimum age may be older; in such a case, you are responsible for complying with your country’s laws. Your login may only be used by one person — i.e., a single login may not be shared by multiple people. A paid organization account may create separate logins for as many users as its subscription allows. Overall, the number of Users must not exceed the number of accounts you've ordered from us. 5. User Account Security You are responsible for keeping your account secure while using GitHub. We offer tools such as two-factor authentication to help you maintain your account's security, but the content of your account and its security are up to you. You are responsible for all content posted and activity that occurs under its account (even when content is posted by others who have accounts under your account). You are responsible for maintaining the security of its account and password. GitHub cannot and will not be liable for any loss or damage from your failure to comply with this security obligation. You will promptly notify GitHub if you become aware of any unauthorized use of, or access to, our Service through your account, including any unauthorized use of your password or account. 6. Additional Terms In some situations, third parties' terms may apply to your use of GitHub. For example, you may be a member of an organization on GitHub with its own terms or license agreements; you may download an application that integrates with GitHub; or you may use GitHub to authenticate to another service. Please be aware that while these Terms are our full agreement with you, other parties' terms govern their relationships with you. If you are a government User or otherwise accessing or using any GitHub Service in a government capacity, this Government Amendment to GitHub Terms of Service applies to you, and you agree to its provisions. If you have signed up for a Business Plan, the Business Plan Addendum applies to you, and you agree to its provisions. C. Acceptable Use Short version: GitHub hosts a wide variety of collaborative projects from all over the world, and that collaboration only works when our users are able to work together in good faith. While using the service, you must follow this Acceptable Use Policy, which includes some restrictions on content you can post, conduct on the service, and other limitations. In short, be excellent to each other. 1. Compliance with Laws and Regulations Your use of the Website and Service must not violate any applicable laws, including copyright or trademark laws, export control laws, or other laws in your jurisdiction. You are responsible for making sure that your and your Users' use of the Service is in compliance with laws and any applicable regulations. 2. Content Restrictions You agree that under no circumstances will you or your Users upload, post, host, or transmit any content that: is unlawful or promotes unlawful activities; is or contains sexually obscene content; is libelous, defamatory, or fraudulent; is discriminatory or abusive toward any individual or group; contains or installs any active malware or exploits, or uses our platform for exploit delivery (such as part of a command and control system); or infringes on any proprietary right of any party, including patent, trademark, trade secret, copyright, right of publicity, or other rights. 3. Conduct Restrictions While using GitHub, you agree that under no circumstances, will you or your Users: harass, abuse, threaten, or incite violence towards any individual or group, including GitHub employees, officers, and agents, or other GitHub Users; use our servers for any form of excessive automated bulk activity (for example, spamming), or relay any other form of unsolicited advertising or solicitation through our servers, such as get-rich-quick schemes; attempt to disrupt or tamper with GitHub's servers in ways that could harm our Website or Service, to place undue burden on GitHub's servers through automated means, or to access GitHub's Service in ways that exceed your authorization (other than those authorized by the GitHub Bug Bounty program); impersonate any person or entity, including any of our employees or representatives, including through false association with GitHub, or by fraudulently misrepresenting your identity or site's purpose; or violate the privacy of any third party, such as by posting another person's personal information without consent. 4. Services Usage Limits You agree not to reproduce, duplicate, copy, sell, resell or exploit any portion of the Service, use of the Service, or access to the Service without GitHub's express written permission. 5. Scraping Scraping refers to extracting data from our Website via an automated process, such as a bot or webcrawler. It does not refer to the collection of information through GitHub's API. Please see Section H for our API Terms. You may scrape the website for the following reasons: Researchers may scrape public, non-personal information from GitHub for research purposes, only if any publications resulting from that research are open access. Archivists may scrape GitHub for public data for archival purposes. You may not scrape GitHub for spamming purposes, including for the purposes of selling GitHub users' personal information, such as to recruiters, headhunters, and job boards. All use of GitHub data gathered through scraping must comply with the GitHub Privacy Statement. 6. Privacy Misuse of GitHub Users' Personal Information is prohibited. Any person, entity, or service collecting data from GitHub must comply with the GitHub Privacy Statement, particularly in regards to the collection of our Users' Personal Information (as defined in the GitHub Privacy Statement). If you collect any GitHub User's Personal Information from GitHub, you agree that you will only use the Personal Information you gather for the purpose for which our User has authorized it. You agree that you will reasonably secure any Personal Information you have gathered from GitHub, and you will respond promptly to complaints, removal requests, and "do not contact" requests from GitHub or GitHub Users. 7. Excessive Bandwidth Use If we determine your bandwidth usage to be significantly excessive in relation to other GitHub customers, we reserve the right to suspend your account or throttle your file hosting until you can reduce your bandwidth consumption. 8. User Protection You agree not to engage in activity that significantly harms our Users. We will resolve disputes in favor of protecting our Users as a whole. D. User-Generated Content Short version: You own content you create, but you allow us certain rights to it, so that we can display and share the content you post. You still have control over your content, and responsibility for it, and the rights you grant us are limited to those we need to provide the service. We have the right to remove content or close accounts if we need to. 1. Responsibility for User-Generated Content You may create or upload User-Generated Content while using the Service. You are solely responsible for the content of, and for any harm resulting from, any User-Generated Content that you or your Users post, upload, link to or otherwise make available via the Service, regardless of the form of that Content. We are not responsible for any public display or misuse of your User-Generated Content. 2. GitHub May Remove Content We do not pre-screen User-Generated Content, but we have the right (though not the obligation) to refuse or remove any User-Generated Content that, in our sole discretion, violates any GitHub terms or policies. 3. Ownership of Content, Right to Post, and License Grants You retain ownership of and responsibility for Content you and your Users create or own ("Your Content"). If you're posting anything you or your Users did not create yourselves and on your behalf, or do not own the rights to, you agree that you and your Users are responsible for any of that Content; that you will only submit Content that you have the right to post; and that you will fully comply with any third party licenses relating to Content you post. Because you retain ownership of and responsibility for Your Content, we need you to grant us — and other GitHub users — certain legal permissions, listed in Sections D.4 — D.7. These license grants apply to Your Content. If you upload Content that already comes with a license granting GitHub the permissions we need to run our Service, no additional license is required. You understand that you will not receive any payment for any of the rights granted in Sections D.4 — D.7. The licenses you grant to us will end when you remove Your Content from our servers, unless other users have forked it. 4. License Grant to Us We need the legal right to do things like host Your Content, publish it, and share it. You grant us and our legal successors the right to store, parse, and display Your Content, and make incidental copies as necessary to render the Website and provide the Service. This includes the right to do things like copy it to our database and make backups; show it to you and other users; parse it into a search index or otherwise analyze it on our servers; share it with other users; and perform it, in case Your Content is something like music or video. This license does not grant GitHub the right to sell Your Content or otherwise distribute or use it outside of our provision of the Service. 5. License Grant to Other Users Any User-Generated Content you or your Users post publicly, including issues, comments, and contributions to other users' repositories, may be viewed by others. By setting your repositories to be viewed publicly, you agree to allow others to view and "fork" your repositories (this means that others may make their own copies of Content from your repositories in repositories they control). If you set your pages and repositories to be viewed publicly, you grant each user of GitHub a nonexclusive, worldwide license to use, display, and perform Your Content through the GitHub Service and to reproduce Your Content solely on GitHub as permitted through GitHub's functionality (for example, through forking). You may grant further rights if you adopt a license. If you are uploading Content you did not create or own, you are responsible for ensuring that the Content you upload is licensed under terms that grant these permissions to other GitHub users. 6. Contributions Under Repository License Whenever you make a contribution to a repository containing notice of a license, you license your contribution under the same terms, and you agree that you have the right to license your contribution under those terms. If you have a separate agreement to license your contributions under different terms, such as a contributor license agreement, that agreement will supersede. Isn't this just how it works already? Yep. This is widely accepted as the norm in the open-source community; it's commonly referred to by the shorthand "inbound=outbound". We're just making it explicit. 7. Moral Rights You retain all moral rights to Your Content that you or your Users upload, publish, or submit to any part of the Service, including the rights of integrity and attribution. However, you waive these rights and agree not to assert them against us, to enable us to reasonably exercise the rights granted in Section D.4, but not otherwise. To the extent this agreement is not enforceable by applicable law, you grant GitHub the rights we need to use Your Content without attribution and to make reasonable adaptations of Your Content as necessary to render the Website and provide the Service. E. Private Repositories Short version: You may have access to private repositories. We treat the content of private repositories as confidential, and we only access it for support reasons, with your consent, or if required to for security reasons. 1. Control of Private Repositories. Some accounts, such as paid accounts, may have private repositories, which allow the User to control access to Content. 2. Confidentiality of Private Repositories. GitHub considers the contents of private repositories to be confidential to you. GitHub will protect the contents of private repositories from unauthorized use, access, or disclosure in the same manner that we would use to protect our own confidential information of a similar nature and in no event with less than a reasonable degree of care. 3. Access. GitHub employees may only access the content of your private repositories in the following situations: With your consent and knowledge, for support reasons. If GitHub accesses a private repository for support reasons, we will only do so with the owner’s consent and knowledge. When access is required for security reasons. You may choose to enable additional access to your private repositories. For example: You may enable various GitHub services or features that require additional rights to Your Content in private repositories. These rights may vary depending on the service or feature, but GitHub will continue to treat your private repository Content as confidential. If those services or features require rights in addition to those we need to provide the GitHub Service, we will provide an explanation of those rights. You may also grant a third-party application authorization to use, access, and disclose the contents of your private repositories. Your use of third-party applications is at your sole risk; GitHub is not liable for disclosures to third parties that you authorize to access a private repository. 4. Exclusions. If we have reason to believe the contents of a private repository are in violation of the law or of these Terms, we have the right to access, review, and remove them. Additionally, we may be compelled by law to disclose the contents of your private repositories. F. Copyright Infringement and DMCA Policy If you believe that content on our website violates your copyright, please contact us in accordance with our Digital Millennium Copyright Act Policy. If you are a copyright owner and you believe that content on GitHub violates your rights, please contact us via our convenient DMCA form or by emailing copyright@github.com. There may be legal consequences for sending a false or frivolous takedown notice. Before sending a takedown request, you must consider legal uses such as fair use and licensed uses. We will terminate the accounts of repeat infringers of this policy. G. Intellectual Property Notice Short version: We own the service and all of our content. In order for you to use our content, we give you certain rights to it, but you may only use our content in the way we have allowed. 1. GitHub's Rights to Content GitHub and our licensors, vendors, agents, and/or our content providers retain ownership of all intellectual property rights of any kind related to the Website and Service. We reserve all rights that are not expressly granted to you under this Agreement or by law. The look and feel of the Website and Service is copyright © GitHub, Inc. All rights reserved. You may not duplicate, copy, or reuse any portion of the HTML/CSS, Javascript, or visual design elements or concepts without express written permission from GitHub. 2. GitHub Trademarks and Logos If you’d like to use GitHub’s trademarks, you must follow all of our trademark guidelines, including those on our logos page: https://github.com/logos. 3. License to GitHub Policies This Agreement is licensed under this Creative Commons Zero license. For details, see our site-policy repository. H. API Terms Short version: You agree to these Terms of Service, plus this Section H, when using any of GitHub's APIs (Application Provider Interface), including use of the API through a third party product that accesses GitHub. No Abuse or Overuse of the API Abuse or excessively frequent requests to GitHub via the API may result in the temporary or permanent suspension of your account's access to the API. GitHub, in our sole discretion, will determine abuse or excessive usage of the API. We will make a reasonable attempt to warn you via email prior to suspension. You may not share API tokens to exceed GitHub's rate limitations. You may not use the API to download data or Content from GitHub for spamming purposes, including for the purposes of selling GitHub users' personal information, such as to recruiters, headhunters, and job boards. All use of the GitHub API is subject to these Terms of Service and the GitHub Privacy Statement. GitHub may offer subscription-based access to our API for those Users who require high-throughput access or access that would result in resale of GitHub's Service. I. Additional Terms for GitHub Pages Short version: The GitHub Pages hosting service is subject to certain rules, in addition to the rest of the Terms. Each GitHub account comes with access to the GitHub Pages static hosting service. This hosting service is intended to host static web pages for GitHub users. GitHub Pages are subject to some specific bandwidth and usage limits, and may not be appropriate for some high-bandwidth uses. Please see our GitHub Pages guidelines for more information. GitHub reserves the right at all times to reclaim any GitHub subdomain without liability. J. Additional Terms for GitHub Marketplace Short version: GitHub Marketplace is subject to certain rules, in addition to the rest of this Agreement. GitHub Marketplace is a platform for developers of all kinds. Through GitHub Marketplace, you can list Developer Products (as defined in the GitHub Marketplace Terms of Service) or buy others' Developer Products. Prior to submitting a project to be listed, you must agree to the GitHub Marketplace Developer Agreement. If you buy Developer Products, the GitHub Marketplace Terms of Service controls your purchase. This Agreement, as well as the GitHub Marketplace Terms of Service, will govern your use of GitHub Marketplace. Many of these Developer Products are used exclusively for performing automated tasks. In addition, multiple Users may direct the actions of a Developer Product. However, if you purchase and/or set up a Developer Product on your account, or you are an owner of an account with an integrated Developer Product, then you will be responsible for the Developer Product's actions that are performed on or through your account. Any violation of the GitHub Marketplace Terms of Service is also a violation of this Agreement. K. Advertising on GitHub Short version: We do not generally prohibit use of GitHub for advertising. However, we expect our users to follow certain limitations, so GitHub does not become a spam haven. No one wants that. 1. GitHub Pages We offer Pages sites primarily as a showcase for personal and organizational projects. Some monetization efforts are permitted on Pages, such as donation buttons and crowdfunding links. 2. GitHub Repositories GitHub repositories are intended to host Content. You may include static images, links, and promotional text in the README documents associated with your repositories, but they must be related to the project you are hosting on GitHub. You may not advertise in other Users' repositories, such as by posting monetized or excessive bulk content in issues. 3. Spamming and Inappropriate Use of GitHub Advertising Content, like all Content, must not violate the law or these Terms of Use, for example through excessive bulk activity such as spamming. We reserve the right to remove any advertisements that, in our sole discretion, violate any GitHub terms or policies. L. Payment Short version: You are responsible for any fees associated with your use of GitHub. We are responsible for communicating those fees to you clearly and accurately, and letting you know well in advance if those prices change. 1. Pricing Our pricing and payment terms are available at github.com/pricing. If you agree to a subscription price, that will remain your price for the duration of the payment term; however, prices are subject to change at the end of a payment term. 2. Upgrades, Downgrades, and Changes We will immediately bill you when you upgrade from the free plan to any paying plan. If you change from a monthly billing plan to a yearly billing plan, GitHub will bill you for a full year at the next monthly billing date. If you upgrade to a higher level of service, we will bill you for the upgraded plan immediately. You may change your level of service at any time by choosing a plan option or going into your Billing settings. If you choose to downgrade your account, you may lose access to Content, features, or capacity of your account. Please see our section on Cancellation for information on getting a copy of that Content. 3. Billing Schedule; No Refunds For monthly or yearly payment plans, the Service is billed in advance on a monthly or yearly basis respectively and is non-refundable. There will be no refunds or credits for partial months or partial years of service, downgrade refunds, or refunds for months or years unused with an open account; however, the service will remain active for the length of the paid billing period. In order to treat everyone equally, no exceptions will be made. 4. Authorization By agreeing to these Terms, you are giving us permission to charge your on-file credit card, PayPal account, or other approved methods of payment for fees that you authorize for GitHub. 5. Responsibility for Payment You are responsible for all fees, including taxes, associated with your use of the Service. By using the Service, you agree to pay GitHub any charge incurred in connection with your use of the Service. If you dispute the matter, contact GitHub Support. You are responsible for providing us with a valid means of payment for paid accounts. Free accounts are not required to provide payment information. M. Cancellation and Termination Short version: You may close your account at any time. If you do, we'll treat your information responsibly. 1. Account Cancellation It is your responsibility to properly cancel your account with GitHub. You can cancel your account at any time by going into your Settings in the global navigation bar at the top of the screen. The Account screen provides a simple, no questions asked cancellation link. We are not able to cancel accounts in response to an email or phone request. 2. Upon Cancellation We will retain and use your information as necessary to comply with our legal obligations, resolve disputes, and enforce our agreements, but barring legal requirements, we will delete your full profile and the Content of your repositories within 90 days of cancellation or termination (though some information may remain in encrypted backups). This information can not be recovered once your account is cancelled. We will not delete Content that you have contributed to other users' repositories or that other users have forked. Upon request, we will make a reasonable effort to provide an account owner with a copy of your lawful, non-infringing account contents after any account closure, suspension, or downgrade. You must make this request within 90 days of closure, suspension, or downgrade. 3. GitHub May Terminate GitHub has the right to suspend access to all or any part of the Website or your account at any time, with or without cause, with or without notice, effective immediately. GitHub has the right to terminate your account at any time, with or without cause, upon 30 days advance notice or if your account has been suspended for more than 90 days. 4. Survival All provisions of this Agreement which by their nature should survive termination will survive termination, including, without limitation, ownership provisions, warranty disclaimers, indemnity, and limitations of liability. N. Communications with GitHub Short version: We use email and other electronic means to stay in touch with our users. 1. Electronic Communication Required For contractual purposes, you (1) consent to receive communications from us in an electronic form via the email address you have submitted or via the Service; and (2) agree that all Terms of Service, agreements, notices, disclosures, and other communications that we provide to you electronically satisfy any legal requirement that those communications would satisfy if they were on paper. This section does not affect your non-waivable rights. 2. Legal Notice to GitHub Must Be in Writing Communications made through email or GitHub Support's messaging system will not constitute legal notice to GitHub or any of its officers, employees, agents or representatives in any situation where notice to GitHub is required by contract or any law or regulation. Legal notice to GitHub must be in writing and served on GitHub's legal agent. 3. No Phone Support GitHub only offers support via email, in-Service communications, and electronic messages. We do not offer telephone support. O. Disclaimer of Warranties Short version: We provide our service as is, and we make no promises or guarantees about this service. Please read this section carefully; you should understand what to expect. GitHub provides the Website and the Service “as is” and “as available,” without warranty of any kind. Without limiting this, we expressly disclaim all warranties, whether express, implied or statutory, regarding the Website and the Service including without limitation any warranty of merchantability, fitness for a particular purpose, title, security, accuracy and non-infringement. GitHub does not warrant that the Service will meet your requirements; that the Service will be uninterrupted, timely, secure, or error-free; that the information provided through the Service is accurate, reliable or correct; that any defects or errors will be corrected; that the Service will be available at any particular time or location; or that the Service is free of viruses or other harmful components. You assume full responsibility and risk of loss resulting from your downloading and/or use of files, information, content or other material obtained from the Service. P. Limitation of Liability To the maximum extent permitted by applicable law, each party's total cumulative liability to the other party or any third party under this Agreement from all causes of action and all theories of liability will be limited to and will not exceed the fees you've actually paid us during the 24 months preceding the claim giving rise to such liability. You understand and agree that we will not be liable to you or any third party for any loss of profits, use, goodwill, or data, or for any incidental, indirect, special, consequential or exemplary damages, however arising, that result from the use, disclosure, or display of your User-Generated Content; your use or inability to use the Service; any modification, price change, suspension or discontinuance of the Service; the Service generally or the software or systems that make the Service available; unauthorized access to or alterations of your transmissions or data; statements or conduct of any third party on the Service; any other user interactions that you input or receive through your use of the Service; or any other matter relating to the Service. Our liability is limited whether or not we have been informed of the possibility of such damages, and even if a remedy set forth in this Agreement is found to have failed of its essential purpose. We will have no liability for any failure or delay due to matters beyond our reasonable control. Q. Release and Indemnification 1. Customer’s Indemnification You are responsible for your use of the service. If you harm someone else or get into a dispute with someone else, we will not be involved. Subject to the limitations above, you agree to indemnify us and us hold harmless from and against any and all third party claims and expenses, including attorneys’ fees, arising out of your use of the Website and the Service, including but not limited to your violation of this Agreement, provided that GitHub (a) promptly gives Customer written Notice of the claim, demand, suit or proceeding.; (b) gives Customer sole control of the defense and settlement of the claim, demand, suit, or proceeding (provided that Customer may not settle any claim, demand, suit, or proceeding unless the settlement unconditionally releases GitHub of all liability); and (c) provides to Customer all reasonable assistance, at Customer’s expense. If you have a dispute with one or more Users, you agree to release GitHub from claims, demands and damages (actual and consequential) of every kind and nature, known and unknown, arising out of or in any way connected with such disputes, provided that GitHub (i) promptly gives you written notice of the claim, demand, suit or proceeding; (ii) gives you sole control of the defense and settlement of the claim, demand, suit or proceeding (provided that you may not settle any claim, demand, suit or proceeding unless the settlement unconditionally releases GitHub of all liability); and (iii) provides to you all reasonable assistance, at your expense. 2. GitHub’s Indemnification We’ll defend or settle, at our option and expense, any third-party claim brought against you to the extent that it’s based on an allegation that GitHub’s service infringes a copyright or misappropriates a trade secret of any third party (each, a “Claim”), and, subject to Section P, above, Limitation of Liability, we’ll pay all damages and costs (including reasonable legal fees) finally awarded by a court of final appeal attributable to such a Claim, provided that you notify us in writing of any such Claim as soon as reasonably practicable and allow us to control, and reasonably cooperate with us in the defense of, any such Claim and related settlement negotiations. You understand that we’ll have no obligation to indemnify you for any claim (1) if the total aggregate fees received by GitHub with respect to your subscription to the services in the 12 month period immediately preceding the claim is less than US $50,000; (2) if the services are modified by any party other than GitHub, but solely to the extent the alleged infringement is caused by such modification; (3) if the services are used in combination with any services, software, or equipment without prior written authorization by GitHub, but solely to the extent the alleged infringement is caused by such combination; (4) to unauthorized use of the services; (5) to any Claim arising as a result of (y) your Content (or circumstances covered by your indemnification obligations in this Section Q (Release and Indemnification: Customer’s Indemnification)) or (z) any third-party deliverables or components contained with the services; or (6) if you settle or make any admissions with respect to a claim without GitHub’s prior written consent. If your use of the services is, or in our reasonable opinion is likely to be, subject to a Claim under this Section Q, we may, at our sole option and at no charge to you (and in addition to our indemnity obligation to you in this Section Q): (i) procure for you the right to continue using the services; (ii) replace or modify the services so that they are non-infringing and substantially equivalent in function to the original services; or (iii) if options (i) and (ii) above are not commercially practicable in our reasonable estimation, we can terminate these Terms of Service. R. Changes to These Terms Short version: We want our users to be informed of important changes to our terms, but some changes aren't that important — we don't want to bother you every time we fix a typo. So while we may modify this agreement at any time, we will notify users of any changes that affect your rights and give you time to adjust to them. We reserve the right, at our sole discretion, to amend these Terms of Service at any time and will update these Terms of Service in the event of any such amendments. We will notify our Users of material changes to this Agreement, such as price changes, at least 30 days prior to the change taking effect by posting a notice on our Website. For non-material modifications, your continued use of the Website constitutes agreement to our revisions of these Terms of Service. We reserve the right at any time and from time to time to modify or discontinue, temporarily or permanently, the Website (or any part of it) with or without notice. S. Miscellaneous 1. Governing Law Except to the extent applicable law provides otherwise, this Agreement between you and GitHub and any access to or use of the Website or the Service are governed by the federal laws of the United States of America and the laws of the State of California, without regard to conflict of law provisions. You and GitHub agree to submit to the exclusive jurisdiction and venue of the courts located in the City and County of San Francisco, California. 2. Non-Assignability GitHub may assign or delegate these Terms of Service and/or the GitHub Privacy Statement, in whole or in part, to any person or entity at any time with or without your consent, including the license grant in Section D.4. Except in connection with a merger, acquisition, corporate reorganization, or sale of all or substantially all of your business or assets, subject to Notice to GitHub, you may not assign or delegate any rights or obligations under the Terms of Service or Privacy Statement without our prior written consent, and any unauthorized assignment and delegation by you is void. 3. Section Headings and Summaries Throughout this Agreement, each section includes titles and brief summaries of the following terms and conditions. These section titles and brief summaries are not legally binding. 4. Severability, No Waiver, and Survival If any part of this Agreement is held invalid or unenforceable, that portion of the Agreement will be construed to reflect the parties’ original intent. The remaining portions will remain in full force and effect. Any failure on the part of GitHub to enforce any provision of this Agreement will not be considered a waiver of our right to enforce such provision. Our rights under this Agreement will survive any termination of this Agreement. 5. Amendments; Complete Agreement This Agreement may only be modified by a written amendment signed by an authorized representative of GitHub, or by the posting by GitHub of a revised version in accordance with Section R. Changes to These Terms. These Terms of Service, together with the GitHub Privacy Statement, represent the complete and exclusive statement of the agreement between you and us. This Agreement supersedes any proposal or prior agreement oral or written, and any other communications between you and GitHub relating to the subject matter of these terms, including any confidentiality or nondisclosure agreements. 6. Publicity If you publicly display the name of your company or organization on your account or otherwise publicly display its trademarks or logos on your profile page, you allow us to use your company's or organization's name to identify you as a GitHub customer in our promotional materials. You may revoke this permission by hiding your company or organization name from public display and notifying us in writing to stop using your organization's name in our promotional materials. However, GitHub will have no obligation to remove or recall any prior use or distribution of the promotional materials. 7. Questions Questions about the Terms of Service? Contact us. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support GitHub Business Plan Addendum - User Documentation <meta name="Description" content=" Business Plan Addendum These are the additional terms for GitHub's Business plan (\"Business Plan Terms\"). Any capitalized terms not defined in these Business Plan Terms will be defined in the Terms …"> GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Site Policy / GitHub Business Plan Addendum GitHub Business Plan Addendum mac windows linux all Business Plan Addendum These are the additional terms for GitHub's Business plan ("Business Plan Terms"). Any capitalized terms not defined in these Business Plan Terms will be defined in the Terms of Service or the Corporate Terms of Service. By agreeing to these Business Plan Terms, you also agree to the Terms of Service, as determined by the type of account you have. The Business Plan includes an Organization account, SAML single sign-on, access provisioning, and 24/5 support with an 8-hour response time. This list of features and services is non-exhaustive and may be updated from time to time. For more information, see the Business Plan page. Definitions: Active User: means a user trying to access our Service at the time of an Outage. Customer: person or entity who has purchased a Business plan from GitHub. Eligible User: means an individual who is designated as a member of the Customer's Business plan organization by having their individual GitHub account associated with the Customer's Business plan account. Essential Services: means the services essential to GitHub's core version control functionality, including features and services such as creating, forking, and cloning repositories; creating, committing, and merging branches; creating, reviewing, and merging pull requests; and, web, API, and Git client interfaces to the core Git workflows. The following are examples of peripheral features and services not included: webhooks, Gists, Pages, or email notifications. Outage: means the interruption of an Essential Service that affects more than 50% of Active Users. Scheduled Downtime: means maintenance or updates to the Service (including to any servers or other hardware required to host the Service), which has been scheduled in advance, during which the Service may be down or inaccessible to Users. Service Credit: a dollar credit, calculated as set forth below, that we may credit back to an eligible account. Business Plan Uptime SLA Program Benefits: We guarantee that the service will have a quarterly Uptime percentage of 99.95%. That means GitHub's Essential Services will not be interrupted by an Outage affecting more than 50% of Active Users, for more than .05% of the quarter. If we don't meet our 99.95% quarterly Uptime guarantee, we may issue Service Credits to Customers. How do we calculate Uptime? Our Uptime calculation is based on the percentage of successful requests we serve through our web, API, and Git client interfaces. What's excluded from our Uptime guarantee? Outages resulting from: Scheduled Downtime Customer's acts, omissions, or misuse of the Services, including violations of the Terms of Service. Failures of your internet connectivity Factors outside our reasonable control, including Internet access related problems, force majeure events, and third party services or technology Your equipment, services, or other technology What are Uptime Service Credits, how can I find out if I have them, and how can I redeem them? If GitHub's quarterly Uptime percentage drops below our 99.95% Uptime guarantee, then Customer is entitled to receive 25 times the amount that was paid for the Outage time that exceeds the quarterly Uptime guarantee ("Uptime Service Credit"), which will be applied against the Customer's next bill. Uptime Service Credits are calculated at the end of each quarter, and may only be granted upon request. To find out about GitHub's Uptime percentage, you can request an Uptime report at the end of each quarter. In order to be granted Uptime Service Credits, either an account Owner or Billing Manager must send in a written request, on Customer's behalf, within 30 days of the end of each quarter. Uptime Service Credits may not be saved. After being granted an Uptime Service Credit, it will be automatically applied to Customer's next bill. Written requests should be sent to GitHub Support. Disclaimer and Limitation of Liability: GitHub's Status Page is not connected to this Uptime SLA and is not an accurate representation of GitHub's Uptime for the purposes of calculating Uptime Service Credits. Service Credits are limited to 30 days of paid service, per quarter. Service Credits are Customer's only remedy for any failure by GitHub to meet any Uptime obligations as identified in this Addendum. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Amendment to GitHub Terms of Service Applicable to U.S. Federal Government Users - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Site Policy / Amendment to GitHub Terms of Service Applicable to U.S. Federal Government Users Amendment to GitHub Terms of Service Applicable to U.S. Federal Government Users mac windows linux all This Amendment to GitHub's Terms of Service applies only to users that are using GitHub on behalf of the United States federal government. If you are not using GitHub on behalf of the U.S. federal government, the standard GitHub Terms of Service apply to you. This Amendment is an agreement between GitHub, Inc. ("GitHub" or "Company") and U.S. federal government users of the GitHub.com web site (the “Service”) and applies solely to any U.S. federal government agency and its users who use or access the Service on behalf of the U.S. federal government (the "Government"). You, as a United States government entity, are required, when entering into agreements with other parties, to follow applicable federal laws and regulations, including those related to ethics; privacy and security; accessibility; records retention; limitations on indemnification; fiscal law constraints; advertising and endorsements; freedom of information; and governing law and dispute resolution forum. GitHub and You (together, the "Parties") agree that modifications to the GitHub Terms of Service (the "ToS") are appropriate to accommodate Your legal status, Your public (in contrast to private) mission, and other special circumstances. Accordingly, the ToS are hereby modified by this Amendment as they pertain to the Government's use of the Company web site and services: A. Public purpose Government entity - "You" within the ToS shall mean the Government itself and shall not bind, in their individual capacity, the individual(s) who utilize the Company site or services on the Government's behalf. Company will look solely to the Government to enforce any violation or breach of the ToS by such individuals, subject to federal law. Advertisements - Company hereby agrees not to serve or display any third-party commercial advertisements or solicitations on any pages within the Company site displaying content created by or under the control of the Government. This exclusion shall not extend to house ads, which Company may serve on such pages in a non-intrusive manner. The foregoing obligations are contingent upon the email address designated on Your account details page ending in .gov, .mil, or .fed.us. B. Your content on GitHub Access and use - Company acknowledges that the Government's use of the Service may energize significant citizen engagement. Language in the ToS allowing Company to terminate service, refuse or remove any Content, or close the Government's account, at any time, for any reason, is modified to reflect the Parties' agreement that Company may unilaterally modify or discontinue service, temporarily or permanently, refuse or remove any Content, and/or terminate the Government's account only for breach of the Government’s obligations under the ToS or its material failure to comply with the instructions and guidelines posted on the Service, or if Company ceases to operate the Service generally. Company will provide the Government with a reasonable opportunity to cure any breach or failure on the Government's part. No endorsement - Company agrees that Your seals, trademarks, logos, service marks, trade names, and the fact that You have a presence on the Company site and use its services, shall not be used by Company in such a manner as to state or imply that Company's products or services are endorsed, sponsored or recommended by You or by any other element of the federal government, or are considered by these entities to be superior to any other products or services. Except for pages whose design and content is under the control of the Government, or for links to or promotion of such pages, Company agrees not to display any government seals or logos on the Company's homepage or elsewhere on the Company Site, unless permission to do so has been granted by the Government or by other relevant federal government authority. Company may list the Government's name in a publicly available customer list so long as the name is not displayed in a more prominent fashion than that of any other third-party name. Provision of data - In case of termination of service, within 30 days of such termination, upon request, Company will provide you with all user-generated content that is publicly visible through the Sites You created at Company. Data will be provided in a commonly used file or database format as Company deems appropriate. Company will not provide data if doing so would violate its privacy policy, available at https://help.github.com/privacy/. C. Unpaid and paid plans No cost agreement - Nothing in this Amendment or ToS obligates You to expend appropriations or incur financial obligations. The Parties acknowledge and agree that none of the obligations arising from this Amendment or ToS are contingent upon the payment of fees by one party to the other. At the Company’s discretion, GitHub may offer a free account under a free usage plan, such as a Free for Open Source Plan, and in that case this Amendment will apply to the Government’s usage under the free account/plan. This Amendment also applies when the Government uses one of GitHub’s paid usage plans. Government responsibilities under paid usage plans - You acknowledge that while Company will provide You with service under a free plan, Company reserves the right to begin charging for that service at some point in the future. Company will provide You with at least 30 days advance notice of a change involving the charging of fees for a free service. You also understand that Company offers paid plans for a fee. The Parties understand that fee-based services are categorically different than free products, and are subject to federal procurement rules and processes. Before the Government decides to enter into a business or enterprise subscription, or any other fee-based service that this Company or alternative providers may offer now or in the future, You agree: to determine the Government has a need for those additional services for a fee; to consider the subscription's value in comparison with comparable services available elsewhere; to determine that Government funds are available for payment; to properly use the Government Purchase Card if that Card is used as the payment method; to review any then-applicable ToS for conformance to federal procurement law; and in all other respects to follow applicable federal acquisition laws, regulations and agency guidelines (including those related to payments) when initiating that separate action. No business relationship created - The Parties are independent entities and nothing in this Amendment or ToS creates an agency, partnership, joint venture, or employer/employee relationship. D. Federal Regulations Security - Company will, in good faith, exercise due diligence using generally accepted commercial business practices for IT security, to ensure that systems are operated and maintained in a secure manner, and that management, operational and technical controls will be employed to ensure security of systems and data. Recognizing the changing nature of the Web, Company will continuously work with users to ensure that its products and services are operated and maintained in a secure manner. Company agrees to discuss implementing additional security controls as deemed necessary by the Government to conform to the Federal Information Security Management Act (FISMA), 44 U.S.C. 3541 et seq. Federal Records - Government acknowledges that use of Company's site and services may require management of Federal records. Government and user-generated content may meet the definition of Federal records as determined by the agency. If the Company holds Federal records, the Government and the Company must manage Federal records in accordance with all applicable records management laws and regulations, including but not limited to the Federal Records Act (44 U.S.C. chs. 21, 29, 31, 33), and regulations of the National Archives and Records Administration (NARA) at 36 CFR Chapter XII Subchapter B). Managing the records includes, but is not limited to, secure storage, retrievability, and proper disposition of all Federal records including transfer of permanently valuable records to NARA in a format and manner acceptable to NARA at the time of transfer. The Government is responsible for ensuring that the Company is compliant with applicable records management laws and regulations through the life and termination of the Agreement. E. General Conditions Indemnification - Any provisions in the ToS related to indemnification, damages, attorney’s fees, and settlement are hereby waived. Liability of the Government for any breach of the ToS or this Agreement, or any claim, demand, suit or proceeding arising from the ToS or this Agreement, shall be determined under the Federal Tort Claims Act, or other governing authority. Liability of Company for any breach of the ToS or this Agreement, or any claim, demand, suit or proceeding arising from the ToS or this Agreement, shall be determined by applicable federal or state law. Limitation of liability - The Parties agree that nothing in the Limitation of Liability clause or elsewhere in the ToS in any way grants Company a waiver from, release of, or limitation of liability pertaining to, any past, current or future violation of federal law. Governing law and Forum - The dispute resolution provision in the ToS is hereby deleted. The ToS and this Amendment shall be governed, interpreted and enforced in accordance with applicable federal laws of the United States of America and exclusive jurisdiction shall be in the appropriate U.S. federal courts. To the extent permitted by federal law, the laws of the State of California will apply in the absence of federal law. Assignment - Neither party may assign its obligations under this Amendment or ToS to any third-party without prior written consent of the other; however, GitHub may, without the Government's consent, assign its obligations to an Government using the service under a free usage plan under this Amendment or ToS to an affiliate or to a successor or acquirer, as the case may be, in connection with a merger, acquisition, corporate reorganization or consolidation, or the sale of all or substantially all of GitHub's assets. F. Changes to this agreement Precedence; Further Amendment; Termination - This Amendment constitutes an amendment to the ToS; language in the ToS indicating it may not be modified or that it alone is the entire agreement between the Parties is waived. If there is any conflict between this Amendment and the ToS, or between this Amendment and other rules or policies on the Company site or services, this Amendment shall prevail. This Amendment may be further amended only upon written agreement executed by both Parties. The Government may close its account and terminate this agreement at any time. Company may close Government's account and terminate this agreement on 30 days written notice, but the Government shall not be entitled to a refund of any fees paid. Posting and availability of this Amendment - The parties agree this Amendment contains no confidential or proprietary information, and either party may release it to the public at large. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Guidelines for Legal Requests of User Data - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Site Policy / Guidelines for Legal Requests of User Data Guidelines for Legal Requests of User Data mac windows linux all Are you a law enforcement officer conducting an investigation that may involve user content hosted on GitHub? Or maybe you're a privacy-conscious person who would like to know what information we share with law enforcement and under what circumstances. Either way, you're on the right page. In these guidelines, we provide a little background about what GitHub is, the types of data we have, and the conditions under which we will disclose private user information. Before we get into the details, however, here are a few important details you may want to know: We will notify affected users about any requests for their account information, unless prohibited from doing so by law or court order. We will not disclose location-tracking data, such as IP address logs, without a valid court order or search warrant. We will not disclose any private user content, including the contents of private repositories, without a valid search warrant. About these guidelines Our users trust us with their software projects and code—often some of their most valuable business or personal assets. Maintaining that trust is essential to us, which means keeping user data safe, secure, and private. While the overwhelming majority of our users use GitHub's services to create new businesses, build new technologies, and for the general betterment of humankind, we recognize that with millions of users spread all over the world, there are bound to be a few bad apples in the bunch. In those cases, we want to help law enforcement serve their legitimate interest in protecting the public. By providing guidelines for law enforcement personnel, we hope to strike a balance between the often competing interests of user privacy and justice. We hope these guidelines will help to set expectations on both sides, as well as to add transparency to GitHub's internal processes. Our users should know that we value their private information and that we do what we can to protect it. At a minimum, this means only releasing data to third-parties when the appropriate legal requirements have been satisfied. By the same token, we also hope to educate law enforcement professionals about GitHub's systems so that they can more efficiently tailor their data requests and target just that information needed to conduct their investigation. GitHub terminology Before asking us to disclose data, it may be useful to understand how our system is implemented. GitHub hosts millions of data repositories using the Git version control system. Repositories on GitHub—which may be public or private—are most commonly used for software development projects, but are also often used to work on content of all kinds. Users — Users are represented in our system as personal GitHub accounts. Each user has a personal profile, and can own multiple repositories. Users can create or be invited to join organizations or to collaborate on another user's repository. Collaborators — A collaborator is a user with read and write access to a repository who has been invited to contribute by the repository owner. Organizations — Organizations are a group of two or more users that typically mirror real-world organizations, such as businesses or projects. They are administered by users and can contain both repositories and teams of users. Repositories — A repository is one of the most basic GitHub elements. They may be easiest to imagine as a project's folder. A repository contains all of the project files (including documentation), and stores each file's revision history. Repositories can have multiple collaborators and, at its administrators' discretion, may be publicly viewable or not. Pages — GitHub Pages are public webpages freely hosted by GitHub that users can easily publish through code stored in their repositories. If a user or organization has a GitHub Page, it can usually be found at a URL such as https://username.github.io or they may have the webpage mapped to their own custom domain name. Gists — Gists are snippets of source code or other text that users can use to store ideas or share with friends. Like regular GitHub repositories, Gists are created with Git, so they are automatically versioned, forkable and downloadable. Gists can either be public or secret (accessible only through a known URL). Public Gists cannot be converted into secret Gists. User data on GitHub.com Here is a non-exhaustive list of the kinds of data we maintain about users and projects on GitHub. Public account data — There is a variety of information publicly available on GitHub about users and their repositories. User profiles can be found at a URL such as https://github.com/username. User profiles display information about when the user created their account as well their public activity on GitHub.com and social interactions. Public user profiles can also include additional information that a user may have chosen to share publicly. All user public profiles display: Username The repositories that the user has starred The other GitHub users the user follows The users that follow them Optionally, a user may also choose to share the following information publicly: Their real name An avatar An affiliated company Their location A public email address Their personal web page Organizations to which the user is a member (depending on either the organizations' or the users' preferences) Private account data — GitHub also collects and maintains certain private information about users as outlined in our Privacy Policy. This may include: Private email addresses Payment details Security access logs Data about interactions with private repositories To get a sense of the type of private account information that GitHub collects, you can visit your personal dashboard and browse through the sections in the left-hand menubar. Public repository data — GitHub is home to millions of public, open-source software projects. You can browse almost any public repository (for example, the Atom Project) to get a sense for the information that GitHub collects and maintains about repositories. This can include: The code itself Previous versions of the code Stable release versions of the project Information about collaborators, contributors and repository members Logs of Git operations such as commits, branching, pushing, pulling, forking and cloning Conversations related to Git operations such as comments on pull requests or commits Project documentation such as Issues and Wiki pages Statistics and graphs showing contributions to the project and the network of contributors Private repository data — GitHub collects and maintains the same type of data for private repositories that can be seen for public repositories, except only specifically invited users may access private repository data. Other data — Additionally, GitHub collects analytics data such as page visits and information occasionally volunteered by our users (such as communications with our support team, survey information and/or site registrations). We will notify any affected account owners It is our policy to notify users about any pending requests regarding their accounts or repositories, unless we are prohibited by law or court order from doing so, or in rare, exigent circumstances. Before disclosing user information, we will make a reasonable effort to notify any affected account owner(s) by sending a message to their verified email address providing them with a copy of the subpoena, court order or warrant so that they can have an opportunity to challenge the legal process if they wish. Disclosure of non-public information It is our policy to disclose non-public user information in connection with a civil or criminal investigation only with user consent or upon receipt of a valid subpoena, civil investigative demand, court order, search warrant, or other similar valid legal process. GitHub reserves the right to object to any requests for non-public information. Where GitHub agrees to produce non-public information in response to a lawful request, we will conduct a reasonable search for the requested information. Here are the kinds of information we will agree to produce, depending on the kind of legal process we are served with: With user consent — GitHub will provide private account information, if requested, directly to the user (or an owner, in the case of an organization account), or to a designated third party with the user's written consent once GitHub is satisfied that the user has verified his or her identity. With a subpoena — If served with a valid subpoena, civil investigative demand, or similar legal process issued in connection with an official criminal or civil investigation, we can provide certain non-public account information, which may include: Name(s) associated with the account Email address(es) associated with the account Billing information Registration date and termination date IP address, date, and time at the time of account registration IP address(es) used to access the account at a specified time or event relevant to the investigation Please note that the information available will vary from case to case. Some of the information is optional for users to provide. In other cases, we might not have collected or retained the information. With a court order or a search warrant — We will not disclose account access logs unless compelled to do so by either (i) a court order issued under 18 U.S.C. Section 2703(d), upon a showing of specific and articulable facts showing that there are reasonable grounds to believe that the information sought is relevant and material to an ongoing criminal investigation; or (ii) a search warrant issued under the procedures described in the Federal Rules of Criminal Procedure or equivalent state warrant procedures, upon a showing of probable cause. Account access logs may include: Any logs which would reveal a user's movements over a period of time Account or private repository settings (for example, which users have certain permissions, etc.) User- or IP-specific analytic data such as browsing history Security access logs other than account creation or for a specific time and date Only with a search warrant — We will not disclose the private contents of any user account unless compelled to do so under a search warrant issued under the procedures described in the Federal Rules of Criminal Procedure or equivalent state warrant procedures upon a showing of probable cause. Private user account contents may include: Contents of secret Gists Source code or other content in private repositories Contribution and collaboration records for private repositories Communications or documentation (such as Issues or Wikis) in private repositories Cost reimbursement We reserve the right to seek reimbursement for administrative costs associated with responding to requests for information, as allowed by law. Data preservation We will take steps to preserve account records for up to 90 days upon formal request from U.S. law enforcement in connection with official criminal investigations, and pending the issuance of a court order or other process. Submitting requests Please serve requests to: GitHub, Inc. c/o Incorporating Services, Ltd. 7801 Folsom Boulevard Suite 202 Sacramento, CA 95826 You may also send a courtesy copy to legal@support.github.com. Please make your requests as specific and narrow as possible, including the following information: Full information about authority issuing the request for information The name and badge/ID of the responsible agent An official email address and contact phone number The user, organization, repository name(s) of interest The URLs of any pages, gists or files of interest The description of the types of records you need Please allow at least two weeks for us to be able to look into your request. Requests from foreign law enforcement As a United States company based in California, GitHub is not required to provide data to foreign governments in response to legal process issued by foreign authorities. Foreign law enforcement officials wishing to request information from GitHub should contact the United States Department of Justice Criminal Division's Office of International Affairs. GitHub will promptly respond to requests that are issued via U.S. court by way of a mutual legal assistance treaty (“MLAT”) or letter rogatory. Questions Do you have other questions, comments or suggestions? Please contact GitHub Support. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support Global Privacy Practices - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Site Policy / Global Privacy Practices Global Privacy Practices mac windows linux all Privacy Shield Framework For those located in the European Union, we have applied for certification for the EU–US Privacy Shield on August 26, 2016, and received our certification on January 26, 2017. You may view it on the Privacy Shield List. The Privacy Shield Framework is based on seven principles, and GitHub complies with them in the following ways: Notice We let you know when we're collecting your personal information. We let you know, in our Privacy Statement, what purposes we have for collecting and using your information, who we share that information with and under what restrictions, and what access you have to your data. We let you know that we're participating in the Privacy Shield framework, and what that means to you. We have a Privacy contact form where you can contact us with questions about your privacy. We let you know about your right to invoke binding arbitration, provided at no cost to you, in the unlikely event of a dispute. We let you know that we are subject to the jurisdiction of the Federal Trade Commission. Choice We let you choose what happens to your data. Before we use your data for a purpose other than the one for which you gave it to us, we will let you know and get your permission. We will provide you with reasonable mechanisms to make your choices. Accountability for Onward Transfer When we transfer your information to third party vendors that are processing it on our behalf, we are only sending your data to third parties, under contract with us, that will safeguard it consistently with our Privacy Statement. When we transfer your data to our vendors under Privacy Shield, we remain responsible for it. We share only the amount of data with our third party vendors as is necessary to complete their transaction. Security We will protect your personal information with all reasonable and appropriate security measures. Data Integrity and Purpose Limitation We only collect your data for the purposes relevant for providing our services to you. We collect as little information about you as we can, unless you choose to give us more. We take reasonable steps to ensure that the data we have about you is accurate, current, and reliable for its intended use. Access You are always able to access the data we have about you in your user profile. You may access, update, alter, or delete your information there. Recourse, Enforcement and Liability If you have questions about our privacy practices, you can reach our with our Privacy contact form and we will respond within 45 days at the latest. In the unlikely event of a dispute that we cannot resolve, you have access to binding arbitration at no cost to you. Please see our Privacy Statement for more information. We will conduct regular audits of our relevant privacy practices to verify compliance with the promises we have made. We require our employees to respect our privacy promises, and violation of our privacy policies is subject to disciplinary action up to and including termination of employment. U.S.–Swiss Safe Harbor Framework GitHub received Swiss Safe Harbor Certification on January 28th, 2013, and we continue to maintain our Swiss Safe Harbor certification. Additional information about our Swiss Safe Harbor certification can be found at https://safeharbor.export.gov/companyinfo.aspx?id=33260. In addition, GitHub has never relied solely on our Safe Harbor certification for our data transfers. We also obtain informed consent from our users at the point of data collection, and offer our users control over their own personal data. Please see our Privacy Statement for more information. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support GitHub Community Guidelines - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Site Policy / GitHub Community Guidelines GitHub Community Guidelines mac windows linux all Millions of developers host millions of projects on GitHub — both open and closed source — and we're honored to play a part in enabling collaboration across the community every day. Together, we all have an exciting opportunity and responsibility to make this a community we can be proud of. GitHub users worldwide bring wildly different perspectives, ideas, and experiences, and range from people who created their first "Hello World" project last week to the most well-known software developers in the world. We are committed to making GitHub a welcoming environment for all the different voices and perspectives in our community, while maintaining a space where people are free to express themselves. We rely on our community members to communicate expectations, moderate their projects, and report abusive behavior or content. We do not actively seek out content to moderate. By outlining what we expect to see within our community, we hope to help you understand how best to collaborate on GitHub, and what type of actions or content may violate our Terms of Service. We will investigate any abuse reports and may moderate public content on our site that we determine to be in violation of our Terms of Service. Building a strong community The primary purpose of the GitHub community is to collaborate on software projects. We want people to work better together. Although we maintain the site, this is a community we build together, and we need your help to make it the best it can be. Be welcoming and open-minded - Other collaborators may not have the same experience level or background as you, but that doesn't mean they don't have good ideas to contribute. We encourage you to be welcoming to new collaborators on your projects and discussions. Assume no malice - Humans make mistakes, and disagreements or differences of opinion are a fact of life. Try to approach conflict from the perspective that people generally mean well. This will promote a respectful and friendly atmosphere where people feel comfortable asking questions, participating in discussions, and making contributions. Stay on topic - People use GitHub to get work done and to be more productive. Off topic comments are a distraction (sometimes welcome, but usually not) from getting work done and being productive. Staying on topic helps produce positive and productive discussions. Be clear - Communicating with strangers on the Internet can be awkward. It's hard to convey or read tone, and sarcasm is frequently misunderstood. Try to use clear language, and think about how it will be received by the other person. What if something or someone offends you? We rely on the community to let us know when an issue needs to be addressed. We do not actively monitor the site for offensive content. If you run into something or someone on the site that you find objectionable, here are some tools GitHub provides to help you take action immediately: Communicate expectations - If you participate in a community that has not set their own, community-specific guidelines, encourage them to do so either in the README or CONTRIBUTING file, or in a dedicated code of conduct, by submitting a pull request. Moderate Comments - If you have write-access privileges for a repository, you can edit or delete anyone's comments on commits, pull requests, and issues. Lock Conversations  - If a discussion in an issue or pull request gets out of control, you can lock the conversation. Block Users  - If you encounter a user who continues to demonstrate poor behavior, you can block the user from your personal account or block the user from your organization. Of course, you can always contact us to Report Abuse if you need more help dealing with a situation. What is not allowed? We are committed to maintaining a community where users are free to express themselves and challenge one another's ideas, both technical and otherwise. Such discussions, however, are unlikely to foster fruitful dialog when ideas are silenced because community members are being shouted down or are afraid to speak up. That means you should be respectful and civil at all times, and refrain from attacking others on the basis of who they are. We do not tolerate behavior that crosses the line into the following: Threats of violence - You may not threaten violence towards others or use the site to organize, promote, or incite acts of real-world violence or terrorism. Think carefully about the words you use, the images you post, and even the software you write, and how they may be interpreted by others. Even if you mean something as a joke, it might not be received that way. If you think that someone else might interpret the content you post as a threat, or as promoting violence or terrorism, stop. Don't post it on GitHub. In extraordinary cases, we may report threats of violence to law enforcement if we think there may be a genuine risk of physical harm or a threat to public safety. Hate speech and discrimination - While it is not forbidden to broach topics such as age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation, we do not tolerate speech that attacks a person or group of people on the basis of who they are. Just realize that when approached in an aggressive or insulting manner, these (and other) sensitive topics can make others feel unwelcome, or perhaps even unsafe. While there's always the potential for misunderstandings, we expect our community members to remain respectful and civil when discussing sensitive topics. Bullying and harassment - We do not tolerate bullying or harassment. This means any habitual badgering or intimidation targeted at a specific person or group of people. In general, if your actions are unwanted and you continue to engage in them, there's a good chance you are headed into bullying or harassment territory. Impersonation - You may not seek to mislead others as to your identity by copying another person's avatar, posting content under their email address, using a similar username or otherwise posing as someone else. Impersonation is a form of harassment. Doxxing and invasion of privacy - Don't post other people's personal information, such as phone numbers, private email addresses, physical addresses, credit card numbers, Social Security/National Identity numbers, or passwords. Depending on the context, such as in the case of intimidation or harassment, we may consider other information, such as photos or videos that were taken or distributed without the subject's consent, to be an invasion of privacy, especially when such material presents a safety risk to the subject. Sexually obscene content - Basically, don't post pornography. This does not mean that all nudity or sexual content is prohibited. We recognize that sexuality is a part of life and non-pornographic sexual content may be a part of your project, or may be presented for educational or artistic purposes. If you have any questions or concerns about something you want to post, feel free to reach out and ask beforehand. Active malware or exploits - Being part of a community includes not taking advantage of other members of the community. We do not allow anyone to use our platform for exploit delivery, such as using GitHub as a means to deliver malicious executables, or as attack infrastructure, for example by organizing denial of service attacks or managing command and control servers. Note, however, that we do not prohibit the posting of source code which could be used to develop malware or exploits, as the publication and distribution of such source code has educational value and provides a net benefit to the security community. What happens if someone breaks the rules? There are a variety of actions that we may take when a user reports inappropriate behavior or content. It usually depends on the exact circumstances of a particular case. We recognize that sometimes people may say or do inappropriate things for any number of reasons. Perhaps they did not realize how their words would be perceived. Or maybe they just let their emotions get the best of them. Of course, sometimes, there are folks who just want to spam or cause trouble. Each case requires a different approach, and we try to tailor our response to meet the needs of the situation that has been reported. We'll review each abuse report on a case-by-case basis. In each case, we will have a diverse team investigate the content and surrounding facts and respond as appropriate, using these guidelines to guide our decision. Actions we may take in response to an abuse report include but are not limited to: Content Removal Content Blocking Account Suspension Account Termination Legal Notices We dedicate these Community Guidelines to the public domain for anyone to use, reuse, adapt, or whatever, under the terms of CC0-1.0. These are only guidelines; they do not modify our Terms of Service and are not intended to be a complete list. GitHub retains full discretion under the Terms of Service to remove any content or terminate any accounts for activity that violates our Terms on Acceptable Use. These guidelines describe when we will exercise that discretion. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support GitHub Registered Developer Agreement - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Site Policy / GitHub Registered Developer Agreement GitHub Registered Developer Agreement mac windows linux all GitHub is fortunate to have many developers integrating with our platform. We think that’s awesome, and we want to make that experience even better. GitHub’s Developer Program (the “Program”) helps us to connect with you, share information with you, and support your creative efforts better than ever before. The special relationship between GitHub and the developer community that the Program creates requires a special set of terms. Welcome to the Registered Developer Agreement (“Agreement”). This Agreement is a legal agreement between you (“you”) and GitHub, Inc. (“GitHub”, “we”, or “us”). Be sure to read this Agreement carefully - it governs your participation in the Program, and we’re only willing to let you participate in the Program if you accept all the terms of this Agreement. By clicking “I Agree” below, or by participating in the Program in any way – for example, by accessing information about GitHub products or features that aren’t yet available to the general public – you’re agreeing to be bound by all the terms of this Agreement. IF YOU’RE ENTERING INTO THIS AGREEMENT ON BEHALF OF A COMPANY OR OTHER LEGAL ENTITY, YOU REPRESENT THAT YOU HAVE THE LEGAL AUTHORITY TO BIND THE ENTITY TO THIS AGREEMENT, IN WHICH CASE "YOU" WILL MEAN THE ENTITY YOU REPRESENT. IF YOU DON’T HAVE SUCH AUTHORITY, OR IF YOU DON’T AGREE WITH THE TERMS AND CONDITIONS OF THIS AGREEMENT, YOU MUST SELECT THE "CANCEL" BUTTON AND YOU MAY NOT PARTICIPATE IN THE PROGRAM. IF YOU’RE A COMPANY OR OTHER LEGAL ENTITY, YOU REPRESENT THAT THE PERSON CLICKING “I AGREE” HAS THE AUTHORITY TO BIND YOU TO THIS AGREEMENT. GitHub.com’s Terms of Use Will Apply You need to have an account on GitHub.com in order to participate in the Program. By clicking “I Agree” at the bottom of this Agreement, you are also agreeing to be bound by the GitHub.com Terms of Service (the “TOS”). In the event of a direct conflict between this Agreement and theTOS, this Agreement will control; otherwise, both agreements will apply to you concurrently. Program Terms We post the Program’s benefits and guidelines (the “Program Overview”). As you might expect, the Program Overview will change from time to time. These changes will apply to you as a participant in the Program, so we encourage you to periodically review the Program Overview to keep apprised of any changes. For a variety of reasons, we might need to change, suspend, or discontinue the Program, or some of the benefits we offer. You agree that we can do those things without liability to you, except as specified in Section 8. API License So long as you remain compliant with the TOS, this Agreement, and the Program Terms, we grant You a limited, worldwide, non-exclusive, non-transferable license during the term of this Agreement to access and use our API (as defined in the TOS) solely for the purpose of developing, demonstrating, testing and supporting interoperability and integrations between your products and services and our products and services. You promise not to do bad things with our API. Among other things, this means you won’t – and won’t allow or permit others to – modify, publish, sell, lease, license, distribute, or sublicense our API; decompile, disassemble, reverse engineer, or otherwise attempt to derive source code from our API; reproduce, modify or create derivative works from our API; use our API to provide service bureau, application hosting, or processing services to third parties; incorporate or otherwise combine or integrate our API with any of your products or services; or use our API to engage in, support, or enable any kind of illegal activity. We reserve the right at any time to modify or discontinue, temporarily or permanently, your access to the API (or any part of it) with or without notice. It’s your sole responsibility to ensure that your use of the API is compatible with the then-current API. Other than the rights we expressly give you in this Agreement or the TOS, We don’t grant you any rights or licenses to our API, or to any other GitHub products or services. Your Products, Services, and Integrations Your products, services, and integrations (collectively, your “Products”) are your responsibility. That means that you’re solely responsible for developing, operating, and maintaining all aspects of your Products; ensuring that all materials used with or in your Products are legal in all the jurisdictions where your Products are used, and don’t promote illegal activities; obtaining any rights or licenses necessary to use and/or distribute any third-party software that you use, include, integrate, or distribute with your Products; and providing your end user customers with the same high-quality technical support for your Products when they operate in conjunction with our API or any other of our products and services as you do when they operate on their own. Marketing and Publicity Marketing and publicizing your integrations with GitHub is valuable to both of us. We want to be sure that happens in the right way, so we’ve included some language here to help clarify some basic “dos” and “don’ts”. You agree that you won’t make any representations, warranties, guarantees or endorsements to anyone on behalf of GitHub (including, among other things, any GitHub products or services). Unless we specifically say it’s okay in the Program Terms, you promise not to state or imply that we have developed, endorsed, reviewed or otherwise approved of any of your Products. If you decide to promote or publicize any of our products or services in connection with your Products, you’ll need to make sure that you abide by the terms of this Agreement, the Program Terms, the TOS, our trademark policy, and any other applicable GitHub policies. Subject to the terms and conditions of this Agreement and the TOS, and during the term of this Agreement, we grant you a limited, revocable, worldwide, non-exclusive, non-transferable license to use our trademarks, service marks, and logos (collectively, the “GitHub Marks”) in accordance with our trademark policy and as specified in the Program Terms, solely for the purpose of publicizing your membership in the Program. We want to tell the world about you, and your participation in the Program. To help us do that, you grant us a limited, revocable, worldwide, non-exclusive, non-transferable license to use your trademarks, service marks, and logos (collectively, the “Partner Marks”) in our marketing materials, solely for the purpose of promoting the Program and publicizing your participation in it. Except as set forth in this Agreement and the TOS, nothing in this Agreement will be deemed to grant to one party any right, title or interest in or to the other party’s Marks. You agree not to, whether during or after the term of this Agreement: (i) challenge or assist others in challenging the GitHub Marks, or our registration or enforcement of the GitHub Marks; (ii) attempt to adopt, use, apply for, or register any trademark, service mark, logo, URL, Internet domain name, or symbol that is confusingly similar to the GitHub Marks; or (iii) make any negative, false, or disparaging statements (whether written or oral) to any third-party about us, our products, or our services. Confidentiality; Pre-Release Materials As a registered developer in the Program, you may get access to special information not available to the rest of the world. Due to the sensitive nature of this information, it’s important for us to make sure that you keep that information secret. You agree that any non-public information we give you, or that you may have access to as part of the Program, will be considered GitHub’s confidential information (collectively, “Confidential Information”), regardless of whether it is marked or identified as such. You agree to only use such Confidential Information for your authorized purposes as a participant in the Program (the “Purpose”), and not for any other purpose. You should take reasonable precautions to prevent any unauthorized use, disclosure, publication, or dissemination of our Confidential Information. You promise not to disclose, publish, or disseminate any Confidential Information to any third-party other than your employees and contractors, and then only to the extent that: (i) they need to know the Confidential Information for the Purpose; (ii) you make them aware of the confidential nature of the Confidential Information; (iii) you remain responsible for the acts and omissions of such employees and contractors; and (iv) we don’t otherwise prohibit or restrict such disclosure. You understand that unauthorized disclosure or use of our Confidential Information could cause us irreparable harm, and significant injury that may be difficult for us to quantify. Accordingly, you agree that we’ll have the right to seek immediate injunctive relief to make sure you comply with this Agreement, in addition to any other rights and remedies we may have. If you are required by law, regulation or a valid binding order of a court of competent jurisdiction to disclose our Confidential Information, you may do so, but only if you notify us before you do, and do your best to limit such disclosure and to seek confidential, protective treatment of such information. The obligations in this Section 6 won’t apply to information that you can prove: (i) was generally available to the public before we disclosed it to you; (ii) became generally available to the public after we disclosed it to you, through no action or inaction on your part, or on the part of your employees or contractors; (iii) you knew about before we disclosed it to you; (iv) was disclosed to you by a third-party, who didn’t have any confidentiality obligations with respect to it; (v) you independently developed without breach of any confidentiality obligation to us or any third-party; or (vi) we gave you permission to disclose, in a writing signed by one of our authorized representatives. If We give you any pre-release software or related documentation or materials, which may include videos or other forms of content (“Pre-Release Materials”), then subject to your compliance with the terms and conditions of this Agreement and the TOS, we hereby grant you a nonexclusive, nontransferable, revocable right and license to use the Pre-Release Materials solely to support your testing and/or development of products or services that are designed to operate in combination with the systems or programs for which the Pre-Release Materials are designed. If the Pre-Release Materials are accompanied by a separate license agreement, you agree that the separate license agreement (in addition to any more restrictive provisions contained in this Agreement or the TOS) will apply. You agree not to decompile, reverse engineer, disassemble, or otherwise reduce the Pre-Release Materials to a human-perceivable form, and you promise not to modify, network, rent, lease, transmit, sell, or loan the Pre-Release Materials, in whole or in part. You understand that we’re under no obligation to provide any Pre-Release Materials to you, to provide you with updates, enhancements, or corrections to the Pre-Release Materials, or to notify you of changes that we make to our products and services, now or in the future. Fees and Payment There may be fees associated with participating in the Program. We’ll tell you what those fees are in the Program Terms, as we update them from time to time (the “Program Fees”). If you gave us your payment information before, you agree that we can charge the same credit card or PayPal account as part of this Agreement. Otherwise, you’ll need to give us a valid payment account, and other supporting information. Except as otherwise expressly provided in Section 8, any payments you make to us for the Program are non-refundable.You give us permission to automatically charge your payment account on the anniversary of your first payment date to cover all of the coming year’s Program Fees, unless you terminate this Agreement first according to Section 8. All fees are due in U.S. Dollars, and are exclusive of all taxes, levies, or duties imposed by taxing authorities (you’re responsible for all of those, except for taxes based on our income). Term and Termination This Agreement begins on the date you click “Agree”, and continues for a period of one (1) year. This Agreement will automatically renew for successive one-year terms unless either party gives written notice at least thirty (30) days before the current term expires that it wants to terminate, or one of us terminates it earlier in accordance with this Section 8. Either you or GitHub may terminate this Agreement for any reason, without cause, upon thirty (30) days prior written notice to the other. If we terminate this Agreement or discontinue your access to the Program for any reason other than your breach of this Agreement, the Program Terms, or the TOS, we will, as your sole remedy and our sole obligation for such termination, refund you the pro rata portion of the Program Fees you paid us for the current term of this Agreement. This Agreement will terminate immediately, without the requirement of notice, if you breach any term of this Agreement, the Program Terms, or the TOS. The rights and obligations in Sections 1, 2, 3 (second and third paragraphs), 4, 5 (second and last paragraphs), 6, 7, and 9 through 21 of this Agreement will survive the termination or expiration of this Agreement. Upon termination or expiration of this Agreement all of the rights and licenses we granted you in this Agreement will immediately cease to exist, you will return (or, at our request, destroy) all of our Confidential Information and any copies (including electronic copies) which are in your possession or control, and you will certify in writing that you’ve complied with these requirements. Warranties and Disclaimers You warrant to us that you: (i) have the authority to execute this Agreement and to perform its obligations; (ii) will conduct business in a manner that reflects favorably at all times on GitHub’s products and services and our good name, goodwill and reputation; (iii) will make no false or misleading statements or representations regarding GitHub or our products and services; (iv) will not take on any obligation or responsibility, or make any representation, warranty, guarantee or endorsement to anyone on our behalf (including, without limitation, any of our products or services); and (v) will not state or imply that We have developed, endorsed, reviewed or otherwise approved of any of your Products. THE PROGRAM, THE API AND ANY CONFIDENTIAL INFORMATION WE GIVE YOU (INCLUDING, WITHOUT LIMITATION, THE PRE-RELEASE MATERIALS) ARE PROVIDED “AS IS”, AND WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED. WE SPECIFICALLY DISCLAIM ANY AND ALL IMPLIED WARRANTIES OR CONDITIONS OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT. WE DO NOT WARRANT THAT ANY SERVICES OR PRODUCTS WE MAKE AVAILABLE TO YOU WILL MEET YOUR OR YOUR END USERS’ REQUIREMENTS. Indemnity We’re giving you lots of useful pre-release stuff as part of the Program, and there are ways that you could use that stuff improperly that could cause us harm. With that in mind, and since we can’t control the ways that you participate in the Program, you agree that you will indemnify, defend and hold us harmless from and against any and all claims which may arise under or out of your participation in the Program; your use of the API, our Confidential Information, or any other GitHub products and services; your negligence or intentional misconduct; your Products, or any integrations you develop, design, promote or distribute using our API or any Confidential Information; any misrepresentations you make with respect to us, or our products or services; or your violation of any part of this Agreement. Limitation of Liability IN NO EVENT WILL WE BE LIABLE TO YOU OR TO ANY THIRD PARTY FOR ANY INDIRECT, SPECIAL, INCIDENTAL, CONSEQUENTIAL, EXEMPLARY OR PUNITIVE DAMAGES, INCLUDING BUT NOT LIMITED TO DAMAGES FOR LOST DATA, LOST PROFITS OR COSTS OF PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, HOWEVER CAUSED AND UNDER ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, TORT (INCLUDING WITHOUT LIMITATION PRODUCTS LIABILITY, STRICT LIABILITY AND NEGLIGENCE), OR ANY OTHER THEORY, AND WHETHER OR NOT WE KNEW OR SHOULD HAVE KNOWN ABOUT THE POSSIBILITY OF SUCH DAMAGE. IN NO EVENT WILL OUR AGGREGATE LIABILITY TO YOU ARISING OUT OF OR RELATED TO THIS AGREEMENT FOR ANY CAUSE WHATSOEVER, AND REGARDLESS OF THE FORM OF ACTION, WHETHER IN CONTRACT OR IN TORT, EXCEED THE GREATER OF (I) AMOUNTS YOU ACTUALLY PAID US UNDER THIS AGREEMENT; OR (II) FIVE HUNDRED DOLLARS ($500). THE FOREGOING LIMITATIONS WILL APPLY NOTWITHSTANDING THE FAILURE OF ESSENTIAL PURPOSE OF ANY LIMITED REMEDY STATED IN THIS AGREEMENT. Export Control You aren’t allowed to export or re-export any of our Confidential Information, except as authorized by United States law and the laws of the jurisdiction in which the Confidential Information was obtained. In particular, you aren’t allowed to export or re-export our Confidential Information into any U.S. embargoed countries, to anyone on the U.S. Treasury Department's list of Specially Designated Nationals, or to anyone on the U.S. Department of Commerce Denied Person's List or Entity List. By joining the Program or receiving any of our Confidential Information, you represent and warrant that you are not located in any such country or on any such list. Proprietary Rights You agree that GitHub and its licensors own all right, title and interest in and to the API, the Pre-Release Materials, and all other GitHub products and services; all information and data relating to their configurations and combinations; and all modifications to and derivative works of any of the foregoing. You agree not to remove, alter, cover or obfuscate any copyright or other proprietary rights notices we place on or embed in the API, the Pre-Release Materials, or any other other GitHub products and services. Government Users If you are a Government entity, this Section applies to you. Certain of our Confidential Information may be considered “Commercial Items”, as that term is defined at 48 C.F.R. §2.101, consisting of “Commercial Computer Software” and “Commercial Computer Software Documentation”, as such terms are used in 48 C.F.R. §12.212 or 48 C.F.R. §227.7202, as applicable. Consistent with 48 C.F.R. §12.212 or 48 C.F.R. §227.7202-1 through 227.7202-4, as applicable, the Commercial Computer Software and Commercial Computer Software Documentation are being licensed to U.S. Government end users (a) only as Commercial Items and (b) with only those rights as are granted to all other end users pursuant to the terms and conditions herein. GitHub, Inc. 88 Colin P. Kelly Street, San Francisco, CA 94107. Independent Development Nothing in this Agreement will impair our right to develop, acquire, license, market, promote or distribute products, software or technologies that may compete with your Products. Feedback We’re always trying to improve, and your feedback will help us do that. If you choose to give us feedback, suggestions or recommendations for the Program or for our products or services (collectively, “Feedback”), you acknowledge and agree that we’re free to use that Feedback in any way we want, without restriction (subject to any applicable patents or copyrights, of course). Independent Contractors The parties to this Agreement are independent contractors. Neither of us will be deemed to be an employee, agent, partner, franchisor, franchisee or legal representative of the other for any purpose and neither of us will have any right, power or authority to create any obligation or responsibility on behalf of the other. Assignment You aren’t allowed to assign or transfer this Agreement, or any of your rights under it, in whole or in part, by operation of law or otherwise, without our prior written consent. Governing Law and Venue This Agreement will be interpreted and construed in accordance with the laws of the State of California, without regard to conflict of law principles. All disputes arising out of this Agreement will be subject to the exclusive jurisdiction of the state and federal courts located in San Francisco County, California, and each of us hereby consents to personal jurisdiction there. Amendments; Waivers; No Third-Party Beneficiaries This Agreement may not be changed, except by a writing signed by both parties. Any waiver of the provisions of this Agreement or of a party's rights or remedies under this Agreement must be in writing to be effective. If any term, condition, or provision in this Agreement is found to be invalid or unenforceable, the remaining terms will continue to be valid and enforceable to the fullest extent permitted by law. We each expressly agree that there are no third-party beneficiaries to this Agreement. Entire Agreement This Agreement, the TOS, and the Program Terms contain the entire agreement of the parties with respect to its subject matter and supersede all prior communications, representations, understandings and agreements, whether written or oral. The terms or conditions of any of your purchase orders, acknowledgements, or other documents that you send us in connection with this Agreement will be null and void, and of no effect. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support GitHub Marketplace Terms of Service - User Documentation <meta name="Description" content="Welcome to GitHub Marketplace (\"Marketplace\")! We're happy you're here. Please read these Terms of Service (\"Marketplace Terms\") carefully before accessing or using GitHub Marketplace. GitHub Marke…"> GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Site Policy / GitHub Marketplace Terms of Service GitHub Marketplace Terms of Service mac windows linux all Welcome to GitHub Marketplace ("Marketplace")! We're happy you're here. Please read these Terms of Service ("Marketplace Terms") carefully before accessing or using GitHub Marketplace. GitHub Marketplace is a platform that allows you to purchase developer products (for free or for a charge) that can be used with your GitHub.com account ("Developer Products"). Although sold by GitHub, Inc. ("GitHub", "we", "us"), Developer Products may be developed and maintained by either GitHub or by third-party software providers, and may require you to agree to a separate terms of service. Your use and/or purchase of Developer Products is subject to these Marketplace Terms and to the applicable fees and may also be subject to additional terms as provided by the third party licensor of that Developer Product (the "Product Provider"). By using Marketplace, you are agreeing to be bound by these Marketplace Terms. Effective Date: October 11, 2017 A. GitHub.com's Terms of Service Marketplace is provided by GitHub, and is governed by either the Terms of Service or the Corporate Terms of Service ("GitHub Terms"), depending on the type of account you're on, as well as these Marketplace Terms. If you configure the Developer Products to work with one or more accounts on the GitHub.com website, your use of the Developer Products will also be governed by your applicable GitHub Terms. Any capitalized terms not defined in this document will be defined in your applicable GitHub Terms. You may not use a Developer Product to violate your applicable GitHub Terms. Many of these Developer Products are used exclusively for performing automated tasks. In addition, multiple Users may direct the actions of a Developer Product. However, if you purchase and/or set up a Developer Product on your account, or you are an owner of an account with an integrated Developer Product, then you will be responsible for the Developer Product's actions that are performed on or through your account. B. Use Requirements In order to use Marketplace, you must be 13 years of age or older (if you live in the United States; if you live in another country, you must comply with your country's minimum age laws), have a valid GitHub account, and have agreed to your applicable GitHub Terms and these Marketplace Terms. If you are agreeing to these Marketplace Terms on behalf of a company, organization, or other legal entity, you represent that you have the authority to bind that entity, its affiliates, and all users who access the Marketplace on its behalf to these Marketplace Terms. If you do not have authority, you must not accept these Marketplace Terms and you may not use the Marketplace services. C. Developer Products and Product Providers If you install and/or purchase a Developer Product, then you are purchasing the Developer Products from GitHub and you are required to make the related payments directly to GitHub. However, you are receiving access to and the rights to use that Developer Product from a Product Provider, not from GitHub (unless it's a GitHub-owned Developer Product). The Product Provider is solely responsible for the Developer Product it provides, the content therein, and any claims that you or any other party may have relating to that Developer Product or your use of that Developer Product. We are not a party to the agreement between you and the Product Provider with respect to that Developer Product. We are not responsible for that Developer Product, the content in it, or any claims that you or any other party may have relating to that Developer Product or your use of that Developer Product. However, we are a third party beneficiary of the agreement between you and the Product Provider for each Developer Product, and we will have the right (and will be deemed to have accepted the right) to enforce that agreement against you as a third party beneficiary. D. Payment, Billing Schedule, and Cancellation All payments for Developer Products will go through GitHub. The terms of your payment and fees will be governed by Section L. Payment, or the analogous section of your applicable GitHub Terms. By using the Marketplace, you agree to pay GitHub any charge incurred in connection with your purchase of the Developer Product. Each purchase is an electronic contract between you and GitHub, and you and the Product Provider. You are responsible for providing us with a valid means of payment for purchases of Developer Products. If you are only purchasing free Developer Products, you are not required to provide payment information. Billing Schedule; No Refunds. Your payment schedule is determined by the payment schedule you chose when you created your GitHub account (e.g. free, monthly, annual). For monthly or yearly payment plans, Marketplace purchases are billed in advance on a monthly or yearly basis respectively and are non-refundable. There will be no refunds or credits for partial months of service, downgrade refunds, or refunds for months unused; however, the service will remain active for the length of the paid billing period. If you would like to cancel the Developer Product services, you can do so by going into your Settings in the global navigation bar at the top of the screen. If you would have a question, concern, or dispute regarding your billing, please contact GitHub Support. E. Your Data and GitHub's Privacy Policy Privacy. When you purchase or subscribe to a Developer Product, GitHub must share certain Personal Information (as defined in the GitHub Privacy Statement) with the Product Provider in order to provide you with the Developer Product, regardless of your privacy settings. Depending on the requirements of the Developer Product you choose, GitHub may share as little as your user account name, ID, and primary email address or as much as access to the content in your repositories, including the ability to read and modify your private data. You will be able to view the scope of the permissions the Developer Product is requesting, and accept or deny them, when you grant it authorization via OAuth. In line with GitHub's Privacy Statement, we will only provide the Product Provider with the minimum amount of information necessary for the purpose of the transaction. If you cancel your Developer Product services and revoke access through your account settings, the Product Provider will no longer be able to access your account. The Product Provider is responsible for deleting your Personal Information from its systems within its defined window. Please contact the Product Provider to ensure that your account has been properly terminated. Data Security Disclaimer. When you purchase or subscribe to a Developer Product, the Developer Product security and their custodianship of your data is the responsibility of the Product Provider. You are responsible for understanding the security considerations of the purchase and use of the Developer Product for your own security, risk and compliance considerations. F. Rights to Developer Products The rights granted to you to use any Developer Product are personal to you, and are not transferrable to any third parties, such as your end users. Any rights to provide or resell Developer Products to third parties must be granted directly by the Product Provider. G. Updates to Developer Products From time to time, GitHub.com may check with remote servers (hosted by GitHub or by third parties) for available updates to Developer Products, including but not limited to bug fixes or enhanced functionality. You agree that such updates will be automatically requested, downloaded, and installed without further notice to you. H. Developer Product Blocking GitHub may block a Developer Product from our servers, or disable its functionality, for legal or policy reasons. In the event that we must block or disable a Developer Product, we will work with the Product Provider to notify affected users. I. Disclaimer; Limitation of Liability; Release and Indemnification Disclaimer. Your use of Marketplace and any Developer Products obtained through Marketplace is at your sole risk. Other than as expressly stated, GitHub provides Marketplace and Developer Products “AS IS” and “AS AVAILABLE.” GitHub does not make or imply any warranties or commitments about Marketplace and Developer Products, including but not limited to the specific functionality available through Marketplace and Developer Products, their reliability, availability, or ability to meet your need. We reserve the right at any time and from time to time to modify or discontinue, temporarily or permanently, Marketplace (or any part of it) with or without notice. Limitation of Liability. You understand and agree that GitHub will not be liable to you or any third party for any loss of profits, use, goodwill, or data, or for any incidental, indirect, special, consequential or exemplary damages, however arising, that result from: (i) your use or inability to use Marketplace or any Developer Products; (ii) any modification, price change, suspension or discontinuance of Marketplace or Developer Products; (iii) Marketplace generally or the software or systems that make Marketplace available; (iv) unauthorized access to or alterations of your transmissions or data; (v) statements or conduct of any third party, Product Provider, or Developer Product on Marketplace; (vi) any other user interactions that you input or receive through your use of Marketplace; or (vii) any other matter relating to Marketplace. Release and Indemnification. If you have a dispute with one or more Product Providers, you agree to release GitHub from any and all claims, demands and damages (actual and consequential) of every kind and nature, known and unknown, arising out of or in any way connected with such disputes. You agree to indemnify us, defend us, and hold us harmless from and against any and all claims, liabilities, and expenses, including attorneys’ fees, arising out of your use of Marketplace, including but not limited to your violation of these Marketplace Terms, provided that GitHub (1) promptly gives you written notice of the claim, demand, suit or proceeding; (2) gives you sole control of the defense and settlement of the claim, demand, suit or proceeding (provided that you may not settle any claim, demand, suit or proceeding unless the settlement unconditionally releases GitHub of all liability); and (3) provides to you all reasonable assistance, at your expense. J. Miscellanea Governing Law. You agree that these Marketplace Terms and your use of the Developer Products are governed under California law and any dispute related to the Developer Products must be brought in a tribunal of competent jurisdiction located in or near San Francisco, California. Non-Assignability. GitHub may assign or delegate these Marketplace Terms and/or the GitHub's Privacy Statement, in whole or in part, to any person or entity at any time with or without your consent. You may not assign or delegate any rights or obligations under the Marketplace Terms or Privacy Statement without our prior written consent, and any unauthorized assignment and delegation by you is void. Severability, No Waiver, and Survival. If any part of these Marketplace Terms are held invalid or unenforceable, that portion of the Marketplace Terms will be construed to reflect the parties’ original intent. The remaining portions will remain in full force and effect. The failure of GitHub to exercise or enforce any right or provision of these Marketplace Terms shall not constitute a waiver of such right or provision. Our rights under these Marketplace Terms will survive any termination of these Marketplace Terms. No Modifications; Complete Agreement. These Marketplace Terms may only be modified by a written amendment signed by an authorized representative of GitHub, or by the posting by GitHub of a revised version. These Marketplace Terms, together with GitHub's Privacy Statement, represent the complete and exclusive statement of the agreement between you and us. These Marketplace Terms supersede any proposal or prior agreement oral or written, and any other communications between you and GitHub relating to the subject matter of these terms. Section Headings. Throughout these Marketplace Terms, each section includes titles of the following terms and conditions. These section titles are not legally binding. License to GitHub Policies. These Marketplace Terms are licensed under this Creative Commons Zero license. For details, see our site-policy repository. Contact Us. Questions about the Marketplace Terms? Contact us. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support GitHub Marketplace Developer Agreement - User Documentation <meta name="Description" content="THESE TERMS AND CONDITIONS (THE \"AGREEMENT\") GOVERN YOUR PARTICIPATION IN GITHUB’S MARKETPLACE PROGRAM. BY ENROLLING TO PARTICIPATE IN THE MARKETPLACE PROGRAM OR BY CLICKING “I ACCEPT” BELOW, YOU ARE…"> GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Site Policy / GitHub Marketplace Developer Agreement GitHub Marketplace Developer Agreement mac windows linux all THESE TERMS AND CONDITIONS (THE "AGREEMENT") GOVERN YOUR PARTICIPATION IN GITHUB’S MARKETPLACE PROGRAM. BY ENROLLING TO PARTICIPATE IN THE MARKETPLACE PROGRAM OR BY CLICKING “I ACCEPT” BELOW, YOU ARE CONFIRMING THAT YOU UNDERSTAND THIS AGREEMENT, AND THAT YOU ACCEPT ALL OF ITS TERMS AND CONDITIONS. IF YOU ARE ENTERING INTO THIS AGREEMENT ON BEHALF OF A COMPANY OR OTHER LEGAL ENTITY, YOU REPRESENT THAT YOU HAVE THE LEGAL AUTHORITY TO BIND THE ENTITY TO THIS AGREEMENT, IN WHICH CASE “YOU” WILL MEAN THE ENTITY YOU REPRESENT. 1. DEFINITIONS Capitalized terms utilized in this Agreement and not defined herein shall have the meaning set forth in the GitHub Terms of Service located at https://help.github.com/articles/github-terms-of-service (the “Terms” or “ToS”). “Brand Features” means the trade names, trademarks, service marks, logos, domain names, and other distinctive brand features of each party, respectively, as owned (or licensed) by such party from time to time. "Developer" means you, and you are the company or individual who has created the software, content, and digital materials for use in connection with GitHub and accessible via Marketplace. "Developer Application" or "Developer Product" means the Software, content and digital materials created by You for use in connection with GitHub and accessible via Marketplace. “End User” means any person, company or other legal entity that will acquire licenses to Developer Product via the GitHub Marketplace. “GitHub API” means GitHub’s proprietary application program interface. Access to and use of the GitHub API is governed by the ToS. “GitHub Marketplace” or “Marketplace” means the proprietary online marketplace site operated by GitHub where Developer Products may be delivered to End Users. “Listing” means the content provided for listing the Developer Product on GitHub Marketplace. “Taxes” means any federal, state, local or foreign income, gross receipts, franchise, estimated, alternative minimum, sales, use, transfer, value added, excise, real or personal property, withholding or other tax, of any kind whatsoever, including any interest, penalties or additions to tax or additional amounts in respect of the foregoing.” “Usage Data” means Marketplace related data generated in connection with End User use of GitHub Marketplace and licensure of Developer Products, including but not limited to usage statistics and aggregated sales data. Usage Data does not include and specifically excludes banking and payment information. 2. PURPOSE AND LICENSE GRANT 2.1 This Agreement sets forth the terms and conditions pursuant to which Developer may publish Listings on GitHub Marketplace for purchase of Developer Products by End Users and use in connection with GitHub.com. This Agreement is applicable to Developer’s Products distributed for free and Products for which End Users are charged a fee. Developer agrees to use the GitHub Marketplace solely for purposes permitted by this Agreement or as otherwise allowed by applicable law. As between GitHub and Developer, Developer is solely responsible for Developer Products. 2.2 Developer grants to GitHub a non-exclusive, worldwide, transferable, sublicensable, fully paid-up, royalty-free license to (a) host, link to, reproduce, modify, publicly perform, publicly display, test, distribute, make available, license and otherwise use the Listing; (b) reproduce, perform, display, use and access the Listing for administration and demonstration purposes in connection with the operation and marketing of the Marketplace; and (c) reproduce, display, distribute and otherwise use any Developer Brand Features furnished by Developer to GitHub under this Agreement solely for use in connection with the Marketplace and in order to fulfill its obligations under the Agreement. 2.3 In addition to the licenses granted above, GitHub may include Developer Brand Features furnished by Developer to GitHub under this Agreement in any presentations, communications, marketing materials, press releases, customer lists (including, without limitation any customer lists, posted to GitHub websites), publicity campaigns and other advertising collateral for purposes of marketing the Marketplace. If Developer discontinues the distribution of specific Products on the Marketplace, GitHub will, after a commercially reasonable period of time, cease use of the discontinued Products’ Brand Features. Nothing in this Agreement gives Developer a right to use any GitHub Brand Features. 2.4 Developer grants to each End User a non-exclusive, worldwide right or license to perform, display, and use the Products and any content contained in, accessed by or transmitted through the Products in connection with the Marketplace. Developer must include a separate end user license agreement (“EULA”) in its Products that will govern the End User’s rights to the Products in lieu of the foregoing sentence. Developer acknowledges and agrees that the applicable EULA for each Product is solely between Developer and the End User. GitHub shall not be responsible, nor have any liability whatsoever, under any EULA. 2.5 Except for the license rights granted in this Agreement, (a) Developer retains all rights in the Products; (b) each party retains all rights it has independent of this Agreement, including rights under the US Copyright Act or similar laws of other jurisdictions; and (c) each party owns all rights, title and interest in its respective Brand Features. Each party is responsible for protecting and enforcing its own respective rights and neither party has an obligation to do so on the other’s behalf. 2.6 Developer acknowledges and agrees that GitHub shall be entitled to provide Developer’s name, address and other contact details to any third party that reasonably, in GitHub’s sole determination, claims that Developer does not possess all of the necessary intellectual property rights in or to the Products. 3. RESTRICTIONS AND RESPONSIBILITIES Notwithstanding any of the requirements set forth in Section 2, Purpose and License Grant, above, Developer acknowledges and agrees that its use of the Marketplace and participation in the Program is explicitly conditioned on Developer’s adherence to this Agreement, including without limitation, the restrictions and compliance requirements set forth in this Section 3. 3.1 Developer agrees it will protect the privacy and legal rights of all End Users. If an End User provides Developer with, or the Product otherwise collects, discloses, accesses or uses, End User names, passwords or other personal information, then the Developer must (a) inform End Users that such information will be available to the Products; and (b) provide legally adequate privacy notice and protection to End Users. Further, Developer Products may only use the information for the limited purpose for which Developer has obtained permission from End User. If Developer Products store or transmit personal or sensitive information provided by or obtained from End Users, then Developer must ensure all such activity is done so securely and must respond promptly to complaints, removal requests, and “do not contact” requests from GitHub or Marketplace End Users 3.2 In order to use and access the GitHub API, Developer must obtain API credentials (a “Token”) by becoming a subscriber. Developer may not share its Token with any third party, shall keep such Token and all login information secure and shall use the Token as Developer’s sole means of accessing the GitHub API. 3.3 Developer acknowledges and agrees that it will not engage in any activity with the Marketplace, including the distribution of Products, that violates Marketplace policies or that: 1. Violates any applicable laws or regulations or promotes unlawful activities; 2. Contains or installs any active malware or exploits, or uses our platform for exploit delivery (such as part of a command and control system); 3. Interferes with, disrupts, damages, harms, or accesses in an unauthorized manner the machines, systems, hardware, servers, networks, devices, data or other property or services of any third party; 4. Includes false or misleading content; 5. Infringes on any proprietary right of any party, including patent, trademark, trade secret, copyright, right of publicity, or other rights; 6. Is libelous, defamatory, or fraudulent; 7. Enables the unauthorized download of streaming content or media; 8. Displays or links to illegal content; 9. harasses, abuses, threatens, or incites violence toward any individual or group, including GitHub employees, officers, and agents, or any End Users; 10. Is or contains sexually obscene content; 11. Is discriminatory or abusive toward any individual or group; 12. Diverts End Users or provides links to any other site that mimics the Marketplace or passes itself off as the Marketplace. 3.4 Developer shall not, under any circumstances, through Developer Products or otherwise, repackage or resell the Marketplace, GitHub API or Usage Data. Developer is not permitted to use the GitHub API or any Usage Data in any manner that does or could potentially undermine the security of the Service, the GitHub API, Usage Data or any other data or information stored or transmitted using the Marketplace. In addition, Developer shall not, and shall not attempt to, interfere with, modify or disable any features, functionality or security controls of the Marketplace or the GitHub API, defeat, avoid, bypass, remove, deactivate or otherwise circumvent any protection mechanisms for the Marketplace or the GitHub API, or reverse engineer, decompile, disassemble or derive source code, underlying ideas, algorithms, structure or organizational form from the Marketplace or the GitHub API. 3.5 Developer acknowledges that Developer is solely responsible, and that GitHub has no responsibility or liability of any kind, for the content, development, operation, support or maintenance of Developer Products. Without limiting the foregoing, Developer will be solely responsible for (i) the technical installation and operation of its Developer Products; (ii) creating and displaying information and content on, through or within its Developer Products; (iii) ensuring that its Developer Products do not violate or infringe the intellectual property rights of any third party; (iv) ensuring that Developer Products are not offensive, profane, obscene, libelous or otherwise illegal; (v) ensuring that its Developer Products do not contain or introduce malicious software into the Marketplace, the GitHub API, any Usage Data or other data stored or transmitted using the Marketplace; and (vi) ensuring that its Developer Products are not designed to or utilized for the purpose of sending commercial electronic messages to any GitHub.com users, agents or End Users without their consent. 3.6 Developer will respect and comply with the technical and policy-implemented limitations of the GitHub API and the restrictions of this Agreement in designing and implementing Developer Products. Without limiting the foregoing, Developer shall not violate any explicit rate limitations on calling or otherwise utilizing the GitHub API. 3.7 Marketplace Security Requirements Developer agrees to meet the security requirements set forth below, with regard to development, support, and distribution of the Developer Product made available via the GitHub Marketplace. 3.7.1 Developer Security Risk Assessment Prior to listing on Marketplace and thereafter, upon request, Developer will respond in writing to GitHub's standard risk assessment within thirty (30) days of receipt of such request. During the Term of the Agreement, GitHub will make no more than one (1) annual request for Developer's completion of a standard written risk assessment. Notwithstanding the foregoing, GitHub may make operational security or compliance inquires at any time with any degree of frequency. The standard annual risk assessment shall include, to the best of Developer's ability, the following: (i) SOC 1 and/or SOC 2 audit report; (ii) 3rd party proof of PCI compliance (a certificate showing Developer's handling of credit card payments is compliant); (iii) Privacy Shield Attestation; (iv) ISO Certification or Cloud Security Alliance Self-Assessment; (v) Cloud Security Self Assessment; (vi) any information on subcontractor or vendor production datacenter(s), IaaS, PaaS, or private hosting providers, as required by GitHub based on data and services rendered; and (vii) Written responses and evidence of specific security requirements as outlined in this agreement 3.7.2 Meeting Security Requirements Developer will, for the Term of the Agreement, maintain equivalent or higher security controls over developer services as outlined in the security requirements described herein, and Developer will confirm compliance with such requirements in response to the security risk assessment described in Section 3.7.1 above. 3.7.3 Vulnerability Management Developer agrees to establish and maintain security vulnerability management processes meeting security industry standards, including but not limited to regular scanning, reporting, and patching, where patching is based on the risk rating of the vulnerability as determined by the Developer. 3.7.4 Clear escalation contacts Developer will provide an internal contact list/call tree for escalation for Security and Audit/Compliance operational functions with notifications to be sent to GitHub as follows: (i) Security Incident notifications to be sent to security@github.com; and (ii) Risk, Audit, and Compliance Contact Information to be sent to security-GRC@github.com 3.7.5 Security Incident Response and Breach Process 3.7.5.1 Developer will maintain a Security Incident and Breach Response function capable of identifying, mitigating the effects of, and preventing the recurence of security incidents and breaches (occurrence). Upon confirmation of an incident occurrence that may put GitHub data or accounts at risk, Developer shall take all reasonable measures to mitigate the harmful effects of the occurrence. 3.7.5.2 Developer must notify GitHub of confirmed breach no later than twenty-four (24) hours after confirmation of a breach impacting GitHub data or GitHub customer data. 3.7.5.3 Developer must notify GitHub of an occurrence no later than seventy-two (72) hours after confirmation of a security incident impacting GitHub data or GitHub customers. 3.7.5.4 Notice. Notice of breach (Section 3.7.5.2) and notice of occurrence (Section 3.7.5.3) must include: (i) the identification of the GitHub data which has been, or is reasonably believed to have been affected (used, accessed, acquired or disclosed); (ii) a description of what happened, including the date of the occurrence and the date of discovery of the occurrence, if known at time of reporting; (iii) the scope of the occurrence, including a description of the threat actors including known tactics, techniques, and procedures (TTPs) and other threat intelligence data as such data becomes available; (iv) all corrective and remedial actions completed; (v) all efforts taken to mitigate the risks of further Incidents; and (vi) a description of Developer’s response to the occurrence, including steps Developer has taken to mitigate the harm caused by the occurrence. 3.7.5.5 Security Incident and Breach Notifications. For avoidance of doubt, GitHub classifies all non-public customer account, Organization and Repository information received from GitHub as confidential data. For the purpose of this Section 3.7.1, a Security Incident shall be defined as an event that may indicate that an organization's systems or data have been compromised or that measures put in place to protect them have failed, identified attempts from unauthorized sources to access systems or data, or unplanned disruption to a service or denial of a service, and a Breach shall be defined as an incident in which sensitive, protected or confidential data has potentially been viewed, stolen or used by an individual unauthorized to do so. 3.7.5.6 Security and Breach Notifications must be sent to security@github.com. 3.7.6 Regulator Audit Should GitHub realize a regulatory audit that requires participation from Developer, Developer shall fully cooperate with requests by providing access to relevant knowledgeable personnel, documentation, infrastructure, and application software. GitHub shall ensure use of an independent 3rd party (such as regulator or regulators delegate) and that findings not relevant to GitHub are not disclosed to GitHub. Notification of such audit will be provided to Developer in a timely fashion, pending regulator notification, and in a manner that allows for appropriate personnel to be made available to assist. The third party auditor shall disclose to Developer any findings and recommended actions where allowed by regulator. Where regulators provide no advanced notice to GitHub of audit or investigation, Developer shall respond in as timely a fashion as required by regulators. 3.7.7 Notification of material service changes Developer will notify GitHub, Inc. of any material changes in services offered that impacts data protection and could result in use, transmission, or exposure of GitHub data in a manner not supported under contract. GitHub reserves the right to reassess risk and technical controls related to changes to service offered by Developer under this Agreement. Developer shall provide advance notice to GitHub of implementation of any material service changes. Material service changes may include, but are not limited to: (i) Migration to, or addition of, a new third party IaaS or PaaS provider; (ii) Changes in geographic location of stored or processed data, e.g. a United States based Developer adding storage or process services in a new EU or APAC region; or (iii) Changes in OAuth authorization scope your service requests, e.g. your application moving from only read:org scope to including repo scope. 3.7.8 Notification of Acquisition Developer will notify GitHub, Inc. 90 days before any transfer of ownership by or of another company that will impact any data protection agreements. 3.7.9 GitHub Initiated Security Operations The following Section 3.7.10 does not preclude the Developer from maintaining their own appropriate operational security and/or application security practices. Developer will hold GitHub harmless for any outcome of acting on reported security intelligence, vulnerabilities and defects. 3.7.10 External Vulnerability Scanning Developer agrees to allow GitHub, at its discretion, to execute industry standard vulnerability scans of Developer’s public facing IPs. GitHub will provide any findings to Developer if deemed of sufficient risk for remediation and will track closure on material findings. 3.7.11 Private Bug Bounty GitHub may, at its discretion, establish a private Bug Bounty for the Developer through a vendor of GitHub’s choice, to facilitate reporting and tracking to closure any security defects found in the Developer’s product or service. 3.7.12 Security Intelligence Sharing GitHub may, at its discretion, choose to share security intelligence that may have an impact on GitHub customer and account security. Developer agrees to participate in such discussions to ensure the security of GitHub customer and user accounts and data. 3.8 GitHub reserves the right to terminate this Agreement immediately if GitHub determines that Developer breached any requirement or obligation of this Section 3. 3.9 Nothing in this Agreement shall prevent either party from developing and/or publishing applications that are similar or otherwise compete with the other party's applications. 4. TAKEDOWNS 4.1 Your Takedowns. Upon providing GitHub with thirty (30) days written notice in advance of the 1st day of the succeeding calendar month, you may remove your Listings from future distribution via Marketplace, but you must comply with this Agreement for any Listing distributed through Marketplace, including but not limited to refund requirements. Removing your Listing from future distribution via Marketplace does not (a) affect the license rights of End Users who have previously purchased or installed your Listing or (b) change your obligation to deliver or support Listing that has been previously purchased or installed by users. Notwithstanding the foregoing, in no event will GitHub maintain on any portion of Marketplace any Listing that you have removed from Marketplace and provided written notice to GitHub that such removal was due to (i) an allegation of infringement, or actual infringement, of any copyright, trademark, trade secret, trade dress, patent or other intellectual property right of any person, (ii) an allegation of defamation or actual defamation, (iii) an allegation of violation, or actual violation, of any third party's right of publicity or privacy, or (iv) an allegation or determination that such Listing does not comply with applicable law. If you remove a Listing from Marketplace pursuant to clauses (i), (ii), (iii) or (iv) of this Section 4.1, and an End User purchased such Listing within a year before the date of takedown, GitHub is not responsible for refund(s) to the affected buyer of any amount paid by such End Customer during the year before the date of takedown for such affected Listing. 4.2 GitHub Review and Takedowns. While GitHub is not obligated to monitor the Listing or their content, GitHub may at any time review or test your Listing for compliance with this Agreement, the Marketplace program policies, and any other applicable terms, obligations, laws, or regulations. GitHub retains the right to refuse to include a Listing on Marketplace in its sole discretion. You may be required to provide information about yourself (such as identification or contact details) as part of the registration process for Marketplace, or as part of your continued use of Marketplace. You agree that any information you give to Marketplace will always be accurate, correct and up to date. As part of the specification for your Listing, GitHub may ask that you include in the file for your Listing information such as your name and email address. GitHub may use this information when featuring the Listing in our directory or for other uses. If GitHub is notified by you or otherwise becomes aware and determines in its sole discretion that a Listing or any portion thereof or your Brand Features (a) violates the intellectual property rights or any other rights of any third party; (b) violates any applicable law or is subject to an injunction; (c) is pornographic, obscene or otherwise violates GitHub's hosting policies or other terms of service as may be updated by GitHub from time to time in its sole discretion; (d) is being distributed by you improperly; (e) may create liability for GitHub or any third party; (f) is deemed by GitHub to be malicious or defective; (g) violates the terms of this Agreement or the Marketplace program policies; (h) the display of the Listing is impacting the integrity of GitHub servers (i.e., users are unable to access such content or otherwise experience difficulty); (i) is deemed by GitHub to add undue risk to Marketplace End Users’ data or impair the user experience of Marketplace or GitHub; (j) is subject to user complaints in regards to your breach of your EULA, or (k) otherwise violates the Terms or this Agreement, GitHub may: prevent the Listing from being made available on Marketplace; remove the Listing from Marketplace; flag, filter, or modify related materials (including but not limited to descriptions, screenshots, or metadata); or reclassify the Listing at its sole discretion. GitHub reserves the right to suspend or bar any Listing from Marketplace at its sole discretion. In the event that your Listing is involuntarily removed because it is defective, malicious, infringes intellectual property rights of another person, defames, violates a third party's right of publicity or privacy, or does not comply with applicable law, and an end user purchased such Listing within a year before the date of takedown: (i) you must refund to the affected buyer all amounts paid by such End Customer during the year before the date of takedown for such affected Listing. (ii) GitHub may, at its sole discretion, withhold from your future sales the amount in subsection (i) above. 4.3 From time to time, GitHub may check for available updates to Listing, including but not limited to bug fixes or enhanced functionality. If you update your Listing to Marketplace, you agree that such update will be automatically requested, downloaded, and installed without further notice to you. GitHub makes no guarantees regarding the timing of such updates. For the avoidance of doubt, updates to Listing are subject to the same terms and conditions as the Listing, including without limitation Section 4.2 of this Agreement (GitHub Review and Takedowns). 4.4 End-User Takedowns. If an End-User uses your Developer Product in a way that violates the Terms, then we have the right to suspend or terminate that End-User's access to the Developer Product without any liability to you. 5. REPRESENTATIONS, WARRANTIES AND COVENANTS 5.1 Developer represents and warrants that Developer has notified all users of such Developer Applications that their account data will be transmitted outside the Service and Developer terms will control the privacy, security or integrity of such account data. Developer further represents and warrants that to the extent Developer’s Applications store, process or transmit account data, neither Developer nor Developer’s Application will, without appropriate prior user consent or except to the extent required by applicable law (i) modify the content of account data in a manner that adversely affects the integrity of account data; (ii) disclose account data to any third party; or (iii) use account data for any purpose other than providing the Developer Application functionality to users of such Developer Application. Developer shall maintain and handle all account data in accordance with privacy and security measures reasonably adequate to preserve the confidentiality and security of all account data and all applicable privacy laws and regulations. 5.2 Developer agrees that it will comply with the GitHub Data Protection Addendum. 5.3 Developer represents, warrants and covenants that: (i) its Developer Products and Developer Brand Features do not and will not violate, misappropriate or infringe upon the intellectual property rights of any third party; (ii) Developer will comply with all applicable local, state, national and international laws and regulations, including, without limitation, all applicable export control laws, and maintain all licenses, permits and other permissions necessary to develop, implement and distribute its Developer Products; and (iii) its Developer Products do not and will not contain or introduce into the Marketplace, the GitHub API, any Usage Data or other data stored or transmitted using the Marketplace, any malicious software; (vi) its Developer Products are not designed to or utilized for the purpose of sending commercial electronic messages to any GitHub customers, agents or End Users without their consent; (vi) it has all right, power and authority to grant the licenses granted to GitHub and End Users herein; (vii) it acknowledges GitHub’s right to charge transaction and/or listing fees as provided in Section 6 herein; any images and text that are used to market the Developer Products or that Developer has uploaded to the Marketplace are truthful, accurate and not intended to mislead or confuse the End User. 5.4 DISCLAIMER OF WARRANTIES. ALL ASPECTS OF THE MARKETPLACE AND THE GITHUB API, INCLUDING ALL SERVER AND NETWORK COMPONENTS ARE PROVIDED ON AN “AS IS” AND “AS AVAILABLE” BASIS, WITHOUT ANY WARRANTIES OF ANY KIND TO THE FULLEST EXTENT PERMITTED BY LAW, AND GITHUB EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES, WHETHER EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, ANY IMPLIED WARRANTIES OF MERCHANTABILITY, TITLE, FITNESS FOR A PARTICULAR PURPOSE, AND NON- INFRINGEMENT. DEVELOPER ACKNOWLEDGES THAT GITHUB DOES NOT WARRANT THAT THE MARKETPLACE OR GITHUB API WILL BE UNINTERRUPTED, TIMELY, SECURE, ERROR-FREE OR FREE FROM VIRUSES, MALWARE, OR WORMS (OTHERWISE KNOWN AS COMPUTER CODE OR OTHER TECHNOLOGY SPECIFICALLY DESIGNED TO DISRUPT, DISABLE, OR HARM YOUR SOFTWARE, HARDWARE, COMPUTER SYSTEM, OR NETWORK), AND NO INFORMATION OR ADVICE OBTAINED BY DEVELOPER FROM GITHUB OR THROUGH THE MARKETPLACE OR GITHUB API SHALL CREATE ANY WARRANTY NOT EXPRESSLY STATED IN THESE TERMS. GITHUB IS NOT RESPONSIBLE FOR AND SPECIFICALLY DISCLAIMS ANY LIABILITY FOR ANY UNAUTHORIZED USE OF PRODUCTS OUTSIDE THE MARKETPLACE. 6. PRICING AND PAYMENT TERMS 6.1 GitHub will be the merchant of record for Products purchased by End Users via Marketplace. 6.2 Prices for Marketplace Listings will be set in US Dollars (USD). Developer has complete control over setting pricing for each Listing, and once set, such pricing cannot be changed. You may retire a pricing plan for an existing Listing and add a new pricing plan for such Listing, provided that such new pricing plan shall not negatively impact existing End Users. The prices you set for Products will determine the amount of payment you will receive. GitHub will remit 75% of the sale price in USD without reduction for Taxes except for any withholding taxes that are required under applicable law. The remaining 25% of the sales price will be allotted to and retained by GitHub. At the end of each month and upon reaching a minimum value of $500 USD, GitHub will remit your share of payments. 6.3 Refund Requirements. You will be responsible for specifying the terms and conditions regarding refunds to your End Users. In no event shall GitHub be responsible for providing any support for refunds, nor shall GitHub be liable for payment of any refund. 6.4 You Support Your Product. You will be solely responsible for support and maintenance of your Products and any complaints about your Products. Your support contact information will be displayed in each application detail page and made available to users for customer support purposes. Failure to provide adequate support for your Products may result in less prominent product exposure, or in some cases removal from Marketplace or anywhere else on GitHub.com where previously purchased or downloaded Products are stored on behalf of users. 7. OWNERSHIP Subject to the limited licenses expressly provided in this Agreement, nothing in this Agreement transfers or assigns to a party any of the other party’s intellectual property rights in its Brand Features or other technology, and nothing in this Agreement transfers or assigns a party any of the other party’s intellectual property rights. 8. LIMITATION OF LIABILITY UNDER NO CIRCUMSTANCES AND UNDER NO LEGAL THEORY (WHETHER IN CONTRACT, TORT, NEGLIGENCE OR OTHERWISE) WILL GITHUB, OR ITS AFFILIATES, OFFICERS, DIRECTORS, EMPLOYEES, AGENTS, OR SUPPLIERS BE LIABLE TO DEVELOPER OR ANY THIRD PARTY UNDER THIS AGREEMENT FOR ANY INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, CONSEQUENTIAL, PUNITIVE OR OTHER SIMILAR DAMAGES, INCLUDING LOST PROFITS, LOST SALES OR BUSINESS, LOST DATA, BUSINESS INTERRUPTION OR ANY OTHER LOSS INCURRED BY DEVELOPER OR ANY THIRD PARTY IN CONNECTION WITH THIS AGREEMENT, REGARDLESS OF WHETHER DEVELOPER HAS BEEN ADVISED OF THE POSSIBILITY OF OR COULD HAVE FORESEEN SUCH DAMAGES NOTWITHSTANDING ANYTHING TO THE CONTRARY IN THIS AGREEMENT, GITHUB’S AGGREGATE LIABILITY TO DEVELOPER OR ANY THIRD PARTY ARISING OUT OF THIS AGREEMENT SHALL NOT EXCEED SIX (6) MONTHS’ SPEND. 9. INDEMNIFICATION 9.1 To the maximum extent permitted by applicable law, Developer agrees to defend, indemnify and hold harmless GitHub, its affiliates and their respective directors, officers, employees and agents from and against any and all claims, actions, suits or proceedings, as well as any losses, liabilities, damages, costs and expenses (including reasonable attorneys’ fees) arising from or relating to (a) Developer’s use of the Marketplace in violation of this Agreement, the Terms or any applicable laws or regulations; (b) Developer’s Products that infringe any copyright, trademark, trade secret, patent or other intellectual property right of any third party; (c) any loss or disclosure of data or personal information by Developer Products; and (d) Developer’s EULA (or ToS). 10. TERMINATION 10.1 This Agreement will continue to apply until terminated by either party as set forth below. 10.2 Either party may terminate this Agreement for any reason upon providing written notice to the other forty-five (45) days prior to the immediately following calendar month. During such 45 day period the terms in effect at the time such notice of termination has been provided shall govern for the duration of the 45-day notice period until the date of actual termination. 10.3 GitHub may terminate this Agreement at any time if (a) you have breached any provision of this Agreement or (b) GitHub is required to do so by law. 10.4 Effects of Termination by Developer. Upon receiving forty-five (45) days’ advanced written notice of termination from Developer, Developer will be disabled from taking on new customers via Marketplace. Any outstanding fees shall be remitted upon termination and removal of the Product from Marketplace. If termination is initiated as a result of a GitHub modication to these terms (Section 11), the terms in effect immediately prior to such modification shall govern for the duration of the 45-day notice period until the date of actual termination. 10.5 The obligations in Sections 2, 3, 4, 5, 8, 9 and 12-18 will survive any expiration or termination of this Agreement. 11. MODIFICATION Developer acknowledges and agrees that GitHub may modify this Agreement, Marketplace, the GitHub API, the General API Policies, GitHub Privacy Policy, the GitHub Developer Program ToS, and the GitHub.com ToS from time to time (a “Modification”). All Modifications shall be communicated through Marketplace, the GitHub website at www.GitHub.com or through a form of direct communication from GitHub to Developer. Developer further acknowledges and agrees that such Modifications may be implemented at any time and without any notice to Developer. Developer shall, within forty-five (45) days from the date of first notice of any Modification(s) (or such shorter period of time specified in the notice of the Modification(s)) (the “Conformance Period”) comply with such modification(s) by implementing and using the most current version of the GitHub API in the most current version of the Products and making any changes to Products that may be required as a result of such Modification(s). Developer acknowledges that a Modification may have an adverse effect on Products, including but not limited to changing the manner in which applications communicate with the GitHub API. GitHub shall have no liability of any kind to Developer or any End User with respect to such Modifications or any adverse effects resulting from such Modifications. Developer’s continued access to or use of Marketplace or the GitHub API following the Conformance Period shall constitute binding acceptance of the Modification(s) at issue. 12. ASSIGNMENT; ENTIRE AGREEMENT; REVISIONS 12.1 Developer may not, directly or indirectly, by operation of law or otherwise, assign all or any part of this Agreement or Developer’s rights under this Agreement or delegate performance of Developer’s duties under this Agreement without GitHub’s prior written consent. The rights granted in this Agreement may be assigned or transferred by GitHub without Developer’s prior approval. In addition, GitHub may delegate its responsibilities or obligations under this Agreement without Developer’s consent. 12.2 This Agreement, together with the Terms, constitute the entire agreement between the parties with respect to the subject matter of this Agreement. GitHub’s failure to enforce at any time any provision of this Agreement does not constitute a waiver of that provision or of any other provision of this Agreement. 13. SEVERABILITY If any provision in this Agreement is held by a court of competent jurisdiction to be unenforceable, such provision shall be modified by the court and interpreted so as to best accomplish the original provision to the fullest extent permitted by law, and the remaining provisions of this Agreement shall remain in effect. 14. RELATIONSHIP OF THE PARTIES The parties are independent contractors. This Agreement does not create a partnership, franchise, joint venture, agency, fiduciary or employment relationship among the parties. Developer agrees that each member of the group of companies to which GitHub belongs shall be a third party beneficiary to this Agreement and that such other companies shall be entitled to directly enforce, and rely upon, any provision of this Agreement that confers a benefit or grants a right in favor or GitHub. No other person, company or legal entity shall be a third party beneficiary to the Agreement. 15. NOTICE All notices to be provided by GitHub to Developer under this Agreement may be delivered in writing (i) by nationally recognized overnight delivery service (“Courier”) or U.S. mail to the contact mailing address provided by Developer to GitHub; or (ii) electronic mail to the electronic mail address provided by Developer. Developer must give notice to GitHub in writing by Courier or U.S. Mail to the following address: GitHub, Inc., Attn: Legal Department, 88 Colin P. Kelly Jr. Street, San Francisco, CA 94107 USA. All notices shall be deemed to have been given immediately upon delivery by electronic mail, or if otherwise delivered upon receipt or, if earlier, two (2) business days after being deposited in the mail or with a Courier as permitted above. 16. GOVERNING LAW This Agreement shall be governed by the laws of the State of California without regard to conflict of law principles. Developer hereby expressly agrees to submit to the exclusive personal jurisdiction of the federal and state courts of the State of California, San Francisco County, for the purpose of resolving any dispute relating to this Agreement. Notwithstanding the foregoing, GitHub shall be entitled to seek injunctive remedies or other types of urgent legal relief in any jurisdiction. 17. EXPORT RESTRICTIONS DEVELOPER PRODUCTS DISTRIBUTED VIA MARKETPLACE MAY BE SUBJECT TO EXPORT CONTROLS OR RESTRICTIONS BY THE UNITED STATES OR OTHER COUNTRIES OR TERRITORIES. DEVELOPER AGREES TO COMPLY WITH ALL APPLICABLE US AND INTERNATIONAL EXPORT LAWS AND REGULATIONS. THESE LAWS MAY INCLUDE RESTRICTIONS ON DESINATIONS, CONTENT AND/OR END USERS. 18. USAGE DATA In order to operate and improve Marketplace, GitHub may collect Usage Data from Marketplace and GitHub API or anywhere previously purchased or downloaded Products are stored on behalf of End Users by GitHub. The Usage Data will be maintained in accordance with GitHub’s then in effect privacy policies. Limited Usage Data may be available for use by Developer in GitHub’s sole discretion. Addendum1: Data Protection Addendum This Data Protection Addendum (this “Addendum”) is attached to and made a part of the GitHub Marketplace Developer Agreement between you and GitHub (the “Agreement”). Terms not defined in this Addendum have the meanings ascribed to them in the Agreement. In the event of a conflict or inconsistency, the terms of this Addendum will supersede those of the Agreement. A1-1. Purpose and Scope GitHub maintains personal information from individuals all over the world, some of whom are residents of countries and areas with strong data protection laws. This Addendum establishes your responsibilities when you receive and process any protected data from GitHub. A1-2. Definitions a. “Personal Information” means any information which relates to an individual GitHub customer or employee which could, alone or together with other information, personally identify him or her, whether supplied by GitHub for processing by the Developer or whether generated by the Developer in the course of performing its obligations under this Agreement. b. “Principles” means the Privacy Shield Principles of Notice, Choice, Accountability for Onward Transfer, Security, Data Integrity and Purpose Limitation, Access, and Recourse, Enforcement, and Liability, available at PrivacyShield.gov. c. “Processing” means any operation or set of operations performed on GitHub Protected Data, whether by manual or automatic means, including collection, recording, organization, storage, adaptation, alteration, retrieval, consultation, use, disclosure by transmission, dissemination or otherwise making available, blocking, erasure, or destruction. d. “Protected Data” means any confidential information transferred by GitHub to the Developer about a GitHub End User, including the Personal Information, metadata, Usage Data, or other data or information that is associated with GitHub End Users. e. “Privacy Shield” means the U.S. Department of Commerce and European Commission’s EU–U.S. Privacy Shield Framework, available at PrivacyShield.gov. A1-3. Compliance with Privacy Shield a. GitHub Compliance. GitHub represents and warrants that it complies with Privacy Shield. GitHub will only transfer Personal Information to the Developer for the limited and specified purposes for which it was collected. b. Developer Compliance. i. Developer represents and warrants that it complies with Privacy Shield; OR ii. If Developer is not certified with Privacy Shield, Developer represents and warrants that it will provide at least the same level of data protection as is required by Privacy Shield Principles. A1-4. Data Protection a. Notice. Developer must identify itself as the collector and processor of all data it collects from the End User. Developer must not hold itself out as collecting any Personal Information on GitHub’s behalf. Developer must provide sufficient notice of its privacy practices to the End User, such as by posting a privacy policy. b. Purpose Limitation. i. GitHub will provide Developer with Protected Data elements for the purpose of establishing and facilitating a relationship between the Developer and the End User, and permitting Developer to provide services to the End User. Developer must limit its usage of the Protected Data to that purpose, unless the End User agrees to allow different uses. ii. Developer must process and communicate the Protected Data to third parties only for the limited and specific purposes of providing its services to the End User as described in its agreement with the End User, unless the End User agrees to allow different uses. c. Data Quality and Proportionality. Developer must keep the Protected Data accurate and up to date. d. Security. Developer must take all reasonable security measures appropriate to the risks, such as against accidental or unlawful destruction, or accidental loss, alteration, unauthorized disclosure or access, presented by processing the Protected Data. e. Data Retention and Deletion. Upon GitHub’s reasonable request, unless prohibited by law, Developer must return or destroy all Personal Information and related data at all locations where it is stored after it is no longer needed for the limited and specified purposes for which it was collected. Developer must have in place or develop information destruction processes that meet GitHub’s security requirements in Section 3.8 of the Agreement. f. Subprocessing and Onward Transfer. Developer is liable for onward transfers of Protected Data to its subprocessors. In the event that Developer must transfer the Protected Data to a third party, or Developer installs, uses, or enables third party services to process the Protected Data on Developer’s behalf, Developer must ensure that the third party will provide at least the same level of privacy protection as is required by the Privacy Shield Principles. A1-5. Use of Protected Data a. Permitted Use. Developer may process the Protected Data only for the purposes set out in Section 4(b)(i), and no other purpose. b. No Use in Marketing. Developer must not use the Protected Data for the purposes of advertising any third party goods or services, and may not sell the Protected Data to any third party. c. Automated Decisions. In the event that the Developer makes automated decisions affecting GitHub customers’ rights, including employment, credit, or health, the Developer must provide notice to the individuals. A1-6. Compliance a. Developer must comply with reasonable requests for information on its privacy and data use practices in the following manner: i. On request, Developer will make its Privacy Statement, Privacy Policy, Privacy Notice, or any similar documentation available. Developer will also provide notice of any relevant compliance reports, including Privacy Shield compliance. ii. Developer will comply with the Information Security and Audit obligations in Section 3.7 of the GitHub Marketplace Developer Agreement. A1-7. Termination a. Suspension. In the event that Developer is in breach of its obligations to maintain an adequate level of privacy protection, GitHub may temporarily suspend the transfer of Protected Data or prohibit collection and processing of Protected Data on GitHub’s behalf until the breach is repaired or the Agreement is terminated. b. Termination With Cause. GitHub may terminate the Agreement without prejudice to any other claims at law or in equity in the event that: i. the Developer notifies GitHub that it can no longer meet its privacy obligations; ii. the transfer, collection, or processing of Protected Data has been temporarily suspended for longer than one month pursuant to 7(a); iii. the Developer is in substantial or persistent breach of any warranties or representations under this Data Protection Addendum; iv. the Developer is no longer carrying on business, is dissolved, enters receivership, or a winding up order is made on behalf of Developer. c. Breach. Failure to comply with the provisions of this Data Protection Addendum is considered a material breach under the Master Services Agreement. d. Notification. In the event that Developer determines that it can no longer meet its privacy obligations under this Agreement, it must notify GitHub immediately. In the event that Developer was certified under Privacy Shield and allows that certification to lapse or otherwise cannot remain certified under Privacy Shield, Developer must notify GitHub immediately. e. Modifications. GitHub may modify this Addendum from time to time as required by law, with thirty days’ notice to Developer. If Developer is unable to comply with the modifications to the Addendum, GitHub may terminate the Agreement. f. Upon Termination, Developer must: i. take reasonable and appropriate steps to stop processing of the Protected Data; ii. within thirty days of termination, delete any Protected Data Developer stores on GitHub’s behalf; and iii. provide GitHub with reasonable assurance that Developer has stopped processing the Protected Data and deleted the stored Protected Data. A1-8. Liability for Data Processing a. Direct Liability. Developer will be liable to GitHub for actual damages caused by any breach of this Addendum subject to the terms in Section 8, Limitation on Liability of the Marketplace Developer Agreement. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support GitHub Pre-Release Program - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Site Policy / GitHub Pre-Release Program GitHub Pre-Release Program mac windows linux all Thanks for signing up to participate in GitHub pre-release programs! As a trusted member of our community, your feedback on new and experimental features is important to us. In order to share these new products and services with you – many of which are still secret and in development – we’ll need you to agree to a special set of terms. Welcome to the Pre-Release Program Agreement (“Agreement”). This Agreement is a legal agreement between you (“you”, "your") and GitHub, Inc. (“GitHub”, “we”, or “us”). Be sure to read this Agreement carefully – you can only be a pre-release program participant if you accept all the terms of this Agreement. By clicking the “Register for the GitHub Pre-Release Program” button, or by participating as a pre-release program participant in any way – for example, by accessing information about GitHub products or services that aren’t yet available to the general public – you’re agreeing to be bound by all the terms of this Agreement. IF YOU’RE ENTERING INTO THIS AGREEMENT ON BEHALF OF A COMPANY OR OTHER LEGAL ENTITY, YOU REPRESENT THAT YOU HAVE THE LEGAL AUTHORITY TO BIND THE ENTITY TO THIS AGREEMENT, IN WHICH CASE "YOU" WILL MEAN THE ENTITY YOU REPRESENT. IF YOU DON’T HAVE SUCH AUTHORITY, OR IF YOU DON’T AGREE WITH THE TERMS AND CONDITIONS OF THIS AGREEMENT, YOU MUST NOT CLICK THE "REGISTER FOR THE GITHUB PRE-RELEASE PROGRAM" BUTTON, AND YOU CAN’T BE A PRE-RELEASE PROGRAM PARTICIPANT. IF YOU’RE A COMPANY OR OTHER LEGAL ENTITY, YOU REPRESENT THAT THE PERSON CLICKING THE "REGISTER FOR THE GITHUB PRE-RELEASE PROGRAM" BUTTON HAS THE AUTHORITY TO BIND YOU TO THIS AGREEMENT. 1. GitHub.com’s Terms of Use or the GitHub Enterprise Software License Agreement Will Apply You need to have an account on GitHub.com or on a licensed instance of GitHub Enterprise in order to be a pre-release program participant. In addition to the GitHub.com Terms of Service or your applicable GitHub Enterprise License Agreement, as applicable, (the "Generally Applicable Terms"), by clicking the "Register for the GitHub Pre-Release Program" button, you are also agreeing to be bound by this Agreement, such that both agreements will apply to you concurrently. In the event of a direct conflict between this Agreement and the Generally Applicable Terms, your Generally Applicable Terms will control, except with respect to any use of Pre-Release Materials, in which case this Agreement will control. 2. Confidentiality; Access to Pre-Release Materials As a pre-release program participant, you may get access to special information that isn’t available to the rest of the world. Due to the sensitive nature of this information, it’s important for us to make sure that you keep that information secret. You agree that any non-public information we give you, or that you may have access to as a pre-release program participant, will be considered GitHub’s confidential information (collectively, “Confidential Information”), regardless of whether it is marked or identified as such. You agree to only use such Confidential Information for the express purpose of testing and evaluation of the Pre-Release Materials (the “Purpose”), and not for any other purpose. You should use the same degree of care as you would with your confidential information but no less than reasonable precautions to prevent any unauthorized use, disclosure, publication, or dissemination of our Confidential Information. You promise not to disclose, publish, or disseminate any Confidential Information to any third party other than your employees and contractors, and then only to the extent that: (i) they need to know the Confidential Information for the Purpose; (ii) you make them aware of the confidential nature of the Confidential Information; (iii) you remain responsible for the acts and omissions of such employees and contractors; and (iv) we don’t otherwise prohibit or restrict such disclosure. You understand that unauthorized disclosure or use of our Confidential Information could cause us irreparable harm, and significant injury that may be difficult for us to quantify. Accordingly, you agree that we’ll have the right to seek immediate injunctive relief to make sure you comply with this Agreement, in addition to any other rights and remedies we may have. If you are required by law, regulation or a valid binding order of a court of competent jurisdiction to disclose our Confidential Information, you may do so, but only if you notify us before you do, and do your best to limit such disclosure and to seek confidential, protective treatment of such information. The obligations in this Section 2 won’t apply to information that you can prove: (i) was generally available to the public before we disclosed it to you; (ii) became generally available to the public after we disclosed it to you, through no action or inaction on your part, or on the part of your employees or contractors; (iii) you knew about before we disclosed it to you; (iv) was disclosed to you by a third party, who didn’t have any confidentiality obligations with respect to it; (v) you independently developed without breach of any confidentiality obligation to us or any third party; or (vi) we gave you permission to disclose, in a writing signed by one of our authorized representatives. If we give you access to any software, pre-release software or related documentation or materials, which may include videos or other forms of content (“Pre-Release Materials”), then subject to your compliance with the terms and conditions of this Agreement and your Generally Applicable Terms, we hereby grant you a nonexclusive, nontransferable, revocable right and license to use the Pre-Release Materials during the term of this Agreement, solely for the Purpose. If the Pre-Release Materials are accompanied by a separate license agreement, you agree that the separate license agreement (in addition to any more restrictive provisions contained in this Agreement or your Generally Applicable Terms) will apply. You agree not to decompile, reverse engineer, disassemble, or otherwise reduce the Pre-Release Materials to a human-perceivable form, and you promise not to modify, network, rent, lease, transmit, sell, or loan the Pre-Release Materials, in whole or in part. You understand that we’re under no obligation to provide any Pre-Release Materials to you, to provide you with updates, enhancements, or corrections to the Pre-Release Materials, or to notify you of changes that we make to our products and services, now or in the future. 3. Term and Termination This Agreement begins on the date you click “Agree”, and continues for a period of one (1) year. This Agreement will automatically renew for successive one-year terms unless either party gives written notice at least thirty (30) days before the current term expires that it wants to terminate, or one party terminates it earlier in accordance with this Section 3. Either you or GitHub may terminate this Agreement for any reason, without cause, upon thirty (30) days prior written notice to the other. This Agreement will terminate immediately, without the requirement of notice, if you breach any term of this Agreement or your Generally Applicable Terms. The rights and obligations in Sections 1, 2, and 4 through 17 will survive the termination or expiration of this Agreement. Upon termination or expiration of this Agreement all of the rights and licenses we granted you in this Agreement will immediately cease to exist, you will return (or, at our request, destroy) all of our Confidential Information and any copies (including electronic copies) which are in your possession or control, and you will certify in writing that you’ve complied with these requirements. 4. Warranties and Disclaimers You warrant to us that you: (i) have the authority to execute this Agreement and to perform its obligations; (ii) will make no false or misleading statements or representations regarding GitHub or our products and services; and (iii) will not take on any obligation or responsibility, or make any representation, warranty, guarantee or endorsement to anyone on our behalf (including, without limitation, any of our products or services). YOU UNDERSTAND AND AGREE THAT ANY MATERIALS OR INFORMATION THAT WE GIVE YOU OR THAT YOU HAVE ACCESS TO UNDER THIS AGREEMENT (INCLUDING, WITHOUT LIMITATION, ANY CONFIDENTIAL INFORMATION OR PRE-RELEASE MATERIALS) ARE PROVIDED “AS IS”, AND WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED. WE SPECIFICALLY DISCLAIM ANY AND ALL IMPLIED WARRANTIES OR CONDITIONS OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT. 5. Indemnity We’ll be giving you access to lots of useful pre-release products, services, and information, such as the Pre-Release Materials, and there are ways that you could use them improperly that could cause us harm. With that in mind, and since we can’t control the ways that you use what we give you, you agree that you will indemnify, defend and hold us harmless from and against any and all claims which may arise under or out of your participation in any pre-release program; your negligence or intentional misconduct; any misrepresentations you make with respect to us, or our products or services; or your violation of any part of this Agreement. 6. Limitation of Liability IN NO EVENT WILL WE BE LIABLE TO YOU OR TO ANY THIRD PARTY FOR ANY INDIRECT, SPECIAL, INCIDENTAL, CONSEQUENTIAL, EXEMPLARY OR PUNITIVE DAMAGES, INCLUDING BUT NOT LIMITED TO DAMAGES FOR LOST DATA, LOST PROFITS OR COSTS OF PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, HOWEVER CAUSED AND UNDER ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, TORT (INCLUDING WITHOUT LIMITATION PRODUCTS LIABILITY, STRICT LIABILITY AND NEGLIGENCE), OR ANY OTHER THEORY, AND WHETHER OR NOT WE KNEW OR SHOULD HAVE KNOWN ABOUT THE POSSIBILITY OF SUCH DAMAGE. IN NO EVENT WILL OUR AGGREGATE LIABILITY TO YOU ARISING OUT OF OR RELATED TO THIS AGREEMENT FOR ANY CAUSE WHATSOEVER, AND REGARDLESS OF THE FORM OF ACTION, WHETHER IN CONTRACT OR IN TORT, EXCEED THE GREATER OF (I) AMOUNTS YOU ACTUALLY PAID US UNDER THIS AGREEMENT; OR (II) FIVE HUNDRED DOLLARS ($500). THE FOREGOING LIMITATIONS WILL APPLY NOTWITHSTANDING THE FAILURE OF ESSENTIAL PURPOSE OF ANY LIMITED REMEDY STATED IN THIS AGREEMENT. 7. Export Control You aren’t allowed to export or re-export any of our Confidential Information, except as authorized by United States law and the laws of the jurisdiction in which the Confidential Information was obtained. In particular, you aren’t allowed to export or re-export our Confidential Information into any U.S. embargoed countries, to anyone on the U.S. Treasury Department's list of Specially Designated Nationals, or to anyone on the U.S. Department of Commerce Denied Person's List or Entity List. By participating in a pre-release program or receiving any of our Confidential Information, you represent and warrant that you are not located in any such country or on any such list. 8. Proprietary Rights You agree that GitHub and its licensors own all right, title and interest in and to the Pre-Release Materials, and all other GitHub products and services; all information and data relating to their configurations and combinations; and all modifications to and derivative works of any of the foregoing. You agree not to remove, alter, cover or obfuscate any copyright or other proprietary rights notices we place on or embed in the Pre-Release Materials, or any other GitHub products and services. 9. Government Users If you are a Government entity, this Section applies to you. Certain of our Confidential Information may be considered “Commercial Items”, as that term is defined at 48 C.F.R. §2.101, consisting of “Commercial Computer Software” and “Commercial Computer Software Documentation”, as such terms are used in 48 C.F.R. §12.212 or 48 C.F.R. §227.7202, as applicable. Consistent with 48 C.F.R. §12.212 or 48 C.F.R. §227.7202-1 through 227.7202-4, as applicable, the Commercial Computer Software and Commercial Computer Software Documentation are being licensed to U.S. Government end users (a) only as Commercial Items and (b) with only those rights as are granted to all other end users pursuant to the terms and conditions herein. GitHub, Inc. 88 Colin P. Kelly Street, San Francisco, CA 94107. 10. Independent Development Nothing in this Agreement will impair our right to develop, acquire, license, market, promote or distribute products, software or technologies that might compete with yours. 11. Privacy As part of the development and evaluation of our pre-release programs, we need to collect information about how you use the services and how we can improve them. By agreeing to participate in GitHub's pre-release programs, you agree that you have read and consented to our Full Privacy Policy. We may collect certain additional personal information from participants in the pre-release programs. For example, we may invite participants to send us feedback (as explained in Section 12). We might ask questions about each user's experiences, familiarity with the product, or demographic information. We use this information to improve our products and services, and we do not sell it to third parties or advertisers. You may decline to give us feedback, decline to answer specific questions, or contact us to delete or alter the information we have collected about you. GitHub's servers are located in the United States. We process and control your data in the United States. However, you alone are responsible for determining what personal data you submit to us. Please see our Privacy Policy for more information. 12. Feedback We’re always trying to improve of products and services, and your feedback as a pre-release program participant will help us do that. If you choose to give us any ideas, know-how, algorithms, code contributions, suggestions, enhancement requests, recommendations or any other feedback for our products or services (collectively, “Feedback”), you acknowledge and agree that GitHub will have a royalty-free, fully paid-up, worldwide, transferable, sub-licensable, irrevocable and perpetual license to implement, use, modify, commercially exploit and/or incorporate the Feedback into our products, services, and documentation. 13. Independent Contractors The parties to this Agreement are independent contractors. Neither party will be deemed to be an employee, agent, partner, franchisor, franchisee or legal representative of the other for any purpose and neither party will have any right, power or authority to create any obligation or responsibility on behalf of the other. 14. Assignment You aren’t allowed to assign or transfer this Agreement, or any of your rights under it, in whole or in part, by operation of law or otherwise, without our prior written consent. 15. Governing Law and Venue This Agreement will be interpreted and construed in accordance with the laws of the State of California, without regard to conflict of law principles. All disputes arising out of this Agreement will be subject to the exclusive jurisdiction of the state and federal courts located in San Francisco County, California, and each party hereby consents to personal jurisdiction there. 16. Amendments; Waivers; No Third Party Beneficiaries This Agreement may not be changed, except by a writing signed by both parties. Any waiver of the provisions of this Agreement or of a party's rights or remedies under this Agreement must be in writing to be effective. If any term, condition, or provision in this Agreement is found to be invalid or unenforceable, the remaining terms will continue to be valid and enforceable to the fullest extent permitted by law. We each expressly agree that there are no third party beneficiaries to this Agreement. 17. Entire Agreement This Agreement and your Generally Applicable Terms contain the entire agreement of the parties with respect to its subject matter and supersede all prior communications, representations, understandings and agreements, whether written or oral. The terms or conditions of any of your purchase orders, acknowledgements, or other documents that you send us in connection with this Agreement will be null and void, and of no effect. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support GitHub Open Source Applications Terms and Conditions - User Documentation <meta name="Description" content="These GitHub Open Source Applications Terms and Conditions (\"Application Terms\") are a legal agreement between you (either as an individual or on behalf of an entity) and GitHub, Inc. regarding your …"> GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Site Policy / GitHub Open Source Applications Terms and Conditions GitHub Open Source Applications Terms and Conditions mac windows linux all These GitHub Open Source Applications Terms and Conditions ("Application Terms") are a legal agreement between you (either as an individual or on behalf of an entity) and GitHub, Inc. regarding your use of GitHub's applications, such as GitHub Desktop™ and associated documentation ("Software"). These Application Terms apply to the executable code version of the Software. Source code for the Software is available separately and free of charge under open source software license agreements. If you do not agree to all of the terms in these Application Terms, do not download, install, use, or copy the Software. Connecting to GitHub If you configure the Software to work with one or more accounts on the GitHub.com website or with an instance of GitHub Enterprise, your use of the Software will also be governed your applicable GitHub.com website Terms of Service and/or the license agreement applicable to your instance of GitHub Enterprise ("GitHub Terms"). Any use of the Software that violates your applicable GitHub Terms will also be a violation of these Application Terms. Open Source Licenses and Notices The open source license for the Software is included in the "Open Source Notices" documentation that is included with the Software. That documentation also includes copies of all applicable open source licenses. To the extent the terms of the licenses applicable to open source components require GitHub to make an offer to provide source code in connection with the Software, such offer is hereby made, and you may exercise it by contacting GitHub: https://github.com/contact Unless otherwise agreed to in writing with GitHub, your agreement with GitHub will always include, at a minimum, these Application Terms. Open source software licenses for the Software's source code constitute separate written agreements. To the limited extent that the open source software licenses expressly supersede these Application Terms, the open source licenses govern your agreement with GitHub for the use of the Software or specific included components of the Software. GitHub's Logos The license grant included with the Software is not for GitHub's trademarks, which include the Software logo designs. GitHub reserves all trademark and copyright rights in and to all GitHub trademarks. GitHub's logos include, for instance, the stylized designs that include "logo" in the file title in the "logos" folder. The names GitHub, GitHub Desktop, GitHub for Mac, GitHub for Windows, Atom, the Octocat, and related GitHub logos and/or stylized names are trademarks of GitHub. You agree not to display or use these trademarks in any manner without GitHub's prior, written permission, except as allowed by GitHub's Logos and Usage Policy: https://github.com/logos. Privacy The Software may collect personal information. You may control what information the Software collects in the settings panel. If the Software does collect personal information on GitHub's behalf, GitHub will process that information in accordance with the GitHub Privacy Statement. Additional Services Auto-Update Services The Software may include an auto-update service ("Service"). If you choose to use the Service or you download Software that automatically enables the Service, GitHub will automatically update the Software when a new version is available. Disclaimers and Limitations of Liability THE SERVICE IS PROVIDED ON AN "AS IS" BASIS, AND NO WARRANTY, EITHER EXPRESS OR IMPLIED, IS GIVEN. YOUR USE OF THE SERVICE IS AT YOUR SOLE RISK. GitHub does not warrant that (i) the Service will meet your specific requirements; (ii) the Service is fully compatible with any particular platform; (iii) your use of the Service will be uninterrupted, timely, secure, or error-free; (iv) the results that may be obtained from the use of the Service will be accurate or reliable; (v) the quality of any products, services, information, or other material purchased or obtained by you through the Service will meet your expectations; or (vi) any errors in the Service will be corrected. YOU EXPRESSLY UNDERSTAND AND AGREE THAT GITHUB SHALL NOT BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, CONSEQUENTIAL OR EXEMPLARY DAMAGES, INCLUDING BUT NOT LIMITED TO, DAMAGES FOR LOSS OF PROFITS, GOODWILL, USE, DATA OR OTHER INTANGIBLE LOSSES (EVEN IF GITHUB HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES) RELATED TO THE SERVICE, including, for example: (i) the use or the inability to use the Service; (ii) the cost of procurement of substitute goods and services resulting from any goods, data, information or services purchased or obtained or messages received or transactions entered into through or from the Service; (iii) unauthorized access to or alteration of your transmissions or data; (iv) statements or conduct of any third-party on the Service; (v) or any other matter relating to the Service. GitHub reserves the right at any time and from time to time to modify or discontinue, temporarily or permanently, the Service (or any part thereof) with or without notice. GitHub shall not be liable to you or to any third-party for any price change, suspension or discontinuance of the Service. Miscellanea No Waiver. The failure of GitHub to exercise or enforce any right or provision of these Application Terms shall not constitute a waiver of such right or provision. Entire Agreement. These Application Terms, together with any applicable Privacy Notices, constitutes the entire agreement between you and GitHub and governs your use of the Software, superseding any prior agreements between you and GitHub (including, but not limited to, any prior versions of the Application Terms). Governing Law. You agree that these Application Terms and your use of the Software are governed under California law and any dispute related to the Software must be brought in a tribunal of competent jurisdiction located in or near San Francisco, California. Third-Party Packages. The Software supports third-party "Packages" which may modify, add, remove, or alter the functionality of the Software. These Packages are not covered by these Application Terms and may include their own license which governs your use of that particular package. No Modifications; Complete Agreement. These Application Terms may only be modified by a written amendment signed by an authorized representative of GitHub, or by the posting by GitHub of a revised version. These Application Terms, together with any applicable Open Source Licenses and Notices and GitHub's Privacy Statement, represent the complete and exclusive statement of the agreement between you and us. These Application Terms supersede any proposal or prior agreement oral or written, and any other communications between you and GitHub relating to the subject matter of these terms. License to GitHub Policies. These Application Terms are licensed under this Creative Commons Zero license. For details, see our site-policy repository. Contact Us. Questions about the Terms of Service? Contact us. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support GitHub and Export Controls - User Documentation GitHub Help Version GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 Contact Support Return to GitHub Site Policy / GitHub and Export Controls GitHub and Export Controls mac windows linux all GitHub.com, GitHub Enterprise, and the information you upload to either product may be subject to US export control laws, including U.S. Export Administration Regulations (the EAR). Although we've provided the following information below for your convenience, it is ultimately your responsibility to ensure that your use of GitHub's products and services comply with all applicable laws and regulations, including US export control laws. GitHub.com GitHub.com, the cloud-hosted service offering available at github.com has not been audited for compliance with ITAR or other export controls, and does not currently offer the ability to restrict repository access by country. If you are looking to collaborate on ITAR- or other export-controlled data, we recommend you consider GitHub Enterprise, GitHub's on-premises offering. GitHub Enterprise GitHub Enterprise is a self-hosted virtual appliance that can be run within your own datacenter or virtual private cloud. As such, GitHub Enterprise can be used to store ITAR- or other export-controlled information, however, end users are responsible for ensuring such compliance. GitHub has an Encryption Registration Number (ERN) of R108186. GitHub Enterprise is a commercial, mass-market product and has been assigned the Encryption Control Registration Number (ECCN) of 5D992.c and may be exported to most destinations with no license required (NLR). GitHub Enterprise may not be sold to, exported, or re-exported to any country listed in Country Group E:1 in Supplement No. 1 to part 740 of the EAR. This list currently contains Cuba, Iran, North Korea, Sudan & Syria, but may be subject to change. Contact a human Article versions GitHub.com GitHub Enterprise 2.12 GitHub Enterprise 2.11 GitHub Enterprise 2.10 GitHub Enterprise 2.9 © 2017 GitHub Inc. All rights reserved. Terms of Service Privacy Security Support
